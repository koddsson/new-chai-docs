[
    {
        "comment": "",
        "meta": {
            "range": [
                478,
                487
            ],
            "filename": "chai.js",
            "lineno": 16,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000033",
                "name": "used",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "used",
        "longname": "used",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                517,
                531
            ],
            "filename": "chai.js",
            "lineno": 19,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000037",
                "name": "exports.AssertionError",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "AssertionError",
        "longname": "AssertionError",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function} fn\n * @returns {this} for chaining\n * @public\n */",
        "meta": {
            "range": [
                687,
                937
            ],
            "filename": "chai.js",
            "lineno": 30,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000040",
                "name": "exports.use",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "fn"
                ]
            }
        },
        "description": "# .use(function)\n\nProvides a way to extend the internals of Chai.",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "this"
                    ]
                },
                "description": "for chaining"
            }
        ],
        "access": "public",
        "name": "use",
        "longname": "use",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                694,
                937
            ],
            "filename": "chai.js",
            "lineno": 30,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000041",
                "name": "use",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "exports": "use.use"
            }
        },
        "undocumented": true,
        "name": "use",
        "longname": "use",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                721,
                840
            ],
            "filename": "chai.js",
            "lineno": 31,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000046",
                "name": "exports",
                "type": "ObjectExpression",
                "value": "{\"use\":\"\",\"AssertionError\":\"\",\"util\":\"\",\"config\":\"\",\"expect\":\"\",\"assert\":\"\",\"Assertion\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "use",
        "longname": "use.use",
        "kind": "constant",
        "memberof": "use",
        "scope": "static",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                737,
                740
            ],
            "filename": "chai.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000049",
                "name": "use",
                "type": "Identifier",
                "value": "use"
            }
        },
        "undocumented": true,
        "name": "use",
        "longname": "use.use.use",
        "kind": "member",
        "memberof": "use.use",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                746,
                760
            ],
            "filename": "chai.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000051",
                "name": "AssertionError",
                "type": "Identifier",
                "value": "AssertionError"
            }
        },
        "undocumented": true,
        "name": "AssertionError",
        "longname": "use.use.AssertionError",
        "kind": "member",
        "memberof": "use.use",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                766,
                770
            ],
            "filename": "chai.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000053",
                "name": "util",
                "type": "Identifier",
                "value": "util"
            }
        },
        "undocumented": true,
        "name": "util",
        "longname": "use.use.util",
        "kind": "member",
        "memberof": "use.use",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                776,
                782
            ],
            "filename": "chai.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000055",
                "name": "config",
                "type": "Identifier",
                "value": "config"
            }
        },
        "undocumented": true,
        "name": "config",
        "longname": "use.use.config",
        "kind": "member",
        "memberof": "use.use",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                788,
                794
            ],
            "filename": "chai.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000057",
                "name": "expect",
                "type": "Identifier",
                "value": "expect"
            }
        },
        "undocumented": true,
        "name": "expect",
        "longname": "use.use.expect",
        "kind": "member",
        "memberof": "use.use",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                800,
                806
            ],
            "filename": "chai.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000059",
                "name": "assert",
                "type": "Identifier",
                "value": "assert"
            }
        },
        "undocumented": true,
        "name": "assert",
        "longname": "use.use.assert",
        "kind": "member",
        "memberof": "use.use",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                812,
                821
            ],
            "filename": "chai.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000061",
                "name": "Assertion",
                "type": "Identifier",
                "value": "Assertion"
            }
        },
        "undocumented": true,
        "name": "Assertion",
        "longname": "use.use.Assertion",
        "kind": "member",
        "memberof": "use.use",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                968,
                972
            ],
            "filename": "chai.js",
            "lineno": 51,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000088",
                "name": "exports.util",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "util",
        "longname": "util",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1001,
                1007
            ],
            "filename": "chai.js",
            "lineno": 54,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000092",
                "name": "exports.config",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "config",
        "longname": "config",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1044,
                1080
            ],
            "filename": "chai.js",
            "lineno": 57,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000095",
                "name": "module.exports",
                "type": "ExportAllDeclaration"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1102,
                1145
            ],
            "filename": "chai.js",
            "lineno": 60,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000097",
                "name": "module.exports",
                "type": "ExportAllDeclaration"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1167,
                1210
            ],
            "filename": "chai.js",
            "lineno": 63,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000099",
                "name": "module.exports",
                "type": "ExportAllDeclaration"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1232,
                1275
            ],
            "filename": "chai.js",
            "lineno": 66,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib",
            "code": {
                "id": "astnode100000101",
                "name": "module.exports",
                "type": "ExportAllDeclaration"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * Assertion Constructor\n *\n * Creates object for chaining.\n *\n * `Assertion` objects contain metadata in the form of flags. Three flags can\n * be assigned during instantiation by passing arguments to this constructor:\n *\n * - `object`: This flag contains the target of the assertion. For example, in\n * the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n * contain `numKittens` so that the `equal` assertion can reference it when\n * needed.\n *\n * - `message`: This flag contains an optional custom error message to be\n * prepended to the error message that's generated by the assertion when it\n * fails.\n *\n * - `ssfi`: This flag stands for \"start stack function indicator\". It\n * contains a function reference that serves as the starting point for\n * removing frames from the stack trace of the error that's created by the\n * assertion when it fails. The goal is to provide a cleaner stack trace to\n * end users by removing Chai's internal functions. Note that it only works\n * in environments that support `Error.captureStackTrace`, and only when\n * `Chai.config.includeStack` hasn't been set to `false`.\n *\n * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n * should retain its current value, even as assertions are chained off of\n * this object. This is usually set to `true` when creating a new assertion\n * from within another assertion. It's also temporarily set to `true` before\n * an overwritten assertion gets called by the overwriting assertion.\n *\n * - `eql`: This flag contains the deepEqual function to be used by the assertion.\n *\n * @param {unknown} obj target of the assertion\n * @param {string} msg (optional) custom error message\n * @param {Function} ssfi (optional) starting point for removing stack frames\n * @param {boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n * @returns {unknown}\n * @private\n */",
        "meta": {
            "range": [
                2137,
                2434
            ],
            "filename": "assertion.js",
            "lineno": 52,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000117",
                "name": "exports.Assertion",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "msg",
                    "ssfi",
                    "lockSsfi"
                ]
            }
        },
        "description": "Assertion Constructor\n\nCreates object for chaining.\n\n`Assertion` objects contain metadata in the form of flags. Three flags can\nbe assigned during instantiation by passing arguments to this constructor:\n\n- `object`: This flag contains the target of the assertion. For example, in\nthe assertion `expect(numKittens).to.equal(7);`, the `object` flag will\ncontain `numKittens` so that the `equal` assertion can reference it when\nneeded.\n\n- `message`: This flag contains an optional custom error message to be\nprepended to the error message that's generated by the assertion when it\nfails.\n\n- `ssfi`: This flag stands for \"start stack function indicator\". It\ncontains a function reference that serves as the starting point for\nremoving frames from the stack trace of the error that's created by the\nassertion when it fails. The goal is to provide a cleaner stack trace to\nend users by removing Chai's internal functions. Note that it only works\nin environments that support `Error.captureStackTrace`, and only when\n`Chai.config.includeStack` hasn't been set to `false`.\n\n- `lockSsfi`: This flag controls whether or not the given `ssfi` flag\nshould retain its current value, even as assertions are chained off of\nthis object. This is usually set to `true` when creating a new assertion\nfrom within another assertion. It's also temporarily set to `true` before\nan overwritten assertion gets called by the overwriting assertion.\n\n- `eql`: This flag contains the deepEqual function to be used by the assertion.",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "target of the assertion",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "(optional) custom error message",
                "name": "msg"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "(optional) starting point for removing stack frames",
                "name": "ssfi"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "(optional) whether or not the ssfi flag is locked",
                "name": "lockSsfi"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                }
            }
        ],
        "access": "private",
        "name": "Assertion",
        "longname": "Assertion",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2144,
                2434
            ],
            "filename": "assertion.js",
            "lineno": 52,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000118",
                "name": "Assertion",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "msg",
                    "ssfi",
                    "lockSsfi"
                ]
            }
        },
        "undocumented": true,
        "name": "Assertion",
        "longname": "Assertion",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2489,
                2652
            ],
            "filename": "assertion.js",
            "lineno": 63,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000187",
                "name": "get",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "get",
        "longname": "get",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2656,
                2825
            ],
            "filename": "assertion.js",
            "lineno": 69,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000200",
                "name": "set",
                "type": "FunctionExpression"
            },
            "vars": {
                "config.includeStack": "config.includeStack"
            }
        },
        "undocumented": true,
        "name": "set",
        "longname": "set",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2793,
                2820
            ],
            "filename": "assertion.js",
            "lineno": 73,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000211",
                "name": "config.includeStack",
                "type": "Identifier",
                "value": "value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "includeStack",
        "longname": "config.includeStack",
        "kind": "member",
        "memberof": "config",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2880,
                3031
            ],
            "filename": "assertion.js",
            "lineno": 78,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000224",
                "name": "get",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "get",
        "longname": "get",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3035,
                3192
            ],
            "filename": "assertion.js",
            "lineno": 84,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000237",
                "name": "set",
                "type": "FunctionExpression"
            },
            "vars": {
                "config.showDiff": "config.showDiff"
            }
        },
        "undocumented": true,
        "name": "set",
        "longname": "set",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3164,
                3187
            ],
            "filename": "assertion.js",
            "lineno": 88,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000248",
                "name": "config.showDiff",
                "type": "Identifier",
                "value": "value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "showDiff",
        "longname": "config.showDiff",
        "kind": "member",
        "memberof": "config",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3198,
                3291
            ],
            "filename": "assertion.js",
            "lineno": 92,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000254",
                "name": "Assertion.addProperty",
                "type": "FunctionExpression",
                "paramnames": [
                    "name",
                    "fn"
                ]
            }
        },
        "undocumented": true,
        "name": "addProperty",
        "longname": "Assertion.addProperty",
        "kind": "function",
        "memberof": "Assertion",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3294,
                3383
            ],
            "filename": "assertion.js",
            "lineno": 96,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000273",
                "name": "Assertion.addMethod",
                "type": "FunctionExpression",
                "paramnames": [
                    "name",
                    "fn"
                ]
            }
        },
        "undocumented": true,
        "name": "addMethod",
        "longname": "Assertion.addMethod",
        "kind": "function",
        "memberof": "Assertion",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3386,
                3529
            ],
            "filename": "assertion.js",
            "lineno": 100,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000292",
                "name": "Assertion.addChainableMethod",
                "type": "FunctionExpression",
                "paramnames": [
                    "name",
                    "fn",
                    "chainingBehavior"
                ]
            }
        },
        "undocumented": true,
        "name": "addChainableMethod",
        "longname": "Assertion.addChainableMethod",
        "kind": "function",
        "memberof": "Assertion",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3532,
                3637
            ],
            "filename": "assertion.js",
            "lineno": 104,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000313",
                "name": "Assertion.overwriteProperty",
                "type": "FunctionExpression",
                "paramnames": [
                    "name",
                    "fn"
                ]
            }
        },
        "undocumented": true,
        "name": "overwriteProperty",
        "longname": "Assertion.overwriteProperty",
        "kind": "function",
        "memberof": "Assertion",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3640,
                3741
            ],
            "filename": "assertion.js",
            "lineno": 108,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000332",
                "name": "Assertion.overwriteMethod",
                "type": "FunctionExpression",
                "paramnames": [
                    "name",
                    "fn"
                ]
            }
        },
        "undocumented": true,
        "name": "overwriteMethod",
        "longname": "Assertion.overwriteMethod",
        "kind": "function",
        "memberof": "Assertion",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3744,
                3899
            ],
            "filename": "assertion.js",
            "lineno": 112,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000351",
                "name": "Assertion.overwriteChainableMethod",
                "type": "FunctionExpression",
                "paramnames": [
                    "name",
                    "fn",
                    "chainingBehavior"
                ]
            }
        },
        "undocumented": true,
        "name": "overwriteChainableMethod",
        "longname": "Assertion.overwriteChainableMethod",
        "kind": "function",
        "memberof": "Assertion",
        "scope": "static"
    },
    {
        "comment": "/**\n * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n *\n * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n *\n * @name assert\n * @param {unknown} expression to be tested\n * @param {string | Function} message or function that returns message to display if expression fails\n * @param {string | Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n * @param {unknown} expected value (remember to check for negation)\n * @param {unknown} actual (optional) will default to `this.obj`\n * @param {boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n * @private\n */",
        "meta": {
            "filename": "assertion.js",
            "lineno": 116,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {}
        },
        "description": "### .assert(expression, message, negateMessage, expected, actual, showDiff)\n\nExecutes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.",
        "name": "assert",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "to be tested",
                "name": "expression"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "function"
                    ]
                },
                "description": "or function that returns message to display if expression fails",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "function"
                    ]
                },
                "description": "or function that returns negatedMessage to display if negated expression fails",
                "name": "negatedMessage"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "value (remember to check for negation)",
                "name": "expected"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "(optional) will default to `this.obj`",
                "name": "actual"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "(optional) when set to `true`, assert will display a diff in addition to the message if expression fails",
                "name": "showDiff"
            }
        ],
        "access": "private",
        "longname": "assert",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4669,
                5508
            ],
            "filename": "assertion.js",
            "lineno": 131,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000372",
                "name": "Assertion.prototype.assert",
                "type": "FunctionExpression",
                "paramnames": [
                    "expr",
                    "msg",
                    "negateMsg",
                    "expected",
                    "_actual",
                    "showDiff"
                ]
            },
            "vars": {
                "ok": "Assertion#assert~ok",
                "showDiff": "Assertion#assert~showDiff",
                "msg": "Assertion#assert~msg",
                "actual": "Assertion#assert~actual",
                "assertionErrorObjectProperties": "Assertion#assert~assertionErrorObjectProperties",
                "operator": "Assertion#assert~operator",
                "assertionErrorObjectProperties.operator": "Assertion#assert~assertionErrorObjectProperties.operator"
            }
        },
        "undocumented": true,
        "name": "assert",
        "longname": "Assertion#assert",
        "kind": "function",
        "memberof": "Assertion",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4781,
                4812
            ],
            "filename": "assertion.js",
            "lineno": 139,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000387",
                "name": "ok",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ok",
        "longname": "Assertion#assert~ok",
        "kind": "member",
        "memberof": "Assertion#assert",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4840,
                4855
            ],
            "filename": "assertion.js",
            "lineno": 140,
            "columnno": 26,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000400",
                "name": "showDiff",
                "type": "Literal",
                "funcscope": "Assertion#assert",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "showDiff",
        "longname": "Assertion#assert~showDiff",
        "kind": "member",
        "memberof": "Assertion#assert",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4912,
                4928
            ],
            "filename": "assertion.js",
            "lineno": 141,
            "columnno": 55,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000412",
                "name": "showDiff",
                "type": "Literal",
                "funcscope": "Assertion#assert",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "showDiff",
        "longname": "Assertion#assert~showDiff",
        "kind": "member",
        "memberof": "Assertion#assert",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4962,
                4978
            ],
            "filename": "assertion.js",
            "lineno": 142,
            "columnno": 32,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000422",
                "name": "showDiff",
                "type": "Literal",
                "funcscope": "Assertion#assert",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "showDiff",
        "longname": "Assertion#assert~showDiff",
        "kind": "member",
        "memberof": "Assertion#assert",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4998,
                5036
            ],
            "filename": "assertion.js",
            "lineno": 145,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000430",
                "name": "msg",
                "type": "CallExpression",
                "funcscope": "Assertion#assert",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "Assertion#assert~msg",
        "kind": "member",
        "memberof": "Assertion#assert",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5046,
                5086
            ],
            "filename": "assertion.js",
            "lineno": 146,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000439",
                "name": "actual",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "Assertion#assert~actual",
        "kind": "member",
        "memberof": "Assertion#assert",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5096,
                5209
            ],
            "filename": "assertion.js",
            "lineno": 147,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000448",
                "name": "assertionErrorObjectProperties",
                "type": "ObjectExpression",
                "value": "{\"actual\":\"\",\"expected\":\"\",\"showDiff\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "assertionErrorObjectProperties",
        "longname": "Assertion#assert~assertionErrorObjectProperties",
        "kind": "member",
        "memberof": "Assertion#assert",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5137,
                5151
            ],
            "filename": "assertion.js",
            "lineno": 148,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000451",
                "name": "actual",
                "type": "Identifier",
                "value": "actual"
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "Assertion#assert~assertionErrorObjectProperties.actual",
        "kind": "member",
        "memberof": "Assertion#assert~assertionErrorObjectProperties",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5159,
                5177
            ],
            "filename": "assertion.js",
            "lineno": 149,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000453",
                "name": "expected",
                "type": "Identifier",
                "value": "expected"
            }
        },
        "undocumented": true,
        "name": "expected",
        "longname": "Assertion#assert~assertionErrorObjectProperties.expected",
        "kind": "member",
        "memberof": "Assertion#assert~assertionErrorObjectProperties",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5185,
                5203
            ],
            "filename": "assertion.js",
            "lineno": 150,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000455",
                "name": "showDiff",
                "type": "Identifier",
                "value": "showDiff"
            }
        },
        "undocumented": true,
        "name": "showDiff",
        "longname": "Assertion#assert~assertionErrorObjectProperties.showDiff",
        "kind": "member",
        "memberof": "Assertion#assert~assertionErrorObjectProperties",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5220,
                5264
            ],
            "filename": "assertion.js",
            "lineno": 153,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000458",
                "name": "operator",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "operator",
        "longname": "Assertion#assert~operator",
        "kind": "member",
        "memberof": "Assertion#assert",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5292,
                5342
            ],
            "filename": "assertion.js",
            "lineno": 155,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000470",
                "name": "assertionErrorObjectProperties.operator",
                "type": "Identifier",
                "funcscope": "Assertion#assert",
                "value": "operator",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "operator",
        "longname": "Assertion#assert~assertionErrorObjectProperties.operator",
        "kind": "member",
        "memberof": "Assertion#assert~assertionErrorObjectProperties",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5672,
                5732
            ],
            "filename": "assertion.js",
            "lineno": 174,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000503",
                "name": "get",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "get",
        "longname": "get",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5736,
                5797
            ],
            "filename": "assertion.js",
            "lineno": 177,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000513",
                "name": "set",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "set",
        "longname": "set",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                0,
                3784
            ],
            "filename": "config.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000527",
                "name": "exports.config",
                "type": "VariableDeclaration"
            }
        },
        "undocumented": true,
        "name": "config",
        "longname": "config",
        "kind": "constant",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13,
                3783
            ],
            "filename": "config.js",
            "lineno": 1,
            "columnno": 13,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000529",
                "name": "config",
                "type": "ObjectExpression",
                "value": "{\"includeStack\":false,\"showDiff\":true,\"truncateThreshold\":40,\"useProxy\":true,\"proxyExcludedKeys\":\"\",\"deepEqual\":null}"
            }
        },
        "undocumented": true,
        "name": "config",
        "longname": "config",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {boolean}\n   * @public\n   */",
        "meta": {
            "range": [
                361,
                380
            ],
            "filename": "config.js",
            "lineno": 14,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000532",
                "name": "includeStack",
                "type": "Literal",
                "value": false
            }
        },
        "description": "### config.includeStack\n\nUser configurable property, influences whether stack trace\nis included in Assertion error message. Default of false\nsuppresses stack trace in the error message.\n\n    chai.config.includeStack = true;  // enable stack on error",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "access": "public",
        "name": "includeStack",
        "longname": "config.includeStack",
        "kind": "member",
        "memberof": "config",
        "scope": "static"
    },
    {
        "comment": "/**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {boolean}\n   * @public\n   */",
        "meta": {
            "range": [
                718,
                732
            ],
            "filename": "config.js",
            "lineno": 28,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000534",
                "name": "showDiff",
                "type": "Literal",
                "value": true
            }
        },
        "description": "### config.showDiff\n\nUser configurable property, influences whether or not\nthe `showDiff` flag should be included in the thrown\nAssertionErrors. `false` will always be `false`; `true`\nwill be true when the assertion has requested a diff\nbe shown.",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "access": "public",
        "name": "showDiff",
        "longname": "config.showDiff",
        "kind": "member",
        "memberof": "config",
        "scope": "static"
    },
    {
        "comment": "/**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {number}\n   * @public\n   */",
        "meta": {
            "range": [
                1423,
                1444
            ],
            "filename": "config.js",
            "lineno": 49,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000536",
                "name": "truncateThreshold",
                "type": "Literal",
                "value": 40
            }
        },
        "description": "### config.truncateThreshold\n\nUser configurable property, sets length threshold for actual and\nexpected values in assertion errors. If this threshold is exceeded, for\nexample for large data structures, the value is replaced with something\nlike `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n\nSet it to zero if you want to disable truncating altogether.\n\nThis is especially userful when doing assertions on arrays: having this\nset to a reasonable large value makes the failure messages readily\ninspectable.\n\n    chai.config.truncateThreshold = 0;  // disable truncating",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "access": "public",
        "name": "truncateThreshold",
        "longname": "config.truncateThreshold",
        "kind": "member",
        "memberof": "config",
        "scope": "static"
    },
    {
        "comment": "/**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {boolean}\n   * @public\n   */",
        "meta": {
            "range": [
                1995,
                2009
            ],
            "filename": "config.js",
            "lineno": 68,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000538",
                "name": "useProxy",
                "type": "Literal",
                "value": true
            }
        },
        "description": "### config.useProxy\n\nUser configurable property, defines if chai will use a Proxy to throw\nan error when a non-existent property is read, which protects users\nfrom typos when using property-based assertions.\n\nSet it to false if you want to disable this feature.\n\n    chai.config.useProxy = false;  // disable use of Proxy\n\nThis feature is automatically disabled regardless of this config value\nin environments that don't support proxies.",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "access": "public",
        "name": "useProxy",
        "longname": "config.useProxy",
        "kind": "member",
        "memberof": "config",
        "scope": "static"
    },
    {
        "comment": "/**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @public\n   */",
        "meta": {
            "range": [
                2855,
                2912
            ],
            "filename": "config.js",
            "lineno": 87,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000540",
                "name": "proxyExcludedKeys",
                "type": "ArrayExpression",
                "value": "[\"then\",\"catch\",\"inspect\",\"toJSON\"]"
            }
        },
        "description": "### config.proxyExcludedKeys\n\nUser configurable property, defines which properties should be ignored\ninstead of throwing an error if they do not exist on the assertion.\nThis is only applied if the environment Chai is running in supports proxies and\nif the `useProxy` configuration setting is enabled.\nBy default, `then` and `inspect` will not throw an error if they do not exist on the\nassertion object because the `.inspect` property is read by `util.inspect` (for example, when\nusing `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n\n    // By default these keys will not throw an error if they do not exist on the assertion object\n    chai.config.proxyExcludedKeys = ['then', 'inspect'];",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "access": "public",
        "name": "proxyExcludedKeys",
        "longname": "config.proxyExcludedKeys",
        "kind": "member",
        "memberof": "config",
        "scope": "static"
    },
    {
        "comment": "/**\n   * ### config.deepEqual\n   *\n   * User configurable property, defines which a custom function to use for deepEqual\n   * comparisons.\n   * By default, the function used is the one from the `deep-eql` package without custom comparator.\n   *\n   *     // use a custom comparator\n   *     chai.config.deepEqual = (expected, actual) => {\n   *         return chai.util.eql(expected, actual, {\n   *             comparator: (expected, actual) => {\n   *                 // for non number comparison, use the default behavior\n   *                 if(typeof expected !== 'number') return null;\n   *                 // allow a difference of 10 between compared numbers\n   *                 return typeof actual === 'number' && Math.abs(actual - expected) < 10\n   *             }\n   *         })\n   *     };\n   *\n   * @param {Function}\n   * @public\n   */",
        "meta": {
            "range": [
                3766,
                3781
            ],
            "filename": "config.js",
            "lineno": 111,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai",
            "code": {
                "id": "astnode100000546",
                "name": "deepEqual",
                "type": "Literal",
                "value": null
            }
        },
        "description": "### config.deepEqual\n\nUser configurable property, defines which a custom function to use for deepEqual\ncomparisons.\nBy default, the function used is the one from the `deep-eql` package without custom comparator.\n\n    // use a custom comparator\n    chai.config.deepEqual = (expected, actual) => {\n        return chai.util.eql(expected, actual, {\n            comparator: (expected, actual) => {\n                // for non number comparison, use the default behavior\n                if(typeof expected !== 'number') return null;\n                // allow a difference of 10 between compared numbers\n                return typeof actual === 'number' && Math.abs(actual - expected) < 10\n            }\n        })\n    };",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "access": "public",
        "name": "deepEqual",
        "longname": "config.deepEqual",
        "kind": "member",
        "memberof": "config",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                300,
                304
            ],
            "filename": "assertions.js",
            "lineno": 13,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000569",
                "name": "flag",
                "type": "Identifier",
                "value": "flag"
            }
        },
        "undocumented": true,
        "name": "flag",
        "longname": "flag",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * The following are provided as chainable getters to improve the readability\n * of your assertions.\n *\n * **Chains**\n *\n * - to\n * - be\n * - been\n * - is\n * - that\n * - which\n * - and\n * - has\n * - have\n * - with\n * - at\n * - of\n * - same\n * - but\n * - does\n * - still\n * - also\n *\n * @name language chains\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 15,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "The following are provided as chainable getters to improve the readability\nof your assertions.\n\n**Chains**\n\n- to\n- be\n- been\n- is\n- that\n- which\n- and\n- has\n- have\n- with\n- at\n- of\n- same\n- but\n- does\n- still\n- also",
        "name": "language chains",
        "access": "public",
        "longname": "language chains",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Negates all assertions that follow in the chain.\n *\n *     expect(function () {}).to.not.throw();\n *     expect({a: 1}).to.not.have.property('b');\n *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n *\n * Just because you can negate any assertion with `.not` doesn't mean you\n * should. With great power comes great responsibility. It's often best to\n * assert that the one expected output was produced, rather than asserting\n * that one of countless unexpected outputs wasn't produced. See individual\n * assertions for specific guidance.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.not.equal(1); // Not recommended\n *\n * @name not\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 65,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Negates all assertions that follow in the chain.\n\n    expect(function () {}).to.not.throw();\n    expect({a: 1}).to.not.have.property('b');\n    expect([1, 2]).to.be.an('array').that.does.not.include(3);\n\nJust because you can negate any assertion with `.not` doesn't mean you\nshould. With great power comes great responsibility. It's often best to\nassert that the one expected output was produced, rather than asserting\nthat one of countless unexpected outputs wasn't produced. See individual\nassertions for specific guidance.\n\n    expect(2).to.equal(2); // Recommended\n    expect(2).to.not.equal(1); // Not recommended",
        "name": "not",
        "access": "public",
        "longname": "not",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n * assertions that follow in the chain to use deep equality instead of strict\n * (`===`) equality. See the `deep-eql` project page for info on the deep\n * equality algorithm: https://github.com/chaijs/deep-eql.\n *\n *     // Target object deeply (but not strictly) equals `{a: 1}`\n *     expect({a: 1}).to.deep.equal({a: 1});\n *     expect({a: 1}).to.not.equal({a: 1});\n *\n *     // Target array deeply (but not strictly) includes `{a: 1}`\n *     expect([{a: 1}]).to.deep.include({a: 1});\n *     expect([{a: 1}]).to.not.include({a: 1});\n *\n *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n *\n *     // Target array deeply (but not strictly) has member `{a: 1}`\n *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n *\n *     // Target set deeply (but not strictly) has key `{a: 1}`\n *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n *\n *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n *\n * @name deep\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 89,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\nassertions that follow in the chain to use deep equality instead of strict\n(`===`) equality. See the `deep-eql` project page for info on the deep\nequality algorithm: https://github.com/chaijs/deep-eql.\n\n    // Target object deeply (but not strictly) equals `{a: 1}`\n    expect({a: 1}).to.deep.equal({a: 1});\n    expect({a: 1}).to.not.equal({a: 1});\n\n    // Target array deeply (but not strictly) includes `{a: 1}`\n    expect([{a: 1}]).to.deep.include({a: 1});\n    expect([{a: 1}]).to.not.include({a: 1});\n\n    // Target object deeply (but not strictly) includes `x: {a: 1}`\n    expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n    expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n\n    // Target array deeply (but not strictly) has member `{a: 1}`\n    expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n    expect([{a: 1}]).to.not.have.members([{a: 1}]);\n\n    // Target set deeply (but not strictly) has key `{a: 1}`\n    expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n    expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n\n    // Target object deeply (but not strictly) has property `x: {a: 1}`\n    expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n    expect({x: {a: 1}}).to.not.have.property('x', {a: 1});",
        "name": "deep",
        "access": "public",
        "longname": "deep",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Enables dot- and bracket-notation in all `.property` and `.include`\n * assertions that follow in the chain.\n *\n *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n *\n * If `.` or `[]` are part of an actual property name, they can be escaped by\n * adding two backslashes before them.\n *\n *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n *\n * `.nested` cannot be combined with `.own`.\n *\n * @name nested\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 127,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Enables dot- and bracket-notation in all `.property` and `.include`\nassertions that follow in the chain.\n\n    expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n    expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n\nIf `.` or `[]` are part of an actual property name, they can be escaped by\nadding two backslashes before them.\n\n    expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n    expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n\n`.nested` cannot be combined with `.own`.",
        "name": "nested",
        "access": "public",
        "longname": "nested",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Causes all `.property` and `.include` assertions that follow in the chain\n * to ignore inherited properties.\n *\n *     Object.prototype.b = 2;\n *\n *     expect({a: 1}).to.have.own.property('a');\n *     expect({a: 1}).to.have.property('b');\n *     expect({a: 1}).to.not.have.own.property('b');\n *\n *     expect({a: 1}).to.own.include({a: 1});\n *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n *\n * `.own` cannot be combined with `.nested`.\n *\n * @name own\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 150,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Causes all `.property` and `.include` assertions that follow in the chain\nto ignore inherited properties.\n\n    Object.prototype.b = 2;\n\n    expect({a: 1}).to.have.own.property('a');\n    expect({a: 1}).to.have.property('b');\n    expect({a: 1}).to.not.have.own.property('b');\n\n    expect({a: 1}).to.own.include({a: 1});\n    expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n\n`.own` cannot be combined with `.nested`.",
        "name": "own",
        "access": "public",
        "longname": "own",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Causes all `.members` assertions that follow in the chain to require that\n * members be in the same order.\n *\n *     expect([1, 2]).to.have.ordered.members([1, 2])\n *       .but.not.have.ordered.members([2, 1]);\n *\n * When `.include` and `.ordered` are combined, the ordering begins at the\n * start of both arrays.\n *\n *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n *       .but.not.include.ordered.members([2, 3]);\n *\n * @name ordered\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 173,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Causes all `.members` assertions that follow in the chain to require that\nmembers be in the same order.\n\n    expect([1, 2]).to.have.ordered.members([1, 2])\n      .but.not.have.ordered.members([2, 1]);\n\nWhen `.include` and `.ordered` are combined, the ordering begins at the\nstart of both arrays.\n\n    expect([1, 2, 3]).to.include.ordered.members([1, 2])\n      .but.not.include.ordered.members([2, 3]);",
        "name": "ordered",
        "access": "public",
        "longname": "ordered",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Causes all `.keys` assertions that follow in the chain to only require that\n * the target have at least one of the given keys. This is the opposite of\n * `.all`, which requires that the target have all of the given keys.\n *\n *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n *\n * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n *\n * @name any\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 194,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Causes all `.keys` assertions that follow in the chain to only require that\nthe target have at least one of the given keys. This is the opposite of\n`.all`, which requires that the target have all of the given keys.\n\n    expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n\nSee the `.keys` doc for guidance on when to use `.any` or `.all`.",
        "name": "any",
        "access": "public",
        "longname": "any",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Causes all `.keys` assertions that follow in the chain to require that the\n * target have all of the given keys. This is the opposite of `.any`, which\n * only requires that the target have at least one of the given keys.\n *\n *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n *\n * Note that `.all` is used by default when neither `.all` nor `.any` are\n * added earlier in the chain. However, it's often best to add `.all` anyway\n * because it improves readability.\n *\n * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n *\n * @name all\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 212,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Causes all `.keys` assertions that follow in the chain to require that the\ntarget have all of the given keys. This is the opposite of `.any`, which\nonly requires that the target have at least one of the given keys.\n\n    expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n\nNote that `.all` is used by default when neither `.all` nor `.any` are\nadded earlier in the chain. However, it's often best to add `.all` anyway\nbecause it improves readability.\n\nSee the `.keys` doc for guidance on when to use `.any` or `.all`.",
        "name": "all",
        "access": "public",
        "longname": "all",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6144,
                6460
            ],
            "filename": "assertions.js",
            "lineno": 233,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000714",
                "name": "functionTypes",
                "type": "ObjectExpression",
                "value": "{\"function\":\"\",\"asyncfunction\":\"\",\"generatorfunction\":\"\",\"asyncgeneratorfunction\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "functionTypes",
        "longname": "functionTypes",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6164,
                6271
            ],
            "filename": "assertions.js",
            "lineno": 234,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000717",
                "name": "function",
                "type": "ArrayExpression",
                "value": "[\"function\",\"asyncfunction\",\"generatorfunction\",\"asyncgeneratorfunction\"]"
            }
        },
        "undocumented": true,
        "name": "function",
        "longname": "functionTypes.function",
        "kind": "member",
        "memberof": "functionTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6275,
                6333
            ],
            "filename": "assertions.js",
            "lineno": 240,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000723",
                "name": "asyncfunction",
                "type": "ArrayExpression",
                "value": "[\"asyncfunction\",\"asyncgeneratorfunction\"]"
            }
        },
        "undocumented": true,
        "name": "asyncfunction",
        "longname": "functionTypes.asyncfunction",
        "kind": "member",
        "memberof": "functionTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6337,
                6403
            ],
            "filename": "assertions.js",
            "lineno": 241,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000727",
                "name": "generatorfunction",
                "type": "ArrayExpression",
                "value": "[\"generatorfunction\",\"asyncgeneratorfunction\"]"
            }
        },
        "undocumented": true,
        "name": "generatorfunction",
        "longname": "functionTypes.generatorfunction",
        "kind": "member",
        "memberof": "functionTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6407,
                6457
            ],
            "filename": "assertions.js",
            "lineno": 242,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000731",
                "name": "asyncgeneratorfunction",
                "type": "ArrayExpression",
                "value": "[\"asyncgeneratorfunction\"]"
            }
        },
        "undocumented": true,
        "name": "asyncgeneratorfunction",
        "longname": "functionTypes.asyncgeneratorfunction",
        "kind": "member",
        "memberof": "functionTypes",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that the target's type is equal to the given string `type`. Types\n * are case insensitive. See the utility file `./type-detect.js` for info on the\n * type detection algorithm.\n *\n *     expect('foo').to.be.a('string');\n *     expect({a: 1}).to.be.an('object');\n *     expect(null).to.be.a('null');\n *     expect(undefined).to.be.an('undefined');\n *     expect(new Error).to.be.an('error');\n *     expect(Promise.resolve()).to.be.a('promise');\n *     expect(new Float32Array).to.be.a('float32array');\n *     expect(Symbol()).to.be.a('symbol');\n *\n * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n *\n *     var myObj = {\n *         [Symbol.toStringTag]: 'myCustomType'\n *     };\n *\n *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n *\n * It's often best to use `.a` to check a target's type before making more\n * assertions on the same target. That way, you avoid unexpected behavior from\n * any assertion that does different things based on the target's type.\n *\n *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n *     expect([]).to.be.an('array').that.is.empty;\n *\n * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n * assert that the target is the expected type, rather than asserting that it\n * isn't one of many unexpected types.\n *\n *     expect('foo').to.be.a('string'); // Recommended\n *     expect('foo').to.not.be.an('array'); // Not recommended\n *\n * `.a` accepts an optional `msg` argument which is a custom error message to\n * show when the assertion fails. The message can also be given as the second\n * argument to `expect`.\n *\n *     expect(1).to.be.a('string', 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.be.a('string');\n *\n * `.a` can also be used as a language chain to improve the readability of\n * your assertions.\n *\n *     expect({b: 2}).to.have.a.property('b');\n *\n * The alias `.an` can be used interchangeably with `.a`.\n *\n * @name a\n * @alias an\n * @param {string} type\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 245,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target's type is equal to the given string `type`. Types\nare case insensitive. See the utility file `./type-detect.js` for info on the\ntype detection algorithm.\n\n    expect('foo').to.be.a('string');\n    expect({a: 1}).to.be.an('object');\n    expect(null).to.be.a('null');\n    expect(undefined).to.be.an('undefined');\n    expect(new Error).to.be.an('error');\n    expect(Promise.resolve()).to.be.a('promise');\n    expect(new Float32Array).to.be.a('float32array');\n    expect(Symbol()).to.be.a('symbol');\n\n`.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n\n    var myObj = {\n        [Symbol.toStringTag]: 'myCustomType'\n    };\n\n    expect(myObj).to.be.a('myCustomType').but.not.an('object');\n\nIt's often best to use `.a` to check a target's type before making more\nassertions on the same target. That way, you avoid unexpected behavior from\nany assertion that does different things based on the target's type.\n\n    expect([1, 2, 3]).to.be.an('array').that.includes(2);\n    expect([]).to.be.an('array').that.is.empty;\n\nAdd `.not` earlier in the chain to negate `.a`. However, it's often best to\nassert that the target is the expected type, rather than asserting that it\nisn't one of many unexpected types.\n\n    expect('foo').to.be.a('string'); // Recommended\n    expect('foo').to.not.be.an('array'); // Not recommended\n\n`.a` accepts an optional `msg` argument which is a custom error message to\nshow when the assertion fails. The message can also be given as the second\nargument to `expect`.\n\n    expect(1).to.be.a('string', 'nooo why fail??');\n    expect(1, 'nooo why fail??').to.be.a('string');\n\n`.a` can also be used as a language chain to improve the readability of\nyour assertions.\n\n    expect({b: 2}).to.have.a.property('b');\n\nThe alias `.an` can be used interchangeably with `.a`.",
        "name": "a",
        "alias": "an",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "a",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8525,
                9186
            ],
            "filename": "assertions.js",
            "lineno": 301,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000734",
                "name": "an",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "type",
                    "msg"
                ]
            },
            "vars": {
                "type": "an~type",
                "obj": "an~obj",
                "article": "an~article",
                "detectedType": "an~detectedType"
            }
        },
        "undocumented": true,
        "name": "an",
        "longname": "an",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8591,
                8616
            ],
            "filename": "assertions.js",
            "lineno": 303,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000748",
                "name": "type",
                "type": "CallExpression",
                "funcscope": "an",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "an~type",
        "kind": "member",
        "memberof": "an",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8624,
                8650
            ],
            "filename": "assertions.js",
            "lineno": 304,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000755",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "an~obj",
        "kind": "member",
        "memberof": "an",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8656,
                8731
            ],
            "filename": "assertions.js",
            "lineno": 305,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000761",
                "name": "article",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "article",
        "longname": "an~article",
        "kind": "member",
        "memberof": "an",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8742,
                8782
            ],
            "filename": "assertions.js",
            "lineno": 307,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000782",
                "name": "detectedType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "detectedType",
        "longname": "an~detectedType",
        "kind": "constant",
        "memberof": "an",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */",
        "meta": {
            "range": [
                9342,
                9422
            ],
            "filename": "assertions.js",
            "lineno": 332,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000856",
                "name": "SameValueZero",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "a",
                    "b"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "name": "SameValueZero",
        "longname": "SameValueZero",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "/** */",
        "meta": {
            "range": [
                9431,
                9501
            ],
            "filename": "assertions.js",
            "lineno": 337,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000877",
                "name": "includeChainingBehavior",
                "type": "FunctionDeclaration",
                "paramnames": []
            }
        },
        "name": "includeChainingBehavior",
        "longname": "includeChainingBehavior",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * When the target is a string, `.include` asserts that the given string `val`\n * is a substring of the target.\n *\n *     expect('foobar').to.include('foo');\n *\n * When the target is an array, `.include` asserts that the given `val` is a\n * member of the target.\n *\n *     expect([1, 2, 3]).to.include(2);\n *\n * When the target is an object, `.include` asserts that the given object\n * `val`'s properties are a subset of the target's properties.\n *\n *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n *\n * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n * member of the target. SameValueZero equality algorithm is used.\n *\n *     expect(new Set([1, 2])).to.include(2);\n *\n * When the target is a Map, `.include` asserts that the given `val` is one of\n * the values of the target. SameValueZero equality algorithm is used.\n *\n *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n *\n * Because `.include` does different things based on the target's type, it's\n * important to check the target's type before using `.include`. See the `.a`\n * doc for info on testing a target's type.\n *\n *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n *\n * By default, strict (`===`) equality is used to compare array members and\n * object properties. Add `.deep` earlier in the chain to use deep equality\n * instead (WeakSet targets are not supported). See the `deep-eql` project\n * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n *\n *     // Target array deeply (but not strictly) includes `{a: 1}`\n *     expect([{a: 1}]).to.deep.include({a: 1});\n *     expect([{a: 1}]).to.not.include({a: 1});\n *\n *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n *\n * By default, all of the target's properties are searched when working with\n * objects. This includes properties that are inherited and/or non-enumerable.\n * Add `.own` earlier in the chain to exclude the target's inherited\n * properties from the search.\n *\n *     Object.prototype.b = 2;\n *\n *     expect({a: 1}).to.own.include({a: 1});\n *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n *\n * Note that a target object is always only searched for `val`'s own\n * enumerable properties.\n *\n * `.deep` and `.own` can be combined.\n *\n *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n *\n * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n * referencing nested properties.\n *\n *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n *\n * If `.` or `[]` are part of an actual property name, they can be escaped by\n * adding two backslashes before them.\n *\n *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n *\n * `.deep` and `.nested` can be combined.\n *\n *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n *\n * `.own` and `.nested` cannot be combined.\n *\n * Add `.not` earlier in the chain to negate `.include`.\n *\n *     expect('foobar').to.not.include('taco');\n *     expect([1, 2, 3]).to.not.include(4);\n *\n * However, it's dangerous to negate `.include` when the target is an object.\n * The problem is that it creates uncertain expectations by asserting that the\n * target object doesn't have all of `val`'s key/value pairs but may or may\n * not have some of them. It's often best to identify the exact output that's\n * expected, and then write an assertion that only accepts that exact output.\n *\n * When the target object isn't even expected to have `val`'s keys, it's\n * often best to assert exactly that.\n *\n *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n *\n * When the target object is expected to have `val`'s keys, it's often best to\n * assert that each of the properties has its expected value, rather than\n * asserting that each property doesn't have one of many unexpected values.\n *\n *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n *\n * `.include` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n *\n * `.include` can also be used as a language chain, causing all `.members` and\n * `.keys` assertions that follow in the chain to require the target to be a\n * superset of the expected set, rather than an identical set. Note that\n * `.members` ignores duplicates in the subset when `.include` is added.\n *\n *     // Target object's keys are a superset of ['a', 'b'] but not identical\n *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n *\n *     // Target array is a superset of [1, 2] but not identical\n *     expect([1, 2, 3]).to.include.members([1, 2]);\n *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n *\n *     // Duplicates in the subset are ignored\n *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n *\n * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n * to ignore `.include`.\n *\n *     // Both assertions are identical\n *     expect({a: 1}).to.include.any.keys('a', 'b');\n *     expect({a: 1}).to.have.any.keys('a', 'b');\n *\n * The aliases `.includes`, `.contain`, and `.contains` can be used\n * interchangeably with `.include`.\n *\n * @name include\n * @alias contain\n * @alias includes\n * @alias contains\n * @param {unknown} val\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 341,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "When the target is a string, `.include` asserts that the given string `val`\nis a substring of the target.\n\n    expect('foobar').to.include('foo');\n\nWhen the target is an array, `.include` asserts that the given `val` is a\nmember of the target.\n\n    expect([1, 2, 3]).to.include(2);\n\nWhen the target is an object, `.include` asserts that the given object\n`val`'s properties are a subset of the target's properties.\n\n    expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n\nWhen the target is a Set or WeakSet, `.include` asserts that the given `val` is a\nmember of the target. SameValueZero equality algorithm is used.\n\n    expect(new Set([1, 2])).to.include(2);\n\nWhen the target is a Map, `.include` asserts that the given `val` is one of\nthe values of the target. SameValueZero equality algorithm is used.\n\n    expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n\nBecause `.include` does different things based on the target's type, it's\nimportant to check the target's type before using `.include`. See the `.a`\ndoc for info on testing a target's type.\n\n    expect([1, 2, 3]).to.be.an('array').that.includes(2);\n\nBy default, strict (`===`) equality is used to compare array members and\nobject properties. Add `.deep` earlier in the chain to use deep equality\ninstead (WeakSet targets are not supported). See the `deep-eql` project\npage for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n\n    // Target array deeply (but not strictly) includes `{a: 1}`\n    expect([{a: 1}]).to.deep.include({a: 1});\n    expect([{a: 1}]).to.not.include({a: 1});\n\n    // Target object deeply (but not strictly) includes `x: {a: 1}`\n    expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n    expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n\nBy default, all of the target's properties are searched when working with\nobjects. This includes properties that are inherited and/or non-enumerable.\nAdd `.own` earlier in the chain to exclude the target's inherited\nproperties from the search.\n\n    Object.prototype.b = 2;\n\n    expect({a: 1}).to.own.include({a: 1});\n    expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n\nNote that a target object is always only searched for `val`'s own\nenumerable properties.\n\n`.deep` and `.own` can be combined.\n\n    expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n\nAdd `.nested` earlier in the chain to enable dot- and bracket-notation when\nreferencing nested properties.\n\n    expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n\nIf `.` or `[]` are part of an actual property name, they can be escaped by\nadding two backslashes before them.\n\n    expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n\n`.deep` and `.nested` can be combined.\n\n    expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n\n`.own` and `.nested` cannot be combined.\n\nAdd `.not` earlier in the chain to negate `.include`.\n\n    expect('foobar').to.not.include('taco');\n    expect([1, 2, 3]).to.not.include(4);\n\nHowever, it's dangerous to negate `.include` when the target is an object.\nThe problem is that it creates uncertain expectations by asserting that the\ntarget object doesn't have all of `val`'s key/value pairs but may or may\nnot have some of them. It's often best to identify the exact output that's\nexpected, and then write an assertion that only accepts that exact output.\n\nWhen the target object isn't even expected to have `val`'s keys, it's\noften best to assert exactly that.\n\n    expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n    expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n\nWhen the target object is expected to have `val`'s keys, it's often best to\nassert that each of the properties has its expected value, rather than\nasserting that each property doesn't have one of many unexpected values.\n\n    expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n    expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n\n`.include` accepts an optional `msg` argument which is a custom error\nmessage to show when the assertion fails. The message can also be given as\nthe second argument to `expect`.\n\n    expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n    expect([1, 2, 3], 'nooo why fail??').to.include(4);\n\n`.include` can also be used as a language chain, causing all `.members` and\n`.keys` assertions that follow in the chain to require the target to be a\nsuperset of the expected set, rather than an identical set. Note that\n`.members` ignores duplicates in the subset when `.include` is added.\n\n    // Target object's keys are a superset of ['a', 'b'] but not identical\n    expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n    expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n\n    // Target array is a superset of [1, 2] but not identical\n    expect([1, 2, 3]).to.include.members([1, 2]);\n    expect([1, 2, 3]).to.not.have.members([1, 2]);\n\n    // Duplicates in the subset are ignored\n    expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n\nNote that adding `.any` earlier in the chain causes the `.keys` assertion\nto ignore `.include`.\n\n    // Both assertions are identical\n    expect({a: 1}).to.include.any.keys('a', 'b');\n    expect({a: 1}).to.have.any.keys('a', 'b');\n\nThe aliases `.includes`, `.contain`, and `.contains` can be used\ninterchangeably with `.include`.",
        "name": "include",
        "alias": "contains",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "include",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15352,
                18677
            ],
            "filename": "assertions.js",
            "lineno": 484,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000886",
                "name": "include",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "val",
                    "msg"
                ]
            },
            "vars": {
                "obj": "include~obj",
                "objType": "include~objType",
                "flagMsg": "include~flagMsg",
                "negate": "include~negate",
                "ssfi": "include~ssfi",
                "isDeep": "include~isDeep",
                "descriptor": "include~descriptor",
                "isEql": "include~isEql",
                "included": "include~included",
                "": null,
                "props": "include~props",
                "firstErr": "include~firstErr",
                "numErrs": "include~numErrs"
            }
        },
        "undocumented": true,
        "name": "include",
        "longname": "include",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15427,
                15453
            ],
            "filename": "assertions.js",
            "lineno": 487,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000900",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "include~obj",
        "kind": "member",
        "memberof": "include",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15459,
                15494
            ],
            "filename": "assertions.js",
            "lineno": 488,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000906",
                "name": "objType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "objType",
        "longname": "include~objType",
        "kind": "member",
        "memberof": "include",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15500,
                15531
            ],
            "filename": "assertions.js",
            "lineno": 489,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000916",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "include~flagMsg",
        "kind": "member",
        "memberof": "include",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15537,
                15566
            ],
            "filename": "assertions.js",
            "lineno": 490,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000922",
                "name": "negate",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "negate",
        "longname": "include~negate",
        "kind": "member",
        "memberof": "include",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15572,
                15597
            ],
            "filename": "assertions.js",
            "lineno": 491,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000928",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "include~ssfi",
        "kind": "member",
        "memberof": "include",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15603,
                15630
            ],
            "filename": "assertions.js",
            "lineno": 492,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000934",
                "name": "isDeep",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isDeep",
        "longname": "include~isDeep",
        "kind": "member",
        "memberof": "include",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15636,
                15670
            ],
            "filename": "assertions.js",
            "lineno": 493,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000940",
                "name": "descriptor",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "include~descriptor",
        "kind": "member",
        "memberof": "include",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15676,
                15726
            ],
            "filename": "assertions.js",
            "lineno": 494,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000946",
                "name": "isEql",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isEql",
        "longname": "include~isEql",
        "kind": "member",
        "memberof": "include",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15731,
                15770
            ],
            "filename": "assertions.js",
            "lineno": 496,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000956",
                "name": "flagMsg",
                "type": "ConditionalExpression",
                "funcscope": "include",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "include~flagMsg",
        "kind": "member",
        "memberof": "include",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15779,
                15795
            ],
            "filename": "assertions.js",
            "lineno": 498,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000965",
                "name": "included",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "included",
        "longname": "include~included",
        "kind": "member",
        "memberof": "include",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15844,
                15878
            ],
            "filename": "assertions.js",
            "lineno": 502,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000973",
                "name": "included",
                "type": "BinaryExpression",
                "funcscope": "include",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "included",
        "longname": "include~included",
        "kind": "member",
        "memberof": "include",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16095,
                16118
            ],
            "filename": "assertions.js",
            "lineno": 514,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100000998",
                "name": "included",
                "type": "CallExpression",
                "funcscope": "include",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "included",
        "longname": "include~included",
        "kind": "member",
        "memberof": "include",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16194,
                16233
            ],
            "filename": "assertions.js",
            "lineno": 519,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001017",
                "name": "included",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "included",
        "longname": "<anonymous>~included",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16343,
                16382
            ],
            "filename": "assertions.js",
            "lineno": 526,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001040",
                "name": "included",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "included",
        "longname": "<anonymous>~included",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16419,
                16442
            ],
            "filename": "assertions.js",
            "lineno": 529,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001050",
                "name": "included",
                "type": "CallExpression",
                "funcscope": "include",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "included",
        "longname": "include~included",
        "kind": "member",
        "memberof": "include",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16512,
                16595
            ],
            "filename": "assertions.js",
            "lineno": 535,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001064",
                "name": "included",
                "type": "CallExpression",
                "funcscope": "include",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "included",
        "longname": "include~included",
        "kind": "member",
        "memberof": "include",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16620,
                16654
            ],
            "filename": "assertions.js",
            "lineno": 539,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001080",
                "name": "included",
                "type": "BinaryExpression",
                "funcscope": "include",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "included",
        "longname": "include~included",
        "kind": "member",
        "memberof": "include",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17386,
                17410
            ],
            "filename": "assertions.js",
            "lineno": 564,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001138",
                "name": "props",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "props",
        "longname": "include~props",
        "kind": "member",
        "memberof": "include",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17420,
                17435
            ],
            "filename": "assertions.js",
            "lineno": 565,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001145",
                "name": "firstErr",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "firstErr",
        "longname": "include~firstErr",
        "kind": "member",
        "memberof": "include",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17445,
                17456
            ],
            "filename": "assertions.js",
            "lineno": 566,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001148",
                "name": "numErrs",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "numErrs",
        "longname": "include~numErrs",
        "kind": "member",
        "memberof": "include",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17509,
                17543
            ],
            "filename": "assertions.js",
            "lineno": 569,
            "columnno": 12,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001160",
                "name": "propAssertion",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "propAssertion",
        "longname": "<anonymous>~propAssertion",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18001,
                18015
            ],
            "filename": "assertions.js",
            "lineno": 584,
            "columnno": 33,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001229",
                "name": "firstErr",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "err",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "firstErr",
        "longname": "<anonymous>~firstErr",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that the target is a truthy value (considered `true` in boolean context).\n * However, it's often best to assert that the target is strictly (`===`) or\n * deeply equal to its expected value.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.be.ok; // Not recommended\n *\n *     expect(true).to.be.true; // Recommended\n *     expect(true).to.be.ok; // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.ok`.\n *\n *     expect(0).to.equal(0); // Recommended\n *     expect(0).to.not.be.ok; // Not recommended\n *\n *     expect(false).to.be.false; // Recommended\n *     expect(false).to.not.be.ok; // Not recommended\n *\n *     expect(null).to.be.null; // Recommended\n *     expect(null).to.not.be.ok; // Not recommended\n *\n *     expect(undefined).to.be.undefined; // Recommended\n *     expect(undefined).to.not.be.ok; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(false, 'nooo why fail??').to.be.ok;\n *\n * @name ok\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 612,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is a truthy value (considered `true` in boolean context).\nHowever, it's often best to assert that the target is strictly (`===`) or\ndeeply equal to its expected value.\n\n    expect(1).to.equal(1); // Recommended\n    expect(1).to.be.ok; // Not recommended\n\n    expect(true).to.be.true; // Recommended\n    expect(true).to.be.ok; // Not recommended\n\nAdd `.not` earlier in the chain to negate `.ok`.\n\n    expect(0).to.equal(0); // Recommended\n    expect(0).to.not.be.ok; // Not recommended\n\n    expect(false).to.be.false; // Recommended\n    expect(false).to.not.be.ok; // Not recommended\n\n    expect(null).to.be.null; // Recommended\n    expect(null).to.not.be.ok; // Not recommended\n\n    expect(undefined).to.be.undefined; // Recommended\n    expect(undefined).to.not.be.ok; // Not recommended\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect(false, 'nooo why fail??').to.be.ok;",
        "name": "ok",
        "access": "public",
        "longname": "ok",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Asserts that the target is strictly (`===`) equal to `true`.\n *\n *     expect(true).to.be.true;\n *\n * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n * to assert that the target is equal to its expected value, rather than not\n * equal to `true`.\n *\n *     expect(false).to.be.false; // Recommended\n *     expect(false).to.not.be.true; // Not recommended\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.true; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(false, 'nooo why fail??').to.be.true;\n *\n * @name true\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 652,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is strictly (`===`) equal to `true`.\n\n    expect(true).to.be.true;\n\nAdd `.not` earlier in the chain to negate `.true`. However, it's often best\nto assert that the target is equal to its expected value, rather than not\nequal to `true`.\n\n    expect(false).to.be.false; // Recommended\n    expect(false).to.not.be.true; // Not recommended\n\n    expect(1).to.equal(1); // Recommended\n    expect(1).to.not.be.true; // Not recommended\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect(false, 'nooo why fail??').to.be.true;",
        "name": "true",
        "access": "public",
        "longname": "true",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21113,
                21142
            ],
            "filename": "assertions.js",
            "lineno": 684,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001370",
                "name": "object",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "object",
        "longname": "<anonymous>~object",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target a callable function.\n *\n *     expect(console.log).to.be.callable;\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect('not a function', 'nooo why fail??').to.be.callable;\n *\n * @name callable\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 694,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target a callable function.\n\n    expect(console.log).to.be.callable;\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect('not a function', 'nooo why fail??').to.be.callable;",
        "name": "callable",
        "access": "public",
        "longname": "callable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21680,
                21706
            ],
            "filename": "assertions.js",
            "lineno": 707,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001410",
                "name": "val",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "<anonymous>~val",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21716,
                21741
            ],
            "filename": "assertions.js",
            "lineno": 708,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001417",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "<anonymous>~ssfi",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21751,
                21782
            ],
            "filename": "assertions.js",
            "lineno": 709,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001424",
                "name": "message",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~message",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21792,
                21827
            ],
            "filename": "assertions.js",
            "lineno": 710,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001431",
                "name": "msg",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "<anonymous>~msg",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21837,
                21866
            ],
            "filename": "assertions.js",
            "lineno": 711,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001441",
                "name": "negate",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "negate",
        "longname": "<anonymous>~negate",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21877,
                22040
            ],
            "filename": "assertions.js",
            "lineno": 713,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001448",
                "name": "assertionMessage",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "assertionMessage",
        "longname": "<anonymous>~assertionMessage",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22051,
                22183
            ],
            "filename": "assertions.js",
            "lineno": 717,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001473",
                "name": "isCallable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isCallable",
        "longname": "<anonymous>~isCallable",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target is strictly (`===`) equal to `false`.\n *\n *     expect(false).to.be.false;\n *\n * Add `.not` earlier in the chain to negate `.false`. However, it's often\n * best to assert that the target is equal to its expected value, rather than\n * not equal to `false`.\n *\n *     expect(true).to.be.true; // Recommended\n *     expect(true).to.not.be.false; // Not recommended\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.false; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(true, 'nooo why fail??').to.be.false;\n *\n * @name false\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 729,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is strictly (`===`) equal to `false`.\n\n    expect(false).to.be.false;\n\nAdd `.not` earlier in the chain to negate `.false`. However, it's often\nbest to assert that the target is equal to its expected value, rather than\nnot equal to `false`.\n\n    expect(true).to.be.true; // Recommended\n    expect(true).to.not.be.false; // Not recommended\n\n    expect(1).to.equal(1); // Recommended\n    expect(1).to.not.be.false; // Not recommended\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect(true, 'nooo why fail??').to.be.false;",
        "name": "false",
        "access": "public",
        "longname": "false",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Asserts that the target is strictly (`===`) equal to `null`.\n *\n *     expect(null).to.be.null;\n *\n * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n * to assert that the target is equal to its expected value, rather than not\n * equal to `null`.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.null; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(42, 'nooo why fail??').to.be.null;\n *\n * @name null\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 760,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is strictly (`===`) equal to `null`.\n\n    expect(null).to.be.null;\n\nAdd `.not` earlier in the chain to negate `.null`. However, it's often best\nto assert that the target is equal to its expected value, rather than not\nequal to `null`.\n\n    expect(1).to.equal(1); // Recommended\n    expect(1).to.not.be.null; // Not recommended\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect(42, 'nooo why fail??').to.be.null;",
        "name": "null",
        "access": "public",
        "longname": "null",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Asserts that the target is strictly (`===`) equal to `undefined`.\n *\n *     expect(undefined).to.be.undefined;\n *\n * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n * best to assert that the target is equal to its expected value, rather than\n * not equal to `undefined`.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.undefined; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(42, 'nooo why fail??').to.be.undefined;\n *\n * @name undefined\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 787,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is strictly (`===`) equal to `undefined`.\n\n    expect(undefined).to.be.undefined;\n\nAdd `.not` earlier in the chain to negate `.undefined`. However, it's often\nbest to assert that the target is equal to its expected value, rather than\nnot equal to `undefined`.\n\n    expect(1).to.equal(1); // Recommended\n    expect(1).to.not.be.undefined; // Not recommended\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect(42, 'nooo why fail??').to.be.undefined;",
        "name": "undefined",
        "access": "public",
        "longname": "undefined",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Asserts that the target is exactly `NaN`.\n *\n *     expect(NaN).to.be.NaN;\n *\n * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n * to assert that the target is equal to its expected value, rather than not\n * equal to `NaN`.\n *\n *     expect('foo').to.equal('foo'); // Recommended\n *     expect('foo').to.not.be.NaN; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(42, 'nooo why fail??').to.be.NaN;\n *\n * @name NaN\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 814,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is exactly `NaN`.\n\n    expect(NaN).to.be.NaN;\n\nAdd `.not` earlier in the chain to negate `.NaN`. However, it's often best\nto assert that the target is equal to its expected value, rather than not\nequal to `NaN`.\n\n    expect('foo').to.equal('foo'); // Recommended\n    expect('foo').to.not.be.NaN; // Not recommended\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect(42, 'nooo why fail??').to.be.NaN;",
        "name": "NaN",
        "access": "public",
        "longname": "NaN",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Asserts that the target is not strictly (`===`) equal to either `null` or\n * `undefined`. However, it's often best to assert that the target is equal to\n * its expected value.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.exist; // Not recommended\n *\n *     expect(0).to.equal(0); // Recommended\n *     expect(0).to.exist; // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.exist`.\n *\n *     expect(null).to.be.null; // Recommended\n *     expect(null).to.not.exist; // Not recommended\n *\n *     expect(undefined).to.be.undefined; // Recommended\n *     expect(undefined).to.not.exist; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(null, 'nooo why fail??').to.exist;\n *\n * The alias `.exists` can be used interchangeably with `.exist`.\n *\n * @name exist\n * @alias exists\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 841,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is not strictly (`===`) equal to either `null` or\n`undefined`. However, it's often best to assert that the target is equal to\nits expected value.\n\n    expect(1).to.equal(1); // Recommended\n    expect(1).to.exist; // Not recommended\n\n    expect(0).to.equal(0); // Recommended\n    expect(0).to.exist; // Not recommended\n\nAdd `.not` earlier in the chain to negate `.exist`.\n\n    expect(null).to.be.null; // Recommended\n    expect(null).to.not.exist; // Not recommended\n\n    expect(undefined).to.be.undefined; // Recommended\n    expect(undefined).to.not.exist; // Not recommended\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect(null, 'nooo why fail??').to.exist;\n\nThe alias `.exists` can be used interchangeably with `.exist`.",
        "name": "exist",
        "alias": "exists",
        "access": "public",
        "longname": "exist",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26306,
                26495
            ],
            "filename": "assertions.js",
            "lineno": 870,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001598",
                "name": "assertExist",
                "type": "FunctionDeclaration",
                "paramnames": []
            },
            "vars": {
                "val": "assertExist~val"
            }
        },
        "undocumented": true,
        "name": "assertExist",
        "longname": "assertExist",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26337,
                26363
            ],
            "filename": "assertions.js",
            "lineno": 871,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001602",
                "name": "val",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "assertExist~val",
        "kind": "member",
        "memberof": "assertExist",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * When the target is a string or array, `.empty` asserts that the target's\n * `length` property is strictly (`===`) equal to `0`.\n *\n *     expect([]).to.be.empty;\n *     expect('').to.be.empty;\n *\n * When the target is a map or set, `.empty` asserts that the target's `size`\n * property is strictly equal to `0`.\n *\n *     expect(new Set()).to.be.empty;\n *     expect(new Map()).to.be.empty;\n *\n * When the target is a non-function object, `.empty` asserts that the target\n * doesn't have any own enumerable properties. Properties with Symbol-based\n * keys are excluded from the count.\n *\n *     expect({}).to.be.empty;\n *\n * Because `.empty` does different things based on the target's type, it's\n * important to check the target's type before using `.empty`. See the `.a`\n * doc for info on testing a target's type.\n *\n *     expect([]).to.be.an('array').that.is.empty;\n *\n * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n * best to assert that the target contains its expected number of values,\n * rather than asserting that it's not empty.\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n *\n *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n *\n *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n *     expect({a: 1}).to.not.be.empty; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n *\n * @name empty\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 882,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "When the target is a string or array, `.empty` asserts that the target's\n`length` property is strictly (`===`) equal to `0`.\n\n    expect([]).to.be.empty;\n    expect('').to.be.empty;\n\nWhen the target is a map or set, `.empty` asserts that the target's `size`\nproperty is strictly equal to `0`.\n\n    expect(new Set()).to.be.empty;\n    expect(new Map()).to.be.empty;\n\nWhen the target is a non-function object, `.empty` asserts that the target\ndoesn't have any own enumerable properties. Properties with Symbol-based\nkeys are excluded from the count.\n\n    expect({}).to.be.empty;\n\nBecause `.empty` does different things based on the target's type, it's\nimportant to check the target's type before using `.empty`. See the `.a`\ndoc for info on testing a target's type.\n\n    expect([]).to.be.an('array').that.is.empty;\n\nAdd `.not` earlier in the chain to negate `.empty`. However, it's often\nbest to assert that the target contains its expected number of values,\nrather than asserting that it's not empty.\n\n    expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n    expect([1, 2, 3]).to.not.be.empty; // Not recommended\n\n    expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n    expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n\n    expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n    expect({a: 1}).to.not.be.empty; // Not recommended\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect([1, 2, 3], 'nooo why fail??').to.be.empty;",
        "name": "empty",
        "access": "public",
        "longname": "empty",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28295,
                28321
            ],
            "filename": "assertions.js",
            "lineno": 928,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001645",
                "name": "val",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "<anonymous>~val",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28327,
                28352
            ],
            "filename": "assertions.js",
            "lineno": 929,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001651",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "<anonymous>~ssfi",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28358,
                28389
            ],
            "filename": "assertions.js",
            "lineno": 930,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001657",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "<anonymous>~flagMsg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28395,
                28405
            ],
            "filename": "assertions.js",
            "lineno": 931,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001663",
                "name": "itemsCount"
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "<anonymous>~itemsCount",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28410,
                28449
            ],
            "filename": "assertions.js",
            "lineno": 933,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001666",
                "name": "flagMsg",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "<anonymous>~flagMsg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28534,
                28557
            ],
            "filename": "assertions.js",
            "lineno": 938,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001688",
                "name": "itemsCount",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "val.length",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "<anonymous>~itemsCount",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28610,
                28631
            ],
            "filename": "assertions.js",
            "lineno": 942,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001699",
                "name": "itemsCount",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "val.size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "<anonymous>~itemsCount",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28848,
                28912
            ],
            "filename": "assertions.js",
            "lineno": 952,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001720",
                "name": "msg",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "<anonymous>~msg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29197,
                29233
            ],
            "filename": "assertions.js",
            "lineno": 962,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001763",
                "name": "itemsCount",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": ".length",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "<anonymous>~itemsCount",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that the target is an `arguments` object.\n *\n *     function test () {\n *         expect(arguments).to.be.arguments;\n *     }\n *\n *     test();\n *\n * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n * best to assert which type the target is expected to be, rather than\n * asserting that it’s not an `arguments` object.\n *\n *     expect('foo').to.be.a('string'); // Recommended\n *     expect('foo').to.not.be.arguments; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect({}, 'nooo why fail??').to.be.arguments;\n *\n * The alias `.Arguments` can be used interchangeably with `.arguments`.\n *\n * @name arguments\n * @alias Arguments\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 972,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is an `arguments` object.\n\n    function test () {\n        expect(arguments).to.be.arguments;\n    }\n\n    test();\n\nAdd `.not` earlier in the chain to negate `.arguments`. However, it's often\nbest to assert which type the target is expected to be, rather than\nasserting that it’s not an `arguments` object.\n\n    expect('foo').to.be.a('string'); // Recommended\n    expect('foo').to.not.be.arguments; // Not recommended\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect({}, 'nooo why fail??').to.be.arguments;\n\nThe alias `.Arguments` can be used interchangeably with `.arguments`.",
        "name": "arguments",
        "alias": "Arguments",
        "access": "public",
        "longname": "arguments",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30112,
                30345
            ],
            "filename": "assertions.js",
            "lineno": 998,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001782",
                "name": "checkArguments",
                "type": "FunctionDeclaration",
                "paramnames": []
            },
            "vars": {
                "obj": "checkArguments~obj",
                "type": "checkArguments~type"
            }
        },
        "undocumented": true,
        "name": "checkArguments",
        "longname": "checkArguments",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30146,
                30172
            ],
            "filename": "assertions.js",
            "lineno": 999,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001786",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "checkArguments~obj",
        "kind": "member",
        "memberof": "checkArguments",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30178,
                30196
            ],
            "filename": "assertions.js",
            "lineno": 1000,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001792",
                "name": "type",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "checkArguments~type",
        "kind": "member",
        "memberof": "checkArguments",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target is strictly (`===`) equal to the given `val`.\n *\n *     expect(1).to.equal(1);\n *     expect('foo').to.equal('foo');\n *\n * Add `.deep` earlier in the chain to use deep equality instead. See the\n * `deep-eql` project page for info on the deep equality algorithm:\n * https://github.com/chaijs/deep-eql.\n *\n *     // Target object deeply (but not strictly) equals `{a: 1}`\n *     expect({a: 1}).to.deep.equal({a: 1});\n *     expect({a: 1}).to.not.equal({a: 1});\n *\n *     // Target array deeply (but not strictly) equals `[1, 2]`\n *     expect([1, 2]).to.deep.equal([1, 2]);\n *     expect([1, 2]).to.not.equal([1, 2]);\n *\n * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n * best to assert that the target is equal to its expected value, rather than\n * not equal to one of countless unexpected values.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.equal(2); // Not recommended\n *\n * `.equal` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(1).to.equal(2, 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.equal(2);\n *\n * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n *\n * @name equal\n * @alias equals\n * @alias eq\n * @param {unknown} val\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 1011,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is strictly (`===`) equal to the given `val`.\n\n    expect(1).to.equal(1);\n    expect('foo').to.equal('foo');\n\nAdd `.deep` earlier in the chain to use deep equality instead. See the\n`deep-eql` project page for info on the deep equality algorithm:\nhttps://github.com/chaijs/deep-eql.\n\n    // Target object deeply (but not strictly) equals `{a: 1}`\n    expect({a: 1}).to.deep.equal({a: 1});\n    expect({a: 1}).to.not.equal({a: 1});\n\n    // Target array deeply (but not strictly) equals `[1, 2]`\n    expect([1, 2]).to.deep.equal([1, 2]);\n    expect([1, 2]).to.not.equal([1, 2]);\n\nAdd `.not` earlier in the chain to negate `.equal`. However, it's often\nbest to assert that the target is equal to its expected value, rather than\nnot equal to one of countless unexpected values.\n\n    expect(1).to.equal(1); // Recommended\n    expect(1).to.not.equal(2); // Not recommended\n\n`.equal` accepts an optional `msg` argument which is a custom error message\nto show when the assertion fails. The message can also be given as the\nsecond argument to `expect`.\n\n    expect(1).to.equal(2, 'nooo why fail??');\n    expect(1, 'nooo why fail??').to.equal(2);\n\nThe aliases `.equals` and `eq` can be used interchangeably with `.equal`.",
        "name": "equal",
        "alias": "eq",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "equal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                31898,
                32361
            ],
            "filename": "assertions.js",
            "lineno": 1052,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001825",
                "name": "assertEqual",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "val",
                    "msg"
                ]
            },
            "vars": {
                "obj": "assertEqual~obj",
                "prevLockSsfi": "assertEqual~prevLockSsfi"
            }
        },
        "undocumented": true,
        "name": "assertEqual",
        "longname": "assertEqual",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                31976,
                32002
            ],
            "filename": "assertions.js",
            "lineno": 1054,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001839",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "assertEqual~obj",
        "kind": "member",
        "memberof": "assertEqual",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                32040,
                32077
            ],
            "filename": "assertions.js",
            "lineno": 1056,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001852",
                "name": "prevLockSsfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "prevLockSsfi",
        "longname": "assertEqual~prevLockSsfi",
        "kind": "member",
        "memberof": "assertEqual",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target is deeply equal to the given `obj`. See the\n * `deep-eql` project page for info on the deep equality algorithm:\n * https://github.com/chaijs/deep-eql.\n *\n *     // Target object is deeply (but not strictly) equal to {a: 1}\n *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n *\n *     // Target array is deeply (but not strictly) equal to [1, 2]\n *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n *\n * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n * to assert that the target is deeply equal to its expected value, rather\n * than not deeply equal to one of countless unexpected values.\n *\n *     expect({a: 1}).to.eql({a: 1}); // Recommended\n *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n *\n * `.eql` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n *\n * The alias `.eqls` can be used interchangeably with `.eql`.\n *\n * The `.deep.equal` assertion is almost identical to `.eql` but with one\n * difference: `.deep.equal` causes deep equality comparisons to also be used\n * for any other assertions that follow in the chain.\n *\n * @name eql\n * @alias eqls\n * @param {unknown} obj\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 1076,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is deeply equal to the given `obj`. See the\n`deep-eql` project page for info on the deep equality algorithm:\nhttps://github.com/chaijs/deep-eql.\n\n    // Target object is deeply (but not strictly) equal to {a: 1}\n    expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n\n    // Target array is deeply (but not strictly) equal to [1, 2]\n    expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n\nAdd `.not` earlier in the chain to negate `.eql`. However, it's often best\nto assert that the target is deeply equal to its expected value, rather\nthan not deeply equal to one of countless unexpected values.\n\n    expect({a: 1}).to.eql({a: 1}); // Recommended\n    expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n\n`.eql` accepts an optional `msg` argument which is a custom error message\nto show when the assertion fails. The message can also be given as the\nsecond argument to `expect`.\n\n    expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n    expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n\nThe alias `.eqls` can be used interchangeably with `.eql`.\n\nThe `.deep.equal` assertion is almost identical to `.eql` but with one\ndifference: `.deep.equal` causes deep equality comparisons to also be used\nfor any other assertions that follow in the chain.",
        "name": "eql",
        "alias": "eqls",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "eql",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                33954,
                34244
            ],
            "filename": "assertions.js",
            "lineno": 1113,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001913",
                "name": "assertEql",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "msg"
                ]
            },
            "vars": {
                "eql": "assertEql~eql"
            }
        },
        "undocumented": true,
        "name": "assertEql",
        "longname": "assertEql",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                34030,
                34053
            ],
            "filename": "assertions.js",
            "lineno": 1115,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001927",
                "name": "eql",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "eql",
        "longname": "assertEql~eql",
        "kind": "member",
        "memberof": "assertEql",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n * However, it's often best to assert that the target is equal to its expected\n * value.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.be.above(1); // Not recommended\n *\n * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n * or `size` is greater than the given number `n`.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.above`.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(1).to.not.be.above(2); // Not recommended\n *\n * `.above` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(1).to.be.above(2, 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.be.above(2);\n *\n * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n * `.above`.\n *\n * @name above\n * @alias gt\n * @alias greaterThan\n * @param {number} n\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 1129,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is a number or a date greater than the given number or date `n` respectively.\nHowever, it's often best to assert that the target is equal to its expected\nvalue.\n\n    expect(2).to.equal(2); // Recommended\n    expect(2).to.be.above(1); // Not recommended\n\nAdd `.lengthOf` earlier in the chain to assert that the target's `length`\nor `size` is greater than the given number `n`.\n\n    expect('foo').to.have.lengthOf(3); // Recommended\n    expect('foo').to.have.lengthOf.above(2); // Not recommended\n\n    expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n    expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n\nAdd `.not` earlier in the chain to negate `.above`.\n\n    expect(2).to.equal(2); // Recommended\n    expect(1).to.not.be.above(2); // Not recommended\n\n`.above` accepts an optional `msg` argument which is a custom error message\nto show when the assertion fails. The message can also be given as the\nsecond argument to `expect`.\n\n    expect(1).to.be.above(2, 'nooo why fail??');\n    expect(1, 'nooo why fail??').to.be.above(2);\n\nThe aliases `.gt` and `.greaterThan` can be used interchangeably with\n`.above`.",
        "name": "above",
        "alias": "greaterThan",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "n"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "above",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35686,
                37433
            ],
            "filename": "assertions.js",
            "lineno": 1168,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001966",
                "name": "assertAbove",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "n",
                    "msg"
                ]
            },
            "vars": {
                "obj": "assertAbove~obj",
                "doLength": "assertAbove~doLength",
                "flagMsg": "assertAbove~flagMsg",
                "msgPrefix": "assertAbove~msgPrefix",
                "ssfi": "assertAbove~ssfi",
                "objType": "assertAbove~objType",
                "nType": "assertAbove~nType",
                "printObj": "assertAbove~printObj",
                "descriptor": "assertAbove~descriptor",
                "itemsCount": "assertAbove~itemsCount"
            }
        },
        "undocumented": true,
        "name": "assertAbove",
        "longname": "assertAbove",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35762,
                35788
            ],
            "filename": "assertions.js",
            "lineno": 1170,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001980",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "assertAbove~obj",
        "kind": "member",
        "memberof": "assertAbove",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35794,
                35827
            ],
            "filename": "assertions.js",
            "lineno": 1171,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001986",
                "name": "doLength",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "doLength",
        "longname": "assertAbove~doLength",
        "kind": "member",
        "memberof": "assertAbove",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35833,
                35864
            ],
            "filename": "assertions.js",
            "lineno": 1172,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001992",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "assertAbove~flagMsg",
        "kind": "member",
        "memberof": "assertAbove",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35870,
                35911
            ],
            "filename": "assertions.js",
            "lineno": 1173,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100001998",
                "name": "msgPrefix",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "msgPrefix",
        "longname": "assertAbove~msgPrefix",
        "kind": "member",
        "memberof": "assertAbove",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35917,
                35942
            ],
            "filename": "assertions.js",
            "lineno": 1174,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002006",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "assertAbove~ssfi",
        "kind": "member",
        "memberof": "assertAbove",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35948,
                35983
            ],
            "filename": "assertions.js",
            "lineno": 1175,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002012",
                "name": "objType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "objType",
        "longname": "assertAbove~objType",
        "kind": "member",
        "memberof": "assertAbove",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35989,
                36020
            ],
            "filename": "assertions.js",
            "lineno": 1176,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002022",
                "name": "nType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nType",
        "longname": "assertAbove~nType",
        "kind": "member",
        "memberof": "assertAbove",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                36614,
                36669
            ],
            "filename": "assertions.js",
            "lineno": 1195,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002118",
                "name": "printObj",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "printObj",
        "longname": "assertAbove~printObj",
        "kind": "member",
        "memberof": "assertAbove",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                36840,
                36861
            ],
            "filename": "assertions.js",
            "lineno": 1204,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002146",
                "name": "descriptor",
                "type": "Literal",
                "value": "length"
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertAbove~descriptor",
        "kind": "member",
        "memberof": "assertAbove",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                36869,
                36879
            ],
            "filename": "assertions.js",
            "lineno": 1205,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002149",
                "name": "itemsCount"
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "assertAbove~itemsCount",
        "kind": "member",
        "memberof": "assertAbove",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                36937,
                36956
            ],
            "filename": "assertions.js",
            "lineno": 1207,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002161",
                "name": "descriptor",
                "type": "Literal",
                "funcscope": "assertAbove",
                "value": "size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertAbove~descriptor",
        "kind": "member",
        "memberof": "assertAbove",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                36964,
                36985
            ],
            "filename": "assertions.js",
            "lineno": 1208,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002165",
                "name": "itemsCount",
                "type": "MemberExpression",
                "funcscope": "assertAbove",
                "value": "obj.size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "assertAbove~itemsCount",
        "kind": "member",
        "memberof": "assertAbove",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                37006,
                37029
            ],
            "filename": "assertions.js",
            "lineno": 1210,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002172",
                "name": "itemsCount",
                "type": "MemberExpression",
                "funcscope": "assertAbove",
                "value": "obj.length",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "assertAbove~itemsCount",
        "kind": "member",
        "memberof": "assertAbove",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that the target is a number or a date greater than or equal to the given\n * number or date `n` respectively. However, it's often best to assert that the target is equal to\n * its expected value.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.be.at.least(1); // Not recommended\n *     expect(2).to.be.at.least(2); // Not recommended\n *\n * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n * or `size` is greater than or equal to the given number `n`.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.least`.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.at.least(2); // Not recommended\n *\n * `.least` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(1).to.be.at.least(2, 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.be.at.least(2);\n *\n * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n * `.least`.\n *\n * @name least\n * @alias gte\n * @alias greaterThanOrEqual\n * @param {unknown} n\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 1235,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is a number or a date greater than or equal to the given\nnumber or date `n` respectively. However, it's often best to assert that the target is equal to\nits expected value.\n\n    expect(2).to.equal(2); // Recommended\n    expect(2).to.be.at.least(1); // Not recommended\n    expect(2).to.be.at.least(2); // Not recommended\n\nAdd `.lengthOf` earlier in the chain to assert that the target's `length`\nor `size` is greater than or equal to the given number `n`.\n\n    expect('foo').to.have.lengthOf(3); // Recommended\n    expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n\n    expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n    expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n\nAdd `.not` earlier in the chain to negate `.least`.\n\n    expect(1).to.equal(1); // Recommended\n    expect(1).to.not.be.at.least(2); // Not recommended\n\n`.least` accepts an optional `msg` argument which is a custom error message\nto show when the assertion fails. The message can also be given as the\nsecond argument to `expect`.\n\n    expect(1).to.be.at.least(2, 'nooo why fail??');\n    expect(1, 'nooo why fail??').to.be.at.least(2);\n\nThe aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n`.least`.",
        "name": "least",
        "alias": "greaterThanOrEqual",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "n"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "least",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39042,
                40803
            ],
            "filename": "assertions.js",
            "lineno": 1275,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002230",
                "name": "assertLeast",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "n",
                    "msg"
                ]
            },
            "vars": {
                "obj": "assertLeast~obj",
                "doLength": "assertLeast~doLength",
                "flagMsg": "assertLeast~flagMsg",
                "msgPrefix": "assertLeast~msgPrefix",
                "ssfi": "assertLeast~ssfi",
                "objType": "assertLeast~objType",
                "nType": "assertLeast~nType",
                "errorMessage": "assertLeast~errorMessage",
                "shouldThrow": "assertLeast~shouldThrow",
                "printObj": "assertLeast~printObj",
                "descriptor": "assertLeast~descriptor",
                "itemsCount": "assertLeast~itemsCount"
            }
        },
        "undocumented": true,
        "name": "assertLeast",
        "longname": "assertLeast",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39118,
                39144
            ],
            "filename": "assertions.js",
            "lineno": 1277,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002244",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "assertLeast~obj",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39150,
                39183
            ],
            "filename": "assertions.js",
            "lineno": 1278,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002250",
                "name": "doLength",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "doLength",
        "longname": "assertLeast~doLength",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39189,
                39220
            ],
            "filename": "assertions.js",
            "lineno": 1279,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002256",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "assertLeast~flagMsg",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39226,
                39267
            ],
            "filename": "assertions.js",
            "lineno": 1280,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002262",
                "name": "msgPrefix",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "msgPrefix",
        "longname": "assertLeast~msgPrefix",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39273,
                39298
            ],
            "filename": "assertions.js",
            "lineno": 1281,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002270",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "assertLeast~ssfi",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39304,
                39339
            ],
            "filename": "assertions.js",
            "lineno": 1282,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002276",
                "name": "objType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "objType",
        "longname": "assertLeast~objType",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39345,
                39376
            ],
            "filename": "assertions.js",
            "lineno": 1283,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002286",
                "name": "nType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nType",
        "longname": "assertLeast~nType",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39382,
                39394
            ],
            "filename": "assertions.js",
            "lineno": 1284,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002296",
                "name": "errorMessage"
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "assertLeast~errorMessage",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39400,
                39418
            ],
            "filename": "assertions.js",
            "lineno": 1285,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002298",
                "name": "shouldThrow",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "shouldThrow",
        "longname": "assertLeast~shouldThrow",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39623,
                39688
            ],
            "filename": "assertions.js",
            "lineno": 1292,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002340",
                "name": "errorMessage",
                "type": "BinaryExpression",
                "funcscope": "assertLeast",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "assertLeast~errorMessage",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39760,
                39827
            ],
            "filename": "assertions.js",
            "lineno": 1294,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002362",
                "name": "errorMessage",
                "type": "BinaryExpression",
                "funcscope": "assertLeast",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "assertLeast~errorMessage",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39906,
                39961
            ],
            "filename": "assertions.js",
            "lineno": 1296,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002383",
                "name": "printObj",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "printObj",
        "longname": "assertLeast~printObj",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39967,
                40052
            ],
            "filename": "assertions.js",
            "lineno": 1297,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002396",
                "name": "errorMessage",
                "type": "BinaryExpression",
                "funcscope": "assertLeast",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "assertLeast~errorMessage",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                40069,
                40088
            ],
            "filename": "assertions.js",
            "lineno": 1300,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002407",
                "name": "shouldThrow",
                "type": "Literal",
                "funcscope": "assertLeast",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "shouldThrow",
        "longname": "assertLeast~shouldThrow",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                40208,
                40229
            ],
            "filename": "assertions.js",
            "lineno": 1308,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002423",
                "name": "descriptor",
                "type": "Literal",
                "value": "length"
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertLeast~descriptor",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                40237,
                40247
            ],
            "filename": "assertions.js",
            "lineno": 1309,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002426",
                "name": "itemsCount"
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "assertLeast~itemsCount",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                40305,
                40324
            ],
            "filename": "assertions.js",
            "lineno": 1311,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002438",
                "name": "descriptor",
                "type": "Literal",
                "funcscope": "assertLeast",
                "value": "size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertLeast~descriptor",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                40332,
                40353
            ],
            "filename": "assertions.js",
            "lineno": 1312,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002442",
                "name": "itemsCount",
                "type": "MemberExpression",
                "funcscope": "assertLeast",
                "value": "obj.size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "assertLeast~itemsCount",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                40374,
                40397
            ],
            "filename": "assertions.js",
            "lineno": 1314,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002449",
                "name": "itemsCount",
                "type": "MemberExpression",
                "funcscope": "assertLeast",
                "value": "obj.length",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "assertLeast~itemsCount",
        "kind": "member",
        "memberof": "assertLeast",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n * However, it's often best to assert that the target is equal to its expected\n * value.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.be.below(2); // Not recommended\n *\n * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n * or `size` is less than the given number `n`.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n *\n *     expect([1, 2, 3]).to.have.length(3); // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.below`.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.not.be.below(1); // Not recommended\n *\n * `.below` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(2).to.be.below(1, 'nooo why fail??');\n *     expect(2, 'nooo why fail??').to.be.below(1);\n *\n * The aliases `.lt` and `.lessThan` can be used interchangeably with\n * `.below`.\n *\n * @name below\n * @alias lt\n * @alias lessThan\n * @param {unknown} n\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 1339,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is a number or a date less than the given number or date `n` respectively.\nHowever, it's often best to assert that the target is equal to its expected\nvalue.\n\n    expect(1).to.equal(1); // Recommended\n    expect(1).to.be.below(2); // Not recommended\n\nAdd `.lengthOf` earlier in the chain to assert that the target's `length`\nor `size` is less than the given number `n`.\n\n    expect('foo').to.have.lengthOf(3); // Recommended\n    expect('foo').to.have.lengthOf.below(4); // Not recommended\n\n    expect([1, 2, 3]).to.have.length(3); // Recommended\n    expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n\nAdd `.not` earlier in the chain to negate `.below`.\n\n    expect(2).to.equal(2); // Recommended\n    expect(2).to.not.be.below(1); // Not recommended\n\n`.below` accepts an optional `msg` argument which is a custom error message\nto show when the assertion fails. The message can also be given as the\nsecond argument to `expect`.\n\n    expect(2).to.be.below(1, 'nooo why fail??');\n    expect(2, 'nooo why fail??').to.be.below(1);\n\nThe aliases `.lt` and `.lessThan` can be used interchangeably with\n`.below`.",
        "name": "below",
        "alias": "lessThan",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "n"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "below",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42293,
                44053
            ],
            "filename": "assertions.js",
            "lineno": 1378,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002507",
                "name": "assertBelow",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "n",
                    "msg"
                ]
            },
            "vars": {
                "obj": "assertBelow~obj",
                "doLength": "assertBelow~doLength",
                "flagMsg": "assertBelow~flagMsg",
                "msgPrefix": "assertBelow~msgPrefix",
                "ssfi": "assertBelow~ssfi",
                "objType": "assertBelow~objType",
                "nType": "assertBelow~nType",
                "errorMessage": "assertBelow~errorMessage",
                "shouldThrow": "assertBelow~shouldThrow",
                "printObj": "assertBelow~printObj",
                "descriptor": "assertBelow~descriptor",
                "itemsCount": "assertBelow~itemsCount"
            }
        },
        "undocumented": true,
        "name": "assertBelow",
        "longname": "assertBelow",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42369,
                42395
            ],
            "filename": "assertions.js",
            "lineno": 1380,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002521",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "assertBelow~obj",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42401,
                42434
            ],
            "filename": "assertions.js",
            "lineno": 1381,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002527",
                "name": "doLength",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "doLength",
        "longname": "assertBelow~doLength",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42440,
                42471
            ],
            "filename": "assertions.js",
            "lineno": 1382,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002533",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "assertBelow~flagMsg",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42477,
                42518
            ],
            "filename": "assertions.js",
            "lineno": 1383,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002539",
                "name": "msgPrefix",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "msgPrefix",
        "longname": "assertBelow~msgPrefix",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42524,
                42549
            ],
            "filename": "assertions.js",
            "lineno": 1384,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002547",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "assertBelow~ssfi",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42555,
                42590
            ],
            "filename": "assertions.js",
            "lineno": 1385,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002553",
                "name": "objType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "objType",
        "longname": "assertBelow~objType",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42596,
                42627
            ],
            "filename": "assertions.js",
            "lineno": 1386,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002563",
                "name": "nType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nType",
        "longname": "assertBelow~nType",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42633,
                42645
            ],
            "filename": "assertions.js",
            "lineno": 1387,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002573",
                "name": "errorMessage"
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "assertBelow~errorMessage",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42651,
                42669
            ],
            "filename": "assertions.js",
            "lineno": 1388,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002575",
                "name": "shouldThrow",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "shouldThrow",
        "longname": "assertBelow~shouldThrow",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42874,
                42939
            ],
            "filename": "assertions.js",
            "lineno": 1395,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002617",
                "name": "errorMessage",
                "type": "BinaryExpression",
                "funcscope": "assertBelow",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "assertBelow~errorMessage",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43011,
                43078
            ],
            "filename": "assertions.js",
            "lineno": 1397,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002639",
                "name": "errorMessage",
                "type": "BinaryExpression",
                "funcscope": "assertBelow",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "assertBelow~errorMessage",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43157,
                43212
            ],
            "filename": "assertions.js",
            "lineno": 1399,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002660",
                "name": "printObj",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "printObj",
        "longname": "assertBelow~printObj",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43218,
                43303
            ],
            "filename": "assertions.js",
            "lineno": 1400,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002673",
                "name": "errorMessage",
                "type": "BinaryExpression",
                "funcscope": "assertBelow",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "assertBelow~errorMessage",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43320,
                43339
            ],
            "filename": "assertions.js",
            "lineno": 1403,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002684",
                "name": "shouldThrow",
                "type": "Literal",
                "funcscope": "assertBelow",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "shouldThrow",
        "longname": "assertBelow~shouldThrow",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43459,
                43480
            ],
            "filename": "assertions.js",
            "lineno": 1411,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002700",
                "name": "descriptor",
                "type": "Literal",
                "value": "length"
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertBelow~descriptor",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43488,
                43498
            ],
            "filename": "assertions.js",
            "lineno": 1412,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002703",
                "name": "itemsCount"
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "assertBelow~itemsCount",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43556,
                43575
            ],
            "filename": "assertions.js",
            "lineno": 1414,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002715",
                "name": "descriptor",
                "type": "Literal",
                "funcscope": "assertBelow",
                "value": "size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertBelow~descriptor",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43583,
                43604
            ],
            "filename": "assertions.js",
            "lineno": 1415,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002719",
                "name": "itemsCount",
                "type": "MemberExpression",
                "funcscope": "assertBelow",
                "value": "obj.size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "assertBelow~itemsCount",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43625,
                43648
            ],
            "filename": "assertions.js",
            "lineno": 1417,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002726",
                "name": "itemsCount",
                "type": "MemberExpression",
                "funcscope": "assertBelow",
                "value": "obj.length",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "assertBelow~itemsCount",
        "kind": "member",
        "memberof": "assertBelow",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that the target is a number or a date less than or equal to the given number\n * or date `n` respectively. However, it's often best to assert that the target is equal to its\n * expected value.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.be.at.most(2); // Not recommended\n *     expect(1).to.be.at.most(1); // Not recommended\n *\n * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n * or `size` is less than or equal to the given number `n`.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.most`.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.not.be.at.most(1); // Not recommended\n *\n * `.most` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(2).to.be.at.most(1, 'nooo why fail??');\n *     expect(2, 'nooo why fail??').to.be.at.most(1);\n *\n * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n * `.most`.\n *\n * @name most\n * @alias lte\n * @alias lessThanOrEqual\n * @param {unknown} n\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 1442,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is a number or a date less than or equal to the given number\nor date `n` respectively. However, it's often best to assert that the target is equal to its\nexpected value.\n\n    expect(1).to.equal(1); // Recommended\n    expect(1).to.be.at.most(2); // Not recommended\n    expect(1).to.be.at.most(1); // Not recommended\n\nAdd `.lengthOf` earlier in the chain to assert that the target's `length`\nor `size` is less than or equal to the given number `n`.\n\n    expect('foo').to.have.lengthOf(3); // Recommended\n    expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n\n    expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n    expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n\nAdd `.not` earlier in the chain to negate `.most`.\n\n    expect(2).to.equal(2); // Recommended\n    expect(2).to.not.be.at.most(1); // Not recommended\n\n`.most` accepts an optional `msg` argument which is a custom error message\nto show when the assertion fails. The message can also be given as the\nsecond argument to `expect`.\n\n    expect(2).to.be.at.most(1, 'nooo why fail??');\n    expect(2, 'nooo why fail??').to.be.at.most(1);\n\nThe aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n`.most`.",
        "name": "most",
        "alias": "lessThanOrEqual",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "n"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "most",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45636,
                47392
            ],
            "filename": "assertions.js",
            "lineno": 1482,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002784",
                "name": "assertMost",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "n",
                    "msg"
                ]
            },
            "vars": {
                "obj": "assertMost~obj",
                "doLength": "assertMost~doLength",
                "flagMsg": "assertMost~flagMsg",
                "msgPrefix": "assertMost~msgPrefix",
                "ssfi": "assertMost~ssfi",
                "objType": "assertMost~objType",
                "nType": "assertMost~nType",
                "errorMessage": "assertMost~errorMessage",
                "shouldThrow": "assertMost~shouldThrow",
                "printObj": "assertMost~printObj",
                "descriptor": "assertMost~descriptor",
                "itemsCount": "assertMost~itemsCount"
            }
        },
        "undocumented": true,
        "name": "assertMost",
        "longname": "assertMost",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45711,
                45737
            ],
            "filename": "assertions.js",
            "lineno": 1484,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002798",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "assertMost~obj",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45743,
                45776
            ],
            "filename": "assertions.js",
            "lineno": 1485,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002804",
                "name": "doLength",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "doLength",
        "longname": "assertMost~doLength",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45782,
                45813
            ],
            "filename": "assertions.js",
            "lineno": 1486,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002810",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "assertMost~flagMsg",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45819,
                45860
            ],
            "filename": "assertions.js",
            "lineno": 1487,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002816",
                "name": "msgPrefix",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "msgPrefix",
        "longname": "assertMost~msgPrefix",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45866,
                45891
            ],
            "filename": "assertions.js",
            "lineno": 1488,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002824",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "assertMost~ssfi",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45897,
                45932
            ],
            "filename": "assertions.js",
            "lineno": 1489,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002830",
                "name": "objType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "objType",
        "longname": "assertMost~objType",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45938,
                45969
            ],
            "filename": "assertions.js",
            "lineno": 1490,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002840",
                "name": "nType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nType",
        "longname": "assertMost~nType",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45975,
                45987
            ],
            "filename": "assertions.js",
            "lineno": 1491,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002850",
                "name": "errorMessage"
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "assertMost~errorMessage",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45993,
                46011
            ],
            "filename": "assertions.js",
            "lineno": 1492,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002852",
                "name": "shouldThrow",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "shouldThrow",
        "longname": "assertMost~shouldThrow",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                46216,
                46280
            ],
            "filename": "assertions.js",
            "lineno": 1499,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002894",
                "name": "errorMessage",
                "type": "BinaryExpression",
                "funcscope": "assertMost",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "assertMost~errorMessage",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                46352,
                46418
            ],
            "filename": "assertions.js",
            "lineno": 1501,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002916",
                "name": "errorMessage",
                "type": "BinaryExpression",
                "funcscope": "assertMost",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "assertMost~errorMessage",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                46497,
                46552
            ],
            "filename": "assertions.js",
            "lineno": 1503,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002937",
                "name": "printObj",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "printObj",
        "longname": "assertMost~printObj",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                46558,
                46643
            ],
            "filename": "assertions.js",
            "lineno": 1504,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002950",
                "name": "errorMessage",
                "type": "BinaryExpression",
                "funcscope": "assertMost",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "assertMost~errorMessage",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                46660,
                46679
            ],
            "filename": "assertions.js",
            "lineno": 1507,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002961",
                "name": "shouldThrow",
                "type": "Literal",
                "funcscope": "assertMost",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "shouldThrow",
        "longname": "assertMost~shouldThrow",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                46799,
                46820
            ],
            "filename": "assertions.js",
            "lineno": 1515,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002977",
                "name": "descriptor",
                "type": "Literal",
                "value": "length"
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertMost~descriptor",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                46828,
                46838
            ],
            "filename": "assertions.js",
            "lineno": 1516,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002980",
                "name": "itemsCount"
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "assertMost~itemsCount",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                46896,
                46915
            ],
            "filename": "assertions.js",
            "lineno": 1518,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002992",
                "name": "descriptor",
                "type": "Literal",
                "funcscope": "assertMost",
                "value": "size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertMost~descriptor",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                46923,
                46944
            ],
            "filename": "assertions.js",
            "lineno": 1519,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100002996",
                "name": "itemsCount",
                "type": "MemberExpression",
                "funcscope": "assertMost",
                "value": "obj.size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "assertMost~itemsCount",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                46965,
                46988
            ],
            "filename": "assertions.js",
            "lineno": 1521,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003003",
                "name": "itemsCount",
                "type": "MemberExpression",
                "funcscope": "assertMost",
                "value": "obj.length",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "assertMost~itemsCount",
        "kind": "member",
        "memberof": "assertMost",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that the target is a number or a date greater than or equal to the given\n * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n * However, it's often best to assert that the target is equal to its expected\n * value.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.be.within(1, 3); // Not recommended\n *     expect(2).to.be.within(2, 3); // Not recommended\n *     expect(2).to.be.within(1, 2); // Not recommended\n *\n * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n * or `size` is greater than or equal to the given number `start`, and less\n * than or equal to the given number `finish`.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.within`.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.within(2, 4); // Not recommended\n *\n * `.within` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n *\n * @name within\n * @param {unknown} start lower bound inclusive\n * @param {unknown} finish upper bound inclusive\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 1546,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is a number or a date greater than or equal to the given\nnumber or date `start`, and less than or equal to the given number or date `finish` respectively.\nHowever, it's often best to assert that the target is equal to its expected\nvalue.\n\n    expect(2).to.equal(2); // Recommended\n    expect(2).to.be.within(1, 3); // Not recommended\n    expect(2).to.be.within(2, 3); // Not recommended\n    expect(2).to.be.within(1, 2); // Not recommended\n\nAdd `.lengthOf` earlier in the chain to assert that the target's `length`\nor `size` is greater than or equal to the given number `start`, and less\nthan or equal to the given number `finish`.\n\n    expect('foo').to.have.lengthOf(3); // Recommended\n    expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n\n    expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n    expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n\nAdd `.not` earlier in the chain to negate `.within`.\n\n    expect(1).to.equal(1); // Recommended\n    expect(1).to.not.be.within(2, 4); // Not recommended\n\n`.within` accepts an optional `msg` argument which is a custom error\nmessage to show when the assertion fails. The message can also be given as\nthe second argument to `expect`.\n\n    expect(4).to.be.within(1, 3, 'nooo why fail??');\n    expect(4, 'nooo why fail??').to.be.within(1, 3);",
        "name": "within",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "lower bound inclusive",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "upper bound inclusive",
                "name": "finish"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "within",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49238,
                49264
            ],
            "filename": "assertions.js",
            "lineno": 1587,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003081",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "<anonymous>~obj",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49270,
                49303
            ],
            "filename": "assertions.js",
            "lineno": 1588,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003087",
                "name": "doLength",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "doLength",
        "longname": "<anonymous>~doLength",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49309,
                49340
            ],
            "filename": "assertions.js",
            "lineno": 1589,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003093",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "<anonymous>~flagMsg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49346,
                49387
            ],
            "filename": "assertions.js",
            "lineno": 1590,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003099",
                "name": "msgPrefix",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "msgPrefix",
        "longname": "<anonymous>~msgPrefix",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49393,
                49418
            ],
            "filename": "assertions.js",
            "lineno": 1591,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003107",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "<anonymous>~ssfi",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49424,
                49459
            ],
            "filename": "assertions.js",
            "lineno": 1592,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003113",
                "name": "objType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "objType",
        "longname": "<anonymous>~objType",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49465,
                49504
            ],
            "filename": "assertions.js",
            "lineno": 1593,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003123",
                "name": "startType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "startType",
        "longname": "<anonymous>~startType",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49510,
                49551
            ],
            "filename": "assertions.js",
            "lineno": 1594,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003133",
                "name": "finishType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "finishType",
        "longname": "<anonymous>~finishType",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49557,
                49569
            ],
            "filename": "assertions.js",
            "lineno": 1595,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003143",
                "name": "errorMessage"
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "<anonymous>~errorMessage",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49575,
                49593
            ],
            "filename": "assertions.js",
            "lineno": 1596,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003145",
                "name": "shouldThrow",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "shouldThrow",
        "longname": "<anonymous>~shouldThrow",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49599,
                49740
            ],
            "filename": "assertions.js",
            "lineno": 1597,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003148",
                "name": "range",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "range",
        "longname": "<anonymous>~range",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49992,
                50058
            ],
            "filename": "assertions.js",
            "lineno": 1610,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003217",
                "name": "errorMessage",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "<anonymous>~errorMessage",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50172,
                50240
            ],
            "filename": "assertions.js",
            "lineno": 1615,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003246",
                "name": "errorMessage",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "<anonymous>~errorMessage",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50319,
                50374
            ],
            "filename": "assertions.js",
            "lineno": 1617,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003267",
                "name": "printObj",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "printObj",
        "longname": "<anonymous>~printObj",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50380,
                50465
            ],
            "filename": "assertions.js",
            "lineno": 1618,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003280",
                "name": "errorMessage",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "<anonymous>~errorMessage",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50482,
                50501
            ],
            "filename": "assertions.js",
            "lineno": 1621,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003291",
                "name": "shouldThrow",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "shouldThrow",
        "longname": "<anonymous>~shouldThrow",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50621,
                50642
            ],
            "filename": "assertions.js",
            "lineno": 1629,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003307",
                "name": "descriptor",
                "type": "Literal",
                "value": "length"
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "<anonymous>~descriptor",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50650,
                50660
            ],
            "filename": "assertions.js",
            "lineno": 1630,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003310",
                "name": "itemsCount"
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "<anonymous>~itemsCount",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50718,
                50737
            ],
            "filename": "assertions.js",
            "lineno": 1632,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003322",
                "name": "descriptor",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": "size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "<anonymous>~descriptor",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50745,
                50766
            ],
            "filename": "assertions.js",
            "lineno": 1633,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003326",
                "name": "itemsCount",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "obj.size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "<anonymous>~itemsCount",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50787,
                50810
            ],
            "filename": "assertions.js",
            "lineno": 1635,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003333",
                "name": "itemsCount",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "obj.length",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "<anonymous>~itemsCount",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that the target is an instance of the given `constructor`.\n *\n *     function Cat () { }\n *\n *     expect(new Cat()).to.be.an.instanceof(Cat);\n *     expect([1, 2]).to.be.an.instanceof(Array);\n *\n * Add `.not` earlier in the chain to negate `.instanceof`.\n *\n *     expect({a: 1}).to.not.be.an.instanceof(Array);\n *\n * `.instanceof` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n *\n * Due to limitations in ES5, `.instanceof` may not always work as expected\n * when using a transpiler such as Babel or TypeScript. In particular, it may\n * produce unexpected results when subclassing built-in object such as\n * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n *\n * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n *\n * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n *\n * @name instanceof\n * @param {unknown} constructor\n * @param {string} msg _optional_\n * @alias instanceOf\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 1651,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is an instance of the given `constructor`.\n\n    function Cat () { }\n\n    expect(new Cat()).to.be.an.instanceof(Cat);\n    expect([1, 2]).to.be.an.instanceof(Array);\n\nAdd `.not` earlier in the chain to negate `.instanceof`.\n\n    expect({a: 1}).to.not.be.an.instanceof(Array);\n\n`.instanceof` accepts an optional `msg` argument which is a custom error\nmessage to show when the assertion fails. The message can also be given as\nthe second argument to `expect`.\n\n    expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n    expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n\nDue to limitations in ES5, `.instanceof` may not always work as expected\nwhen using a transpiler such as Babel or TypeScript. In particular, it may\nproduce unexpected results when subclassing built-in object such as\n`Array`, `Error`, and `Map`. See your transpiler's docs for details:\n\n- ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n- ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n\nThe alias `.instanceOf` can be used interchangeably with `.instanceof`.",
        "name": "instanceof",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "constructor"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "alias": "instanceOf",
        "access": "public",
        "longname": "instanceof",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52588,
                53430
            ],
            "filename": "assertions.js",
            "lineno": 1686,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003383",
                "name": "assertInstanceOf",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "constructor",
                    "msg"
                ]
            },
            "vars": {
                "target": "assertInstanceOf~target",
                "ssfi": "assertInstanceOf~ssfi",
                "flagMsg": "assertInstanceOf~flagMsg",
                "isInstanceOf": "assertInstanceOf~isInstanceOf",
                "name": "assertInstanceOf~name"
            }
        },
        "undocumented": true,
        "name": "assertInstanceOf",
        "longname": "assertInstanceOf",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52680,
                52709
            ],
            "filename": "assertions.js",
            "lineno": 1689,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003397",
                "name": "target",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "target",
        "longname": "assertInstanceOf~target",
        "kind": "member",
        "memberof": "assertInstanceOf",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52717,
                52742
            ],
            "filename": "assertions.js",
            "lineno": 1690,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003404",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "assertInstanceOf~ssfi",
        "kind": "member",
        "memberof": "assertInstanceOf",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52750,
                52781
            ],
            "filename": "assertions.js",
            "lineno": 1691,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003411",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "assertInstanceOf~flagMsg",
        "kind": "member",
        "memberof": "assertInstanceOf",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52800,
                52844
            ],
            "filename": "assertions.js",
            "lineno": 1694,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003420",
                "name": "isInstanceOf",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isInstanceOf",
        "longname": "assertInstanceOf~isInstanceOf",
        "kind": "member",
        "memberof": "assertInstanceOf",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52906,
                52945
            ],
            "filename": "assertions.js",
            "lineno": 1697,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003432",
                "name": "flagMsg",
                "type": "ConditionalExpression",
                "funcscope": "assertInstanceOf",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "assertInstanceOf~flagMsg",
        "kind": "member",
        "memberof": "assertInstanceOf",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                53186,
                53215
            ],
            "filename": "assertions.js",
            "lineno": 1710,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003459",
                "name": "name",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "assertInstanceOf~name",
        "kind": "member",
        "memberof": "assertInstanceOf",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                53243,
                53274
            ],
            "filename": "assertions.js",
            "lineno": 1712,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003472",
                "name": "name",
                "type": "Literal",
                "funcscope": "assertInstanceOf",
                "value": "an unnamed constructor",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "assertInstanceOf~name",
        "kind": "member",
        "memberof": "assertInstanceOf",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that the target has a property with the given key `name`.\n *\n *     expect({a: 1}).to.have.property('a');\n *\n * When `val` is provided, `.property` also asserts that the property's value\n * is equal to the given `val`.\n *\n *     expect({a: 1}).to.have.property('a', 1);\n *\n * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n * chain to use deep equality instead. See the `deep-eql` project page for\n * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n *\n *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n *\n * The target's enumerable and non-enumerable properties are always included\n * in the search. By default, both own and inherited properties are included.\n * Add `.own` earlier in the chain to exclude inherited properties from the\n * search.\n *\n *     Object.prototype.b = 2;\n *\n *     expect({a: 1}).to.have.own.property('a');\n *     expect({a: 1}).to.have.own.property('a', 1);\n *     expect({a: 1}).to.have.property('b');\n *     expect({a: 1}).to.not.have.own.property('b');\n *\n * `.deep` and `.own` can be combined.\n *\n *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n *\n * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n * referencing nested properties.\n *\n *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n *\n * If `.` or `[]` are part of an actual property name, they can be escaped by\n * adding two backslashes before them.\n *\n *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n *\n * `.deep` and `.nested` can be combined.\n *\n *     expect({a: {b: [{c: 3}]}})\n *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n *\n * `.own` and `.nested` cannot be combined.\n *\n * Add `.not` earlier in the chain to negate `.property`.\n *\n *     expect({a: 1}).to.not.have.property('b');\n *\n * However, it's dangerous to negate `.property` when providing `val`. The\n * problem is that it creates uncertain expectations by asserting that the\n * target either doesn't have a property with the given key `name`, or that it\n * does have a property with the given key `name` but its value isn't equal to\n * the given `val`. It's often best to identify the exact output that's\n * expected, and then write an assertion that only accepts that exact output.\n *\n * When the target isn't expected to have a property with the given key\n * `name`, it's often best to assert exactly that.\n *\n *     expect({b: 2}).to.not.have.property('a'); // Recommended\n *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n *\n * When the target is expected to have a property with the given key `name`,\n * it's often best to assert that the property has its expected value, rather\n * than asserting that it doesn't have one of many unexpected values.\n *\n *     expect({a: 3}).to.have.property('a', 3); // Recommended\n *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n *\n * `.property` changes the target of any assertions that follow in the chain\n * to be the value of the property from the original target object.\n *\n *     expect({a: 1}).to.have.property('a').that.is.a('number');\n *\n * `.property` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`. When not providing `val`, only use the\n * second form.\n *\n *     // Recommended\n *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n *\n *     // Not recommended\n *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n *\n * The above assertion isn't the same thing as not providing `val`. Instead,\n * it's asserting that the target object has a `b` property that's equal to\n * `undefined`.\n *\n * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n * interchangeably with `.own.property`.\n *\n * @name property\n * @param {string} name\n * @param {unknown} val (optional)\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 1725,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target has a property with the given key `name`.\n\n    expect({a: 1}).to.have.property('a');\n\nWhen `val` is provided, `.property` also asserts that the property's value\nis equal to the given `val`.\n\n    expect({a: 1}).to.have.property('a', 1);\n\nBy default, strict (`===`) equality is used. Add `.deep` earlier in the\nchain to use deep equality instead. See the `deep-eql` project page for\ninfo on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n\n    // Target object deeply (but not strictly) has property `x: {a: 1}`\n    expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n    expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n\nThe target's enumerable and non-enumerable properties are always included\nin the search. By default, both own and inherited properties are included.\nAdd `.own` earlier in the chain to exclude inherited properties from the\nsearch.\n\n    Object.prototype.b = 2;\n\n    expect({a: 1}).to.have.own.property('a');\n    expect({a: 1}).to.have.own.property('a', 1);\n    expect({a: 1}).to.have.property('b');\n    expect({a: 1}).to.not.have.own.property('b');\n\n`.deep` and `.own` can be combined.\n\n    expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n\nAdd `.nested` earlier in the chain to enable dot- and bracket-notation when\nreferencing nested properties.\n\n    expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n    expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n\nIf `.` or `[]` are part of an actual property name, they can be escaped by\nadding two backslashes before them.\n\n    expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n\n`.deep` and `.nested` can be combined.\n\n    expect({a: {b: [{c: 3}]}})\n      .to.have.deep.nested.property('a.b[0]', {c: 3});\n\n`.own` and `.nested` cannot be combined.\n\nAdd `.not` earlier in the chain to negate `.property`.\n\n    expect({a: 1}).to.not.have.property('b');\n\nHowever, it's dangerous to negate `.property` when providing `val`. The\nproblem is that it creates uncertain expectations by asserting that the\ntarget either doesn't have a property with the given key `name`, or that it\ndoes have a property with the given key `name` but its value isn't equal to\nthe given `val`. It's often best to identify the exact output that's\nexpected, and then write an assertion that only accepts that exact output.\n\nWhen the target isn't expected to have a property with the given key\n`name`, it's often best to assert exactly that.\n\n    expect({b: 2}).to.not.have.property('a'); // Recommended\n    expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n\nWhen the target is expected to have a property with the given key `name`,\nit's often best to assert that the property has its expected value, rather\nthan asserting that it doesn't have one of many unexpected values.\n\n    expect({a: 3}).to.have.property('a', 3); // Recommended\n    expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n\n`.property` changes the target of any assertions that follow in the chain\nto be the value of the property from the original target object.\n\n    expect({a: 1}).to.have.property('a').that.is.a('number');\n\n`.property` accepts an optional `msg` argument which is a custom error\nmessage to show when the assertion fails. The message can also be given as\nthe second argument to `expect`. When not providing `val`, only use the\nsecond form.\n\n    // Recommended\n    expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n    expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n    expect({a: 1}, 'nooo why fail??').to.have.property('b');\n\n    // Not recommended\n    expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n\nThe above assertion isn't the same thing as not providing `val`. Instead,\nit's asserting that the target object has a `b` property that's equal to\n`undefined`.\n\nThe assertions `.ownProperty` and `.haveOwnProperty` can be used\ninterchangeably with `.own.property`.",
        "name": "property",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "(optional)",
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "property",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                57907,
                60635
            ],
            "filename": "assertions.js",
            "lineno": 1832,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003501",
                "name": "assertProperty",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "name",
                    "val",
                    "msg"
                ]
            },
            "vars": {
                "isNested": "assertProperty~isNested",
                "isOwn": "assertProperty~isOwn",
                "flagMsg": "assertProperty~flagMsg",
                "obj": "assertProperty~obj",
                "ssfi": "assertProperty~ssfi",
                "nameType": "assertProperty~nameType",
                "isDeep": "assertProperty~isDeep",
                "negate": "assertProperty~negate",
                "pathInfo": "assertProperty~pathInfo",
                "value": "assertProperty~value",
                "isEql": "assertProperty~isEql",
                "": null,
                "descriptor": "assertProperty~descriptor",
                "hasProperty": "assertProperty~hasProperty"
            }
        },
        "undocumented": true,
        "name": "assertProperty",
        "longname": "assertProperty",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                57995,
                58026
            ],
            "filename": "assertions.js",
            "lineno": 1835,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003516",
                "name": "isNested",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isNested",
        "longname": "assertProperty~isNested",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58032,
                58057
            ],
            "filename": "assertions.js",
            "lineno": 1836,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003522",
                "name": "isOwn",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isOwn",
        "longname": "assertProperty~isOwn",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58063,
                58094
            ],
            "filename": "assertions.js",
            "lineno": 1837,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003528",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "assertProperty~flagMsg",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58100,
                58126
            ],
            "filename": "assertions.js",
            "lineno": 1838,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003534",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "assertProperty~obj",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58132,
                58157
            ],
            "filename": "assertions.js",
            "lineno": 1839,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003540",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "assertProperty~ssfi",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58163,
                58185
            ],
            "filename": "assertions.js",
            "lineno": 1840,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003546",
                "name": "nameType",
                "type": "UnaryExpression",
                "value": "typeofname"
            }
        },
        "undocumented": true,
        "name": "nameType",
        "longname": "assertProperty~nameType",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58190,
                58229
            ],
            "filename": "assertions.js",
            "lineno": 1842,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003551",
                "name": "flagMsg",
                "type": "ConditionalExpression",
                "funcscope": "assertProperty",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "assertProperty~flagMsg",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59093,
                59120
            ],
            "filename": "assertions.js",
            "lineno": 1884,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003628",
                "name": "isDeep",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isDeep",
        "longname": "assertProperty~isDeep",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59126,
                59155
            ],
            "filename": "assertions.js",
            "lineno": 1885,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003634",
                "name": "negate",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "negate",
        "longname": "assertProperty~negate",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59161,
                59214
            ],
            "filename": "assertions.js",
            "lineno": 1886,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003640",
                "name": "pathInfo",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "pathInfo",
        "longname": "assertProperty~pathInfo",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59220,
                59265
            ],
            "filename": "assertions.js",
            "lineno": 1887,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003651",
                "name": "value",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "assertProperty~value",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59271,
                59337
            ],
            "filename": "assertions.js",
            "lineno": 1888,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003661",
                "name": "isEql",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isEql",
        "longname": "assertProperty~isEql",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59346,
                59361
            ],
            "filename": "assertions.js",
            "lineno": 1890,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003676",
                "name": "descriptor",
                "type": "Literal",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertProperty~descriptor",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59377,
                59398
            ],
            "filename": "assertions.js",
            "lineno": 1891,
            "columnno": 14,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003682",
                "name": "descriptor",
                "type": "Literal",
                "funcscope": "assertProperty",
                "value": "deep ",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertProperty~descriptor",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59413,
                59433
            ],
            "filename": "assertions.js",
            "lineno": 1892,
            "columnno": 13,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003688",
                "name": "descriptor",
                "type": "Literal",
                "funcscope": "assertProperty",
                "value": "own ",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertProperty~descriptor",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59451,
                59474
            ],
            "filename": "assertions.js",
            "lineno": 1893,
            "columnno": 16,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003694",
                "name": "descriptor",
                "type": "Literal",
                "funcscope": "assertProperty",
                "value": "nested ",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertProperty~descriptor",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59478,
                59503
            ],
            "filename": "assertions.js",
            "lineno": 1894,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003698",
                "name": "descriptor",
                "type": "Literal",
                "funcscope": "assertProperty",
                "value": "property ",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertProperty~descriptor",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59512,
                59523
            ],
            "filename": "assertions.js",
            "lineno": 1896,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003702",
                "name": "hasProperty"
            }
        },
        "undocumented": true,
        "name": "hasProperty",
        "longname": "assertProperty~hasProperty",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59538,
                59599
            ],
            "filename": "assertions.js",
            "lineno": 1897,
            "columnno": 13,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003707",
                "name": "hasProperty",
                "type": "CallExpression",
                "funcscope": "assertProperty",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "hasProperty",
        "longname": "assertProperty~hasProperty",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59622,
                59651
            ],
            "filename": "assertions.js",
            "lineno": 1898,
            "columnno": 21,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003722",
                "name": "hasProperty",
                "type": "MemberExpression",
                "funcscope": "assertProperty",
                "value": "pathInfo.exists",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "hasProperty",
        "longname": "assertProperty~hasProperty",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59660,
                59698
            ],
            "filename": "assertions.js",
            "lineno": 1899,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003728",
                "name": "hasProperty",
                "type": "CallExpression",
                "funcscope": "assertProperty",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "hasProperty",
        "longname": "assertProperty~hasProperty",
        "kind": "member",
        "memberof": "assertProperty",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @param {unknown} _name\n * @param {unknown} _value\n * @param {string} _msg\n */",
        "meta": {
            "range": [
                60772,
                60891
            ],
            "filename": "assertions.js",
            "lineno": 1940,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003825",
                "name": "assertOwnProperty",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "_name",
                    "_value",
                    "_msg"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "_name"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "_value"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "_msg"
            }
        ],
        "name": "assertOwnProperty",
        "longname": "assertOwnProperty",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "/**\n * Asserts that the target has its own property descriptor with the given key\n * `name`. Enumerable and non-enumerable properties are included in the\n * search.\n *\n *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n *\n * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n * the property's descriptor is deeply equal to the given `descriptor`. See\n * the `deep-eql` project page for info on the deep equality algorithm:\n * https://github.com/chaijs/deep-eql.\n *\n *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 1,\n *     });\n *\n * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n *\n *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n *\n * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n * a `descriptor`. The problem is that it creates uncertain expectations by\n * asserting that the target either doesn't have a property descriptor with\n * the given key `name`, or that it does have a property descriptor with the\n * given key `name` but it’s not deeply equal to the given `descriptor`. It's\n * often best to identify the exact output that's expected, and then write an\n * assertion that only accepts that exact output.\n *\n * When the target isn't expected to have a property descriptor with the given\n * key `name`, it's often best to assert exactly that.\n *\n *     // Recommended\n *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n *\n *     // Not recommended\n *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 1,\n *     });\n *\n * When the target is expected to have a property descriptor with the given\n * key `name`, it's often best to assert that the property has its expected\n * descriptor, rather than asserting that it doesn't have one of many\n * unexpected descriptors.\n *\n *     // Recommended\n *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 3,\n *     });\n *\n *     // Not recommended\n *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 1,\n *     });\n *\n * `.ownPropertyDescriptor` changes the target of any assertions that follow\n * in the chain to be the value of the property descriptor from the original\n * target object.\n *\n *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n *       .that.has.property('enumerable', true);\n *\n * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n * custom error message to show when the assertion fails. The message can also\n * be given as the second argument to `expect`. When not providing\n * `descriptor`, only use the second form.\n *\n *     // Recommended\n *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 2,\n *     }, 'nooo why fail??');\n *\n *     // Recommended\n *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 2,\n *     });\n *\n *     // Recommended\n *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n *\n *     // Not recommended\n *     expect({a: 1})\n *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n *\n * The above assertion isn't the same thing as not providing `descriptor`.\n * Instead, it's asserting that the target object has a `b` property\n * descriptor that's deeply equal to `undefined`.\n *\n * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n * `.ownPropertyDescriptor`.\n *\n * @name ownPropertyDescriptor\n * @alias haveOwnPropertyDescriptor\n * @param {string} name\n * @param {object} descriptor _optional_\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 1948,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target has its own property descriptor with the given key\n`name`. Enumerable and non-enumerable properties are included in the\nsearch.\n\n    expect({a: 1}).to.have.ownPropertyDescriptor('a');\n\nWhen `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\nthe property's descriptor is deeply equal to the given `descriptor`. See\nthe `deep-eql` project page for info on the deep equality algorithm:\nhttps://github.com/chaijs/deep-eql.\n\n    expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: 1,\n    });\n\nAdd `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n\n    expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n\nHowever, it's dangerous to negate `.ownPropertyDescriptor` when providing\na `descriptor`. The problem is that it creates uncertain expectations by\nasserting that the target either doesn't have a property descriptor with\nthe given key `name`, or that it does have a property descriptor with the\ngiven key `name` but it’s not deeply equal to the given `descriptor`. It's\noften best to identify the exact output that's expected, and then write an\nassertion that only accepts that exact output.\n\nWhen the target isn't expected to have a property descriptor with the given\nkey `name`, it's often best to assert exactly that.\n\n    // Recommended\n    expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n\n    // Not recommended\n    expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: 1,\n    });\n\nWhen the target is expected to have a property descriptor with the given\nkey `name`, it's often best to assert that the property has its expected\ndescriptor, rather than asserting that it doesn't have one of many\nunexpected descriptors.\n\n    // Recommended\n    expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: 3,\n    });\n\n    // Not recommended\n    expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: 1,\n    });\n\n`.ownPropertyDescriptor` changes the target of any assertions that follow\nin the chain to be the value of the property descriptor from the original\ntarget object.\n\n    expect({a: 1}).to.have.ownPropertyDescriptor('a')\n      .that.has.property('enumerable', true);\n\n`.ownPropertyDescriptor` accepts an optional `msg` argument which is a\ncustom error message to show when the assertion fails. The message can also\nbe given as the second argument to `expect`. When not providing\n`descriptor`, only use the second form.\n\n    // Recommended\n    expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: 2,\n    }, 'nooo why fail??');\n\n    // Recommended\n    expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: 2,\n    });\n\n    // Recommended\n    expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n\n    // Not recommended\n    expect({a: 1})\n      .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n\nThe above assertion isn't the same thing as not providing `descriptor`.\nInstead, it's asserting that the target object has a `b` property\ndescriptor that's deeply equal to `undefined`.\n\nThe alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n`.ownPropertyDescriptor`.",
        "name": "ownPropertyDescriptor",
        "alias": "haveOwnPropertyDescriptor",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "_optional_",
                "name": "descriptor"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "ownPropertyDescriptor",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65148,
                66260
            ],
            "filename": "assertions.js",
            "lineno": 2063,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003858",
                "name": "assertOwnPropertyDescriptor",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "name",
                    "descriptor",
                    "msg"
                ]
            },
            "vars": {
                "msg": "assertOwnPropertyDescriptor~msg",
                "descriptor": "assertOwnPropertyDescriptor~descriptor",
                "obj": "assertOwnPropertyDescriptor~obj",
                "actualDescriptor": "assertOwnPropertyDescriptor~actualDescriptor",
                "eql": "assertOwnPropertyDescriptor~eql"
            }
        },
        "undocumented": true,
        "name": "assertOwnPropertyDescriptor",
        "longname": "assertOwnPropertyDescriptor",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65254,
                65270
            ],
            "filename": "assertions.js",
            "lineno": 2065,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003871",
                "name": "msg",
                "type": "Identifier",
                "funcscope": "assertOwnPropertyDescriptor",
                "value": "descriptor",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assertOwnPropertyDescriptor~msg",
        "kind": "member",
        "memberof": "assertOwnPropertyDescriptor",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65276,
                65293
            ],
            "filename": "assertions.js",
            "lineno": 2066,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003875",
                "name": "descriptor",
                "type": "Literal",
                "funcscope": "assertOwnPropertyDescriptor",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertOwnPropertyDescriptor~descriptor",
        "kind": "member",
        "memberof": "assertOwnPropertyDescriptor",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65344,
                65370
            ],
            "filename": "assertions.js",
            "lineno": 2069,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003887",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "assertOwnPropertyDescriptor~obj",
        "kind": "member",
        "memberof": "assertOwnPropertyDescriptor",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65378,
                65447
            ],
            "filename": "assertions.js",
            "lineno": 2070,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003894",
                "name": "actualDescriptor",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "actualDescriptor",
        "longname": "assertOwnPropertyDescriptor~actualDescriptor",
        "kind": "member",
        "memberof": "assertOwnPropertyDescriptor",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65455,
                65478
            ],
            "filename": "assertions.js",
            "lineno": 2071,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100003905",
                "name": "eql",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "eql",
        "longname": "assertOwnPropertyDescriptor~eql",
        "kind": "member",
        "memberof": "assertOwnPropertyDescriptor",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/** */",
        "meta": {
            "range": [
                66424,
                66488
            ],
            "filename": "assertions.js",
            "lineno": 2105,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004007",
                "name": "assertLengthChain",
                "type": "FunctionDeclaration",
                "paramnames": []
            }
        },
        "name": "assertLengthChain",
        "longname": "assertLengthChain",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target's `length` or `size` is equal to the given number\n * `n`.\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3);\n *     expect('foo').to.have.lengthOf(3);\n *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n *\n * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n * best to assert that the target's `length` property is equal to its expected\n * value, rather than not equal to one of many unexpected values.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n *\n * `.lengthOf` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n *\n * `.lengthOf` can also be used as a language chain, causing all `.above`,\n * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n * chain to use the target's `length` property as the target. However, it's\n * often best to assert that the target's `length` property is equal to its\n * expected length, rather than asserting that its `length` property falls\n * within some range of values.\n *\n *     // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf(3);\n *\n *     // Not recommended\n *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n *\n * Due to a compatibility issue, the alias `.length` can't be chained directly\n * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n * interchangeably with `.lengthOf` in every situation. It's recommended to\n * always use `.lengthOf` instead of `.length`.\n *\n *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n *\n * @name lengthOf\n * @alias length\n * @param {number} n\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 2109,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target's `length` or `size` is equal to the given number\n`n`.\n\n    expect([1, 2, 3]).to.have.lengthOf(3);\n    expect('foo').to.have.lengthOf(3);\n    expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n    expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n\nAdd `.not` earlier in the chain to negate `.lengthOf`. However, it's often\nbest to assert that the target's `length` property is equal to its expected\nvalue, rather than not equal to one of many unexpected values.\n\n    expect('foo').to.have.lengthOf(3); // Recommended\n    expect('foo').to.not.have.lengthOf(4); // Not recommended\n\n`.lengthOf` accepts an optional `msg` argument which is a custom error\nmessage to show when the assertion fails. The message can also be given as\nthe second argument to `expect`.\n\n    expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n    expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n\n`.lengthOf` can also be used as a language chain, causing all `.above`,\n`.below`, `.least`, `.most`, and `.within` assertions that follow in the\nchain to use the target's `length` property as the target. However, it's\noften best to assert that the target's `length` property is equal to its\nexpected length, rather than asserting that its `length` property falls\nwithin some range of values.\n\n    // Recommended\n    expect([1, 2, 3]).to.have.lengthOf(3);\n\n    // Not recommended\n    expect([1, 2, 3]).to.have.lengthOf.above(2);\n    expect([1, 2, 3]).to.have.lengthOf.below(4);\n    expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n    expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n    expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n\nDue to a compatibility issue, the alias `.length` can't be chained directly\noff of an uninvoked method such as `.a`. Therefore, `.length` can't be used\ninterchangeably with `.lengthOf` in every situation. It's recommended to\nalways use `.lengthOf` instead of `.length`.\n\n    expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n    expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected",
        "name": "lengthOf",
        "alias": "length",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "n"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "lengthOf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68800,
                69513
            ],
            "filename": "assertions.js",
            "lineno": 2163,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004016",
                "name": "assertLength",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "n",
                    "msg"
                ]
            },
            "vars": {
                "obj": "assertLength~obj",
                "objType": "assertLength~objType",
                "flagMsg": "assertLength~flagMsg",
                "ssfi": "assertLength~ssfi",
                "descriptor": "assertLength~descriptor",
                "itemsCount": "assertLength~itemsCount"
            }
        },
        "undocumented": true,
        "name": "assertLength",
        "longname": "assertLength",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68877,
                68903
            ],
            "filename": "assertions.js",
            "lineno": 2165,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004030",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "assertLength~obj",
        "kind": "member",
        "memberof": "assertLength",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68909,
                68944
            ],
            "filename": "assertions.js",
            "lineno": 2166,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004036",
                "name": "objType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "objType",
        "longname": "assertLength~objType",
        "kind": "member",
        "memberof": "assertLength",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68950,
                68981
            ],
            "filename": "assertions.js",
            "lineno": 2167,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004046",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "assertLength~flagMsg",
        "kind": "member",
        "memberof": "assertLength",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68987,
                69012
            ],
            "filename": "assertions.js",
            "lineno": 2168,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004052",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "assertLength~ssfi",
        "kind": "member",
        "memberof": "assertLength",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69018,
                69039
            ],
            "filename": "assertions.js",
            "lineno": 2169,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004058",
                "name": "descriptor",
                "type": "Literal",
                "value": "length"
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertLength~descriptor",
        "kind": "member",
        "memberof": "assertLength",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69045,
                69055
            ],
            "filename": "assertions.js",
            "lineno": 2170,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004061",
                "name": "itemsCount"
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "assertLength~itemsCount",
        "kind": "member",
        "memberof": "assertLength",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69117,
                69136
            ],
            "filename": "assertions.js",
            "lineno": 2175,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004070",
                "name": "descriptor",
                "type": "Literal",
                "funcscope": "assertLength",
                "value": "size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "descriptor",
        "longname": "assertLength~descriptor",
        "kind": "member",
        "memberof": "assertLength",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69144,
                69165
            ],
            "filename": "assertions.js",
            "lineno": 2176,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004074",
                "name": "itemsCount",
                "type": "MemberExpression",
                "funcscope": "assertLength",
                "value": "obj.size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "assertLength~itemsCount",
        "kind": "member",
        "memberof": "assertLength",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69273,
                69296
            ],
            "filename": "assertions.js",
            "lineno": 2180,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004097",
                "name": "itemsCount",
                "type": "MemberExpression",
                "funcscope": "assertLength",
                "value": "obj.length",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "itemsCount",
        "longname": "assertLength~itemsCount",
        "kind": "member",
        "memberof": "assertLength",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that the target matches the given regular expression `re`.\n *\n *     expect('foobar').to.match(/^foo/);\n *\n * Add `.not` earlier in the chain to negate `.match`.\n *\n *     expect('foobar').to.not.match(/taco/);\n *\n * `.match` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n *\n * The alias `.matches` can be used interchangeably with `.match`.\n *\n * @name match\n * @alias matches\n * @param {RegExp} re\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 2195,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target matches the given regular expression `re`.\n\n    expect('foobar').to.match(/^foo/);\n\nAdd `.not` earlier in the chain to negate `.match`.\n\n    expect('foobar').to.not.match(/taco/);\n\n`.match` accepts an optional `msg` argument which is a custom error message\nto show when the assertion fails. The message can also be given as the\nsecond argument to `expect`.\n\n    expect('foobar').to.match(/taco/, 'nooo why fail??');\n    expect('foobar', 'nooo why fail??').to.match(/taco/);\n\nThe alias `.matches` can be used interchangeably with `.match`.",
        "name": "match",
        "alias": "matches",
        "params": [
            {
                "type": {
                    "names": [
                        "RegExp"
                    ]
                },
                "name": "re"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "match",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70380,
                70606
            ],
            "filename": "assertions.js",
            "lineno": 2219,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004138",
                "name": "assertMatch",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "re",
                    "msg"
                ]
            },
            "vars": {
                "obj": "assertMatch~obj"
            }
        },
        "undocumented": true,
        "name": "assertMatch",
        "longname": "assertMatch",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70457,
                70483
            ],
            "filename": "assertions.js",
            "lineno": 2221,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004152",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "assertMatch~obj",
        "kind": "member",
        "memberof": "assertMatch",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target string contains the given substring `str`.\n *\n *     expect('foobar').to.have.string('bar');\n *\n * Add `.not` earlier in the chain to negate `.string`.\n *\n *     expect('foobar').to.not.have.string('taco');\n *\n * `.string` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n *\n * @name string\n * @param {string} str\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 2232,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target string contains the given substring `str`.\n\n    expect('foobar').to.have.string('bar');\n\nAdd `.not` earlier in the chain to negate `.string`.\n\n    expect('foobar').to.not.have.string('taco');\n\n`.string` accepts an optional `msg` argument which is a custom error\nmessage to show when the assertion fails. The message can also be given as\nthe second argument to `expect`.\n\n    expect('foobar').to.have.string('taco', 'nooo why fail??');\n    expect('foobar', 'nooo why fail??').to.have.string('taco');",
        "name": "string",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "str"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "string",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71449,
                71475
            ],
            "filename": "assertions.js",
            "lineno": 2255,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004207",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "<anonymous>~obj",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71481,
                71512
            ],
            "filename": "assertions.js",
            "lineno": 2256,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004213",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "<anonymous>~flagMsg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71518,
                71543
            ],
            "filename": "assertions.js",
            "lineno": 2257,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004219",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "<anonymous>~ssfi",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target object, array, map, or set has the given keys. Only\n * the target's own inherited properties are included in the search.\n *\n * When the target is an object or array, keys can be provided as one or more\n * string arguments, a single array argument, or a single object argument. In\n * the latter case, only the keys in the given object matter; the values are\n * ignored.\n *\n *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n *     expect(['x', 'y']).to.have.all.keys(0, 1);\n *\n *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n *\n *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n *\n * When the target is a map or set, each key must be provided as a separate\n * argument.\n *\n *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n *\n * Because `.keys` does different things based on the target's type, it's\n * important to check the target's type before using `.keys`. See the `.a` doc\n * for info on testing a target's type.\n *\n *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n *\n * By default, strict (`===`) equality is used to compare keys of maps and\n * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n * the `deep-eql` project page for info on the deep equality algorithm:\n * https://github.com/chaijs/deep-eql.\n *\n *     // Target set deeply (but not strictly) has key `{a: 1}`\n *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n *\n * By default, the target must have all of the given keys and no more. Add\n * `.any` earlier in the chain to only require that the target have at least\n * one of the given keys. Also, add `.not` earlier in the chain to negate\n * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n * `.all` when asserting `.keys` without negation.\n *\n * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n * exactly what's expected of the output, whereas `.not.all.keys` creates\n * uncertain expectations.\n *\n *     // Recommended; asserts that target doesn't have any of the given keys\n *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n *\n *     // Not recommended; asserts that target doesn't have all of the given\n *     // keys but may or may not have some of them\n *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n *\n * When asserting `.keys` without negation, `.all` is preferred because\n * `.all.keys` asserts exactly what's expected of the output, whereas\n * `.any.keys` creates uncertain expectations.\n *\n *     // Recommended; asserts that target has all the given keys\n *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n *\n *     // Not recommended; asserts that target has at least one of the given\n *     // keys but may or may not have more of them\n *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n *\n * Note that `.all` is used by default when neither `.all` nor `.any` appear\n * earlier in the chain. However, it's often best to add `.all` anyway because\n * it improves readability.\n *\n *     // Both assertions are identical\n *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n *\n * Add `.include` earlier in the chain to require that the target's keys be a\n * superset of the expected keys, rather than identical sets.\n *\n *     // Target object's keys are a superset of ['a', 'b'] but not identical\n *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n *\n * However, if `.any` and `.include` are combined, only the `.any` takes\n * effect. The `.include` is ignored in this case.\n *\n *     // Both assertions are identical\n *     expect({a: 1}).to.have.any.keys('a', 'b');\n *     expect({a: 1}).to.include.any.keys('a', 'b');\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n *\n * The alias `.key` can be used interchangeably with `.keys`.\n *\n * @name keys\n * @alias key\n * @param {...string | Array | object} keys\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 2267,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target object, array, map, or set has the given keys. Only\nthe target's own inherited properties are included in the search.\n\nWhen the target is an object or array, keys can be provided as one or more\nstring arguments, a single array argument, or a single object argument. In\nthe latter case, only the keys in the given object matter; the values are\nignored.\n\n    expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n    expect(['x', 'y']).to.have.all.keys(0, 1);\n\n    expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n    expect(['x', 'y']).to.have.all.keys([0, 1]);\n\n    expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n    expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n\nWhen the target is a map or set, each key must be provided as a separate\nargument.\n\n    expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n    expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n\nBecause `.keys` does different things based on the target's type, it's\nimportant to check the target's type before using `.keys`. See the `.a` doc\nfor info on testing a target's type.\n\n    expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n\nBy default, strict (`===`) equality is used to compare keys of maps and\nsets. Add `.deep` earlier in the chain to use deep equality instead. See\nthe `deep-eql` project page for info on the deep equality algorithm:\nhttps://github.com/chaijs/deep-eql.\n\n    // Target set deeply (but not strictly) has key `{a: 1}`\n    expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n    expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n\nBy default, the target must have all of the given keys and no more. Add\n`.any` earlier in the chain to only require that the target have at least\none of the given keys. Also, add `.not` earlier in the chain to negate\n`.keys`. It's often best to add `.any` when negating `.keys`, and to use\n`.all` when asserting `.keys` without negation.\n\nWhen negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\nexactly what's expected of the output, whereas `.not.all.keys` creates\nuncertain expectations.\n\n    // Recommended; asserts that target doesn't have any of the given keys\n    expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n\n    // Not recommended; asserts that target doesn't have all of the given\n    // keys but may or may not have some of them\n    expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n\nWhen asserting `.keys` without negation, `.all` is preferred because\n`.all.keys` asserts exactly what's expected of the output, whereas\n`.any.keys` creates uncertain expectations.\n\n    // Recommended; asserts that target has all the given keys\n    expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n\n    // Not recommended; asserts that target has at least one of the given\n    // keys but may or may not have more of them\n    expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n\nNote that `.all` is used by default when neither `.all` nor `.any` appear\nearlier in the chain. However, it's often best to add `.all` anyway because\nit improves readability.\n\n    // Both assertions are identical\n    expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n    expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n\nAdd `.include` earlier in the chain to require that the target's keys be a\nsuperset of the expected keys, rather than identical sets.\n\n    // Target object's keys are a superset of ['a', 'b'] but not identical\n    expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n    expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n\nHowever, if `.any` and `.include` are combined, only the `.any` takes\neffect. The `.include` is ignored in this case.\n\n    // Both assertions are identical\n    expect({a: 1}).to.have.any.keys('a', 'b');\n    expect({a: 1}).to.include.any.keys('a', 'b');\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect({a: 1}, 'nooo why fail??').to.have.key('b');\n\nThe alias `.key` can be used interchangeably with `.keys`.",
        "name": "keys",
        "alias": "key",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Array",
                        "object"
                    ]
                },
                "name": "keys"
            }
        ],
        "access": "public",
        "longname": "keys",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76181,
                79162
            ],
            "filename": "assertions.js",
            "lineno": 2367,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004263",
                "name": "assertKeys",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "keys"
                ]
            },
            "vars": {
                "obj": "assertKeys~obj",
                "objType": "assertKeys~objType",
                "keysType": "assertKeys~keysType",
                "ssfi": "assertKeys~ssfi",
                "isDeep": "assertKeys~isDeep",
                "str": "assertKeys~str",
                "deepStr": "assertKeys~deepStr",
                "actual": "assertKeys~actual",
                "ok": "assertKeys~ok",
                "flagMsg": "assertKeys~flagMsg",
                "mixedArgsMsg": "assertKeys~mixedArgsMsg",
                "": null,
                "keys": "assertKeys~keys",
                "len": "assertKeys~len",
                "any": "assertKeys~any",
                "all": "assertKeys~all",
                "expected": "assertKeys~expected",
                "isEql": "assertKeys~isEql",
                "last": "assertKeys~last"
            }
        },
        "undocumented": true,
        "name": "assertKeys",
        "longname": "assertKeys",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76215,
                76241
            ],
            "filename": "assertions.js",
            "lineno": 2368,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004268",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "assertKeys~obj",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76247,
                76268
            ],
            "filename": "assertions.js",
            "lineno": 2369,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004274",
                "name": "objType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "objType",
        "longname": "assertKeys~objType",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76274,
                76297
            ],
            "filename": "assertions.js",
            "lineno": 2370,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004281",
                "name": "keysType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "keysType",
        "longname": "assertKeys~keysType",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76303,
                76328
            ],
            "filename": "assertions.js",
            "lineno": 2371,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004288",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "assertKeys~ssfi",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76334,
                76361
            ],
            "filename": "assertions.js",
            "lineno": 2372,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004294",
                "name": "isDeep",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isDeep",
        "longname": "assertKeys~isDeep",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76367,
                76370
            ],
            "filename": "assertions.js",
            "lineno": 2373,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004300",
                "name": "str"
            }
        },
        "undocumented": true,
        "name": "str",
        "longname": "assertKeys~str",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76376,
                76388
            ],
            "filename": "assertions.js",
            "lineno": 2374,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004302",
                "name": "deepStr",
                "type": "Literal",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "deepStr",
        "longname": "assertKeys~deepStr",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76394,
                76400
            ],
            "filename": "assertions.js",
            "lineno": 2375,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004305",
                "name": "actual"
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "assertKeys~actual",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76406,
                76415
            ],
            "filename": "assertions.js",
            "lineno": 2376,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004307",
                "name": "ok",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "ok",
        "longname": "assertKeys~ok",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76421,
                76452
            ],
            "filename": "assertions.js",
            "lineno": 2377,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004310",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "assertKeys~flagMsg",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76457,
                76496
            ],
            "filename": "assertions.js",
            "lineno": 2379,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004317",
                "name": "flagMsg",
                "type": "ConditionalExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "assertKeys~flagMsg",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76504,
                76663
            ],
            "filename": "assertions.js",
            "lineno": 2380,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004326",
                "name": "mixedArgsMsg",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "mixedArgsMsg",
        "longname": "assertKeys~mixedArgsMsg",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76718,
                76751
            ],
            "filename": "assertions.js",
            "lineno": 2384,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004341",
                "name": "deepStr",
                "type": "ConditionalExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "deepStr",
        "longname": "assertKeys~deepStr",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76757,
                76768
            ],
            "filename": "assertions.js",
            "lineno": 2385,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004348",
                "name": "actual",
                "type": "ArrayExpression",
                "funcscope": "assertKeys",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "assertKeys~actual",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76959,
                77003
            ],
            "filename": "assertions.js",
            "lineno": 2393,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004372",
                "name": "keys",
                "type": "CallExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "keys",
        "longname": "assertKeys~keys",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77026,
                77068
            ],
            "filename": "assertions.js",
            "lineno": 2396,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004385",
                "name": "actual",
                "type": "CallExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "assertKeys~actual",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77385,
                77409
            ],
            "filename": "assertions.js",
            "lineno": 2408,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004426",
                "name": "keys",
                "type": "CallExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "keys",
        "longname": "assertKeys~keys",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77449,
                77493
            ],
            "filename": "assertions.js",
            "lineno": 2411,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004436",
                "name": "keys",
                "type": "CallExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "keys",
        "longname": "assertKeys~keys",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77580,
                77677
            ],
            "filename": "assertions.js",
            "lineno": 2415,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004448",
                "name": "keys",
                "type": "CallExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "keys",
        "longname": "assertKeys~keys",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77791,
                77808
            ],
            "filename": "assertions.js",
            "lineno": 2424,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004482",
                "name": "len",
                "type": "MemberExpression",
                "value": "keys.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "assertKeys~len",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77814,
                77837
            ],
            "filename": "assertions.js",
            "lineno": 2425,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004487",
                "name": "any",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "any",
        "longname": "assertKeys~any",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77843,
                77866
            ],
            "filename": "assertions.js",
            "lineno": 2426,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004493",
                "name": "all",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "all",
        "longname": "assertKeys~all",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77872,
                77887
            ],
            "filename": "assertions.js",
            "lineno": 2427,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004499",
                "name": "expected",
                "type": "Identifier",
                "value": "keys"
            }
        },
        "undocumented": true,
        "name": "expected",
        "longname": "assertKeys~expected",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77893,
                77959
            ],
            "filename": "assertions.js",
            "lineno": 2428,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004502",
                "name": "isEql",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isEql",
        "longname": "assertKeys~isEql",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77988,
                77998
            ],
            "filename": "assertions.js",
            "lineno": 2431,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004524",
                "name": "all",
                "type": "Literal",
                "funcscope": "assertKeys",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "all",
        "longname": "assertKeys~all",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78035,
                78189
            ],
            "filename": "assertions.js",
            "lineno": 2436,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004531",
                "name": "ok",
                "type": "CallExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ok",
        "longname": "assertKeys~ok",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78226,
                78381
            ],
            "filename": "assertions.js",
            "lineno": 2445,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004557",
                "name": "ok",
                "type": "CallExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ok",
        "longname": "assertKeys~ok",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78425,
                78464
            ],
            "filename": "assertions.js",
            "lineno": 2452,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004587",
                "name": "ok",
                "type": "LogicalExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ok",
        "longname": "assertKeys~ok",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78514,
                78582
            ],
            "filename": "assertions.js",
            "lineno": 2458,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004604",
                "name": "keys",
                "type": "CallExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "keys",
        "longname": "assertKeys~keys",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78592,
                78609
            ],
            "filename": "assertions.js",
            "lineno": 2461,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004620",
                "name": "last",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "last",
        "longname": "assertKeys~last",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78632,
                78671
            ],
            "filename": "assertions.js",
            "lineno": 2463,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004630",
                "name": "str",
                "type": "BinaryExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "str",
        "longname": "assertKeys~str",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78700,
                78738
            ],
            "filename": "assertions.js",
            "lineno": 2466,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004645",
                "name": "str",
                "type": "BinaryExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "str",
        "longname": "assertKeys~str",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78761,
                78785
            ],
            "filename": "assertions.js",
            "lineno": 2469,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004658",
                "name": "str",
                "type": "CallExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "str",
        "longname": "assertKeys~str",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78804,
                78844
            ],
            "filename": "assertions.js",
            "lineno": 2473,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004668",
                "name": "str",
                "type": "BinaryExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "str",
        "longname": "assertKeys~str",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78869,
                78928
            ],
            "filename": "assertions.js",
            "lineno": 2476,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004679",
                "name": "str",
                "type": "BinaryExpression",
                "funcscope": "assertKeys",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "str",
        "longname": "assertKeys~str",
        "kind": "member",
        "memberof": "assertKeys",
        "scope": "inner"
    },
    {
        "comment": "/**\n * When no arguments are provided, `.throw` invokes the target function and\n * asserts that an error is thrown.\n *\n *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n *     expect(badFn).to.throw();\n *\n * When one argument is provided, and it's an error constructor, `.throw`\n * invokes the target function and asserts that an error is thrown that's an\n * instance of that error constructor.\n *\n *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n *     expect(badFn).to.throw(TypeError);\n *\n * When one argument is provided, and it's an error instance, `.throw` invokes\n * the target function and asserts that an error is thrown that's strictly\n * (`===`) equal to that error instance.\n *\n *     var err = new TypeError('Illegal salmon!');\n *     var badFn = function () { throw err; };\n *\n *     expect(badFn).to.throw(err);\n *\n * When one argument is provided, and it's a string, `.throw` invokes the\n * target function and asserts that an error is thrown with a message that\n * contains that string.\n *\n *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n *     expect(badFn).to.throw('salmon');\n *\n * When one argument is provided, and it's a regular expression, `.throw`\n * invokes the target function and asserts that an error is thrown with a\n * message that matches that regular expression.\n *\n *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n *     expect(badFn).to.throw(/salmon/);\n *\n * When two arguments are provided, and the first is an error instance or\n * constructor, and the second is a string or regular expression, `.throw`\n * invokes the function and asserts that an error is thrown that fulfills both\n * conditions as described above.\n *\n *     var err = new TypeError('Illegal salmon!');\n *     var badFn = function () { throw err; };\n *\n *     expect(badFn).to.throw(TypeError, 'salmon');\n *     expect(badFn).to.throw(TypeError, /salmon/);\n *     expect(badFn).to.throw(err, 'salmon');\n *     expect(badFn).to.throw(err, /salmon/);\n *\n * Add `.not` earlier in the chain to negate `.throw`.\n *\n *     var goodFn = function () {};\n *     expect(goodFn).to.not.throw();\n *\n * However, it's dangerous to negate `.throw` when providing any arguments.\n * The problem is that it creates uncertain expectations by asserting that the\n * target either doesn't throw an error, or that it throws an error but of a\n * different type than the given type, or that it throws an error of the given\n * type but with a message that doesn't include the given string. It's often\n * best to identify the exact output that's expected, and then write an\n * assertion that only accepts that exact output.\n *\n * When the target isn't expected to throw an error, it's often best to assert\n * exactly that.\n *\n *     var goodFn = function () {};\n *\n *     expect(goodFn).to.not.throw(); // Recommended\n *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n *\n * When the target is expected to throw an error, it's often best to assert\n * that the error is of its expected type, and has a message that includes an\n * expected string, rather than asserting that it doesn't have one of many\n * unexpected types, and doesn't have a message that includes some string.\n *\n *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n *\n *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n *\n * `.throw` changes the target of any assertions that follow in the chain to\n * be the error object that's thrown.\n *\n *     var err = new TypeError('Illegal salmon!');\n *     err.code = 42;\n *     var badFn = function () { throw err; };\n *\n *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n *\n * `.throw` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`. When not providing two arguments, always use\n * the second form.\n *\n *     var goodFn = function () {};\n *\n *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n *     expect(goodFn, 'nooo why fail??').to.throw();\n *\n * Due to limitations in ES5, `.throw` may not always work as expected when\n * using a transpiler such as Babel or TypeScript. In particular, it may\n * produce unexpected results when subclassing the built-in `Error` object and\n * then passing the subclassed constructor to `.throw`. See your transpiler's\n * docs for details:\n *\n * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n *\n * Beware of some common mistakes when using the `throw` assertion. One common\n * mistake is to accidentally invoke the function yourself instead of letting\n * the `throw` assertion invoke the function for you. For example, when\n * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n * the target for the assertion.\n *\n *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n *\n * If you need to assert that your function `fn` throws when passed certain\n * arguments, then wrap a call to `fn` inside of another function.\n *\n *     expect(function () { fn(42); }).to.throw();  // Function expression\n *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n *\n * Another common mistake is to provide an object method (or any stand-alone\n * function that relies on `this`) as the target of the assertion. Doing so is\n * problematic because the `this` context will be lost when the function is\n * invoked by `.throw`; there's no way for it to know what `this` is supposed\n * to be. There are two ways around this problem. One solution is to wrap the\n * method or function call inside of another function. Another solution is to\n * use `bind`.\n *\n *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n *\n * Finally, it's worth mentioning that it's a best practice in JavaScript to\n * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n * `TypeError`, and user-defined objects that extend `Error`. No other type of\n * value will generate a stack trace when initialized. With that said, the\n * `throw` assertion does technically support any type of value being thrown,\n * not just `Error` and its derivatives.\n *\n * The aliases `.throws` and `.Throw` can be used interchangeably with\n * `.throw`.\n *\n * @name throw\n * @alias throws\n * @alias Throw\n * @param {Error} errorLike\n * @param {string | RegExp} errMsgMatcher error message\n * @param {string} msg _optional_\n * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n * @returns {void} error for chaining (null if no error)\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 2492,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "When no arguments are provided, `.throw` invokes the target function and\nasserts that an error is thrown.\n\n    var badFn = function () { throw new TypeError('Illegal salmon!'); };\n    expect(badFn).to.throw();\n\nWhen one argument is provided, and it's an error constructor, `.throw`\ninvokes the target function and asserts that an error is thrown that's an\ninstance of that error constructor.\n\n    var badFn = function () { throw new TypeError('Illegal salmon!'); };\n    expect(badFn).to.throw(TypeError);\n\nWhen one argument is provided, and it's an error instance, `.throw` invokes\nthe target function and asserts that an error is thrown that's strictly\n(`===`) equal to that error instance.\n\n    var err = new TypeError('Illegal salmon!');\n    var badFn = function () { throw err; };\n\n    expect(badFn).to.throw(err);\n\nWhen one argument is provided, and it's a string, `.throw` invokes the\ntarget function and asserts that an error is thrown with a message that\ncontains that string.\n\n    var badFn = function () { throw new TypeError('Illegal salmon!'); };\n    expect(badFn).to.throw('salmon');\n\nWhen one argument is provided, and it's a regular expression, `.throw`\ninvokes the target function and asserts that an error is thrown with a\nmessage that matches that regular expression.\n\n    var badFn = function () { throw new TypeError('Illegal salmon!'); };\n    expect(badFn).to.throw(/salmon/);\n\nWhen two arguments are provided, and the first is an error instance or\nconstructor, and the second is a string or regular expression, `.throw`\ninvokes the function and asserts that an error is thrown that fulfills both\nconditions as described above.\n\n    var err = new TypeError('Illegal salmon!');\n    var badFn = function () { throw err; };\n\n    expect(badFn).to.throw(TypeError, 'salmon');\n    expect(badFn).to.throw(TypeError, /salmon/);\n    expect(badFn).to.throw(err, 'salmon');\n    expect(badFn).to.throw(err, /salmon/);\n\nAdd `.not` earlier in the chain to negate `.throw`.\n\n    var goodFn = function () {};\n    expect(goodFn).to.not.throw();\n\nHowever, it's dangerous to negate `.throw` when providing any arguments.\nThe problem is that it creates uncertain expectations by asserting that the\ntarget either doesn't throw an error, or that it throws an error but of a\ndifferent type than the given type, or that it throws an error of the given\ntype but with a message that doesn't include the given string. It's often\nbest to identify the exact output that's expected, and then write an\nassertion that only accepts that exact output.\n\nWhen the target isn't expected to throw an error, it's often best to assert\nexactly that.\n\n    var goodFn = function () {};\n\n    expect(goodFn).to.not.throw(); // Recommended\n    expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n\nWhen the target is expected to throw an error, it's often best to assert\nthat the error is of its expected type, and has a message that includes an\nexpected string, rather than asserting that it doesn't have one of many\nunexpected types, and doesn't have a message that includes some string.\n\n    var badFn = function () { throw new TypeError('Illegal salmon!'); };\n\n    expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n    expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n\n`.throw` changes the target of any assertions that follow in the chain to\nbe the error object that's thrown.\n\n    var err = new TypeError('Illegal salmon!');\n    err.code = 42;\n    var badFn = function () { throw err; };\n\n    expect(badFn).to.throw(TypeError).with.property('code', 42);\n\n`.throw` accepts an optional `msg` argument which is a custom error message\nto show when the assertion fails. The message can also be given as the\nsecond argument to `expect`. When not providing two arguments, always use\nthe second form.\n\n    var goodFn = function () {};\n\n    expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n    expect(goodFn, 'nooo why fail??').to.throw();\n\nDue to limitations in ES5, `.throw` may not always work as expected when\nusing a transpiler such as Babel or TypeScript. In particular, it may\nproduce unexpected results when subclassing the built-in `Error` object and\nthen passing the subclassed constructor to `.throw`. See your transpiler's\ndocs for details:\n\n- ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n- ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n\nBeware of some common mistakes when using the `throw` assertion. One common\nmistake is to accidentally invoke the function yourself instead of letting\nthe `throw` assertion invoke the function for you. For example, when\ntesting if a function named `fn` throws, provide `fn` instead of `fn()` as\nthe target for the assertion.\n\n    expect(fn).to.throw();     // Good! Tests `fn` as desired\n    expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n\nIf you need to assert that your function `fn` throws when passed certain\narguments, then wrap a call to `fn` inside of another function.\n\n    expect(function () { fn(42); }).to.throw();  // Function expression\n    expect(() => fn(42)).to.throw();             // ES6 arrow function\n\nAnother common mistake is to provide an object method (or any stand-alone\nfunction that relies on `this`) as the target of the assertion. Doing so is\nproblematic because the `this` context will be lost when the function is\ninvoked by `.throw`; there's no way for it to know what `this` is supposed\nto be. There are two ways around this problem. One solution is to wrap the\nmethod or function call inside of another function. Another solution is to\nuse `bind`.\n\n    expect(function () { cat.meow(); }).to.throw();  // Function expression\n    expect(() => cat.meow()).to.throw();             // ES6 arrow function\n    expect(cat.meow.bind(cat)).to.throw();           // Bind\n\nFinally, it's worth mentioning that it's a best practice in JavaScript to\nonly throw `Error` and derivatives of `Error` such as `ReferenceError`,\n`TypeError`, and user-defined objects that extend `Error`. No other type of\nvalue will generate a stack trace when initialized. With that said, the\n`throw` assertion does technically support any type of value being thrown,\nnot just `Error` and its derivatives.\n\nThe aliases `.throws` and `.Throw` can be used interchangeably with\n`.throw`.",
        "name": "throw",
        "alias": "Throw",
        "params": [
            {
                "type": {
                    "names": [
                        "Error"
                    ]
                },
                "name": "errorLike"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "RegExp"
                    ]
                },
                "description": "error message",
                "name": "errMsgMatcher"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "see": [
            "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types"
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "void"
                    ]
                },
                "description": "error for chaining (null if no error)"
            }
        ],
        "access": "public",
        "longname": "throw",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86370,
                91638
            ],
            "filename": "assertions.js",
            "lineno": 2648,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004739",
                "name": "assertThrows",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "errorLike",
                    "errMsgMatcher",
                    "msg"
                ]
            },
            "vars": {
                "obj": "assertThrows~obj",
                "ssfi": "assertThrows~ssfi",
                "flagMsg": "assertThrows~flagMsg",
                "negate": "assertThrows~negate",
                "errMsgMatcher": "assertThrows~errMsgMatcher",
                "errorLike": "assertThrows~errorLike",
                "caughtErr": "assertThrows~caughtErr",
                "errorWasThrown": "assertThrows~errorWasThrown",
                "everyArgIsUndefined": "assertThrows~everyArgIsUndefined",
                "everyArgIsDefined": "assertThrows~everyArgIsDefined",
                "errorLikeFail": "assertThrows~errorLikeFail",
                "errMsgMatcherFail": "assertThrows~errMsgMatcherFail",
                "errorLikeString": "assertThrows~errorLikeString",
                "actual": "assertThrows~actual",
                "isCompatibleInstance": "assertThrows~isCompatibleInstance",
                "isCompatibleConstructor": "assertThrows~isCompatibleConstructor",
                "placeholder": "assertThrows~placeholder",
                "isCompatibleMessage": "assertThrows~isCompatibleMessage"
            }
        },
        "undocumented": true,
        "name": "assertThrows",
        "longname": "assertThrows",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86470,
                86496
            ],
            "filename": "assertions.js",
            "lineno": 2650,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004754",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "assertThrows~obj",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86502,
                86527
            ],
            "filename": "assertions.js",
            "lineno": 2651,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004760",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "assertThrows~ssfi",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86533,
                86564
            ],
            "filename": "assertions.js",
            "lineno": 2652,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004766",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "assertThrows~flagMsg",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86570,
                86608
            ],
            "filename": "assertions.js",
            "lineno": 2653,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004772",
                "name": "negate",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "negate",
        "longname": "assertThrows~negate",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86739,
                86764
            ],
            "filename": "assertions.js",
            "lineno": 2657,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004806",
                "name": "errMsgMatcher",
                "type": "Identifier",
                "funcscope": "assertThrows",
                "value": "errorLike",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errMsgMatcher",
        "longname": "assertThrows~errMsgMatcher",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86770,
                86786
            ],
            "filename": "assertions.js",
            "lineno": 2658,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004810",
                "name": "errorLike",
                "type": "Literal",
                "funcscope": "assertThrows",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorLike",
        "longname": "assertThrows~errorLike",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86799,
                86808
            ],
            "filename": "assertions.js",
            "lineno": 2661,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004814",
                "name": "caughtErr"
            }
        },
        "undocumented": true,
        "name": "caughtErr",
        "longname": "assertThrows~caughtErr",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86816,
                86838
            ],
            "filename": "assertions.js",
            "lineno": 2662,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004817",
                "name": "errorWasThrown",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "errorWasThrown",
        "longname": "assertThrows~errorWasThrown",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86881,
                86902
            ],
            "filename": "assertions.js",
            "lineno": 2666,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004827",
                "name": "errorWasThrown",
                "type": "Literal",
                "funcscope": "assertThrows",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorWasThrown",
        "longname": "assertThrows~errorWasThrown",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86908,
                86923
            ],
            "filename": "assertions.js",
            "lineno": 2667,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004831",
                "name": "caughtErr",
                "type": "Identifier",
                "funcscope": "assertThrows",
                "value": "err",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "caughtErr",
        "longname": "assertThrows~caughtErr",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87092,
                87172
            ],
            "filename": "assertions.js",
            "lineno": 2672,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004835",
                "name": "everyArgIsUndefined",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "everyArgIsUndefined",
        "longname": "assertThrows~everyArgIsUndefined",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87323,
                87378
            ],
            "filename": "assertions.js",
            "lineno": 2677,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004845",
                "name": "everyArgIsDefined",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "everyArgIsDefined",
        "longname": "assertThrows~everyArgIsDefined",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87386,
                87407
            ],
            "filename": "assertions.js",
            "lineno": 2678,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004853",
                "name": "errorLikeFail",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "errorLikeFail",
        "longname": "assertThrows~errorLikeFail",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87415,
                87440
            ],
            "filename": "assertions.js",
            "lineno": 2679,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004857",
                "name": "errMsgMatcherFail",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "errMsgMatcherFail",
        "longname": "assertThrows~errMsgMatcherFail",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87625,
                87653
            ],
            "filename": "assertions.js",
            "lineno": 2684,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004870",
                "name": "errorLikeString",
                "type": "Literal",
                "value": "an error"
            }
        },
        "undocumented": true,
        "name": "errorLikeString",
        "longname": "assertThrows~errorLikeString",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87699,
                87725
            ],
            "filename": "assertions.js",
            "lineno": 2686,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004879",
                "name": "errorLikeString",
                "type": "Literal",
                "funcscope": "assertThrows",
                "value": "#{exp}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorLikeString",
        "longname": "assertThrows~errorLikeString",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87761,
                87821
            ],
            "filename": "assertions.js",
            "lineno": 2688,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004886",
                "name": "errorLikeString",
                "type": "CallExpression",
                "funcscope": "assertThrows",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorLikeString",
        "longname": "assertThrows~errorLikeString",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87838,
                87856
            ],
            "filename": "assertions.js",
            "lineno": 2691,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004896",
                "name": "actual",
                "type": "Identifier",
                "value": "caughtErr"
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "assertThrows~actual",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87902,
                87931
            ],
            "filename": "assertions.js",
            "lineno": 2693,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004905",
                "name": "actual",
                "type": "CallExpression",
                "funcscope": "assertThrows",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "assertThrows~actual",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87987,
                88005
            ],
            "filename": "assertions.js",
            "lineno": 2695,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004918",
                "name": "actual",
                "type": "Identifier",
                "funcscope": "assertThrows",
                "value": "caughtErr",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "assertThrows~actual",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88143,
                88194
            ],
            "filename": "assertions.js",
            "lineno": 2701,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004937",
                "name": "actual",
                "type": "CallExpression",
                "funcscope": "assertThrows",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "assertThrows~actual",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88719,
                88820
            ],
            "filename": "assertions.js",
            "lineno": 2720,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004975",
                "name": "isCompatibleInstance",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isCompatibleInstance",
        "longname": "assertThrows~isCompatibleInstance",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                89074,
                89094
            ],
            "filename": "assertions.js",
            "lineno": 2729,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100004996",
                "name": "errorLikeFail",
                "type": "Literal",
                "funcscope": "assertThrows",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorLikeFail",
        "longname": "assertThrows~errorLikeFail",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                89461,
                89562
            ],
            "filename": "assertions.js",
            "lineno": 2743,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005025",
                "name": "isCompatibleConstructor",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isCompatibleConstructor",
        "longname": "assertThrows~isCompatibleConstructor",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                89659,
                89679
            ],
            "filename": "assertions.js",
            "lineno": 2749,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005046",
                "name": "errorLikeFail",
                "type": "Literal",
                "funcscope": "assertThrows",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorLikeFail",
        "longname": "assertThrows~errorLikeFail",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                90350,
                90375
            ],
            "filename": "assertions.js",
            "lineno": 2769,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005109",
                "name": "placeholder",
                "type": "Literal",
                "value": "including"
            }
        },
        "undocumented": true,
        "name": "placeholder",
        "longname": "assertThrows~placeholder",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                90420,
                90444
            ],
            "filename": "assertions.js",
            "lineno": 2771,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005120",
                "name": "placeholder",
                "type": "Literal",
                "funcscope": "assertThrows",
                "value": "matching",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "placeholder",
        "longname": "assertThrows~placeholder",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                90461,
                90558
            ],
            "filename": "assertions.js",
            "lineno": 2774,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005124",
                "name": "isCompatibleMessage",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isCompatibleMessage",
        "longname": "assertThrows~isCompatibleMessage",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                90651,
                90675
            ],
            "filename": "assertions.js",
            "lineno": 2780,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005145",
                "name": "errMsgMatcherFail",
                "type": "Literal",
                "funcscope": "assertThrows",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errMsgMatcherFail",
        "longname": "assertThrows~errMsgMatcherFail",
        "kind": "member",
        "memberof": "assertThrows",
        "scope": "inner"
    },
    {
        "comment": "/**\n * When the target is a non-function object, `.respondTo` asserts that the\n * target has a method with the given name `method`. The method can be own or\n * inherited, and it can be enumerable or non-enumerable.\n *\n *     function Cat () {}\n *     Cat.prototype.meow = function () {};\n *\n *     expect(new Cat()).to.respondTo('meow');\n *\n * When the target is a function, `.respondTo` asserts that the target's\n * `prototype` property has a method with the given name `method`. Again, the\n * method can be own or inherited, and it can be enumerable or non-enumerable.\n *\n *     function Cat () {}\n *     Cat.prototype.meow = function () {};\n *\n *     expect(Cat).to.respondTo('meow');\n *\n * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n * target as a non-function object, even if it's a function. Thus, it asserts\n * that the target has a method with the given name `method`, rather than\n * asserting that the target's `prototype` property has a method with the\n * given name `method`.\n *\n *     function Cat () {}\n *     Cat.prototype.meow = function () {};\n *     Cat.hiss = function () {};\n *\n *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n *\n * When not adding `.itself`, it's important to check the target's type before\n * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n *\n *     function Cat () {}\n *     Cat.prototype.meow = function () {};\n *\n *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n *\n * Add `.not` earlier in the chain to negate `.respondTo`.\n *\n *     function Dog () {}\n *     Dog.prototype.bark = function () {};\n *\n *     expect(new Dog()).to.not.respondTo('meow');\n *\n * `.respondTo` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect({}).to.respondTo('meow', 'nooo why fail??');\n *     expect({}, 'nooo why fail??').to.respondTo('meow');\n *\n * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n *\n * @name respondTo\n * @alias respondsTo\n * @param {string} method\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 2818,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "When the target is a non-function object, `.respondTo` asserts that the\ntarget has a method with the given name `method`. The method can be own or\ninherited, and it can be enumerable or non-enumerable.\n\n    function Cat () {}\n    Cat.prototype.meow = function () {};\n\n    expect(new Cat()).to.respondTo('meow');\n\nWhen the target is a function, `.respondTo` asserts that the target's\n`prototype` property has a method with the given name `method`. Again, the\nmethod can be own or inherited, and it can be enumerable or non-enumerable.\n\n    function Cat () {}\n    Cat.prototype.meow = function () {};\n\n    expect(Cat).to.respondTo('meow');\n\nAdd `.itself` earlier in the chain to force `.respondTo` to treat the\ntarget as a non-function object, even if it's a function. Thus, it asserts\nthat the target has a method with the given name `method`, rather than\nasserting that the target's `prototype` property has a method with the\ngiven name `method`.\n\n    function Cat () {}\n    Cat.prototype.meow = function () {};\n    Cat.hiss = function () {};\n\n    expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n\nWhen not adding `.itself`, it's important to check the target's type before\nusing `.respondTo`. See the `.a` doc for info on checking a target's type.\n\n    function Cat () {}\n    Cat.prototype.meow = function () {};\n\n    expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n\nAdd `.not` earlier in the chain to negate `.respondTo`.\n\n    function Dog () {}\n    Dog.prototype.bark = function () {};\n\n    expect(new Dog()).to.not.respondTo('meow');\n\n`.respondTo` accepts an optional `msg` argument which is a custom error\nmessage to show when the assertion fails. The message can also be given as\nthe second argument to `expect`.\n\n    expect({}).to.respondTo('meow', 'nooo why fail??');\n    expect({}, 'nooo why fail??').to.respondTo('meow');\n\nThe alias `.respondsTo` can be used interchangeably with `.respondTo`.",
        "name": "respondTo",
        "alias": "respondsTo",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "respondTo",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93974,
                94397
            ],
            "filename": "assertions.js",
            "lineno": 2879,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005252",
                "name": "respondTo",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "method",
                    "msg"
                ]
            },
            "vars": {
                "obj": "respondTo~obj",
                "itself": "respondTo~itself",
                "context": "respondTo~context"
            }
        },
        "undocumented": true,
        "name": "respondTo",
        "longname": "respondTo",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                94053,
                94079
            ],
            "filename": "assertions.js",
            "lineno": 2881,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005266",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "respondTo~obj",
        "kind": "member",
        "memberof": "respondTo",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                94085,
                94114
            ],
            "filename": "assertions.js",
            "lineno": 2882,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005272",
                "name": "itself",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "itself",
        "longname": "respondTo~itself",
        "kind": "member",
        "memberof": "respondTo",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                94120,
                94216
            ],
            "filename": "assertions.js",
            "lineno": 2883,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005278",
                "name": "context",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "context",
        "longname": "respondTo~context",
        "kind": "member",
        "memberof": "respondTo",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Forces all `.respondTo` assertions that follow in the chain to behave as if\n * the target is a non-function object, even if it's a function. Thus, it\n * causes `.respondTo` to assert that the target has a method with the given\n * name, rather than asserting that the target's `prototype` property has a\n * method with the given name.\n *\n *     function Cat () {}\n *     Cat.prototype.meow = function () {};\n *     Cat.hiss = function () {};\n *\n *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n *\n * @name itself\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 2897,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Forces all `.respondTo` assertions that follow in the chain to behave as if\nthe target is a non-function object, even if it's a function. Thus, it\ncauses `.respondTo` to assert that the target has a method with the given\nname, rather than asserting that the target's `prototype` property has a\nmethod with the given name.\n\n    function Cat () {}\n    Cat.prototype.meow = function () {};\n    Cat.hiss = function () {};\n\n    expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');",
        "name": "itself",
        "access": "public",
        "longname": "itself",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Invokes the given `matcher` function with the target being passed as the\n * first argument, and asserts that the value returned is truthy.\n *\n *     expect(1).to.satisfy(function(num) {\n *         return num > 0;\n *     });\n *\n * Add `.not` earlier in the chain to negate `.satisfy`.\n *\n *     expect(1).to.not.satisfy(function(num) {\n *         return num > 2;\n *     });\n *\n * `.satisfy` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect(1).to.satisfy(function(num) {\n *         return num > 2;\n *     }, 'nooo why fail??');\n *\n *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n *         return num > 2;\n *     });\n *\n * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n *\n * @name satisfy\n * @alias satisfies\n * @param {Function} matcher\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 2917,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Invokes the given `matcher` function with the target being passed as the\nfirst argument, and asserts that the value returned is truthy.\n\n    expect(1).to.satisfy(function(num) {\n        return num > 0;\n    });\n\nAdd `.not` earlier in the chain to negate `.satisfy`.\n\n    expect(1).to.not.satisfy(function(num) {\n        return num > 2;\n    });\n\n`.satisfy` accepts an optional `msg` argument which is a custom error\nmessage to show when the assertion fails. The message can also be given as\nthe second argument to `expect`.\n\n    expect(1).to.satisfy(function(num) {\n        return num > 2;\n    }, 'nooo why fail??');\n\n    expect(1, 'nooo why fail??').to.satisfy(function(num) {\n        return num > 2;\n    });\n\nThe alias `.satisfies` can be used interchangeably with `.satisfy`.",
        "name": "satisfy",
        "alias": "satisfies",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "matcher"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "satisfy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                96101,
                96445
            ],
            "filename": "assertions.js",
            "lineno": 2951,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005347",
                "name": "satisfy",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "matcher",
                    "msg"
                ]
            },
            "vars": {
                "obj": "satisfy~obj",
                "result": "satisfy~result"
            }
        },
        "undocumented": true,
        "name": "satisfy",
        "longname": "satisfy",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                96179,
                96205
            ],
            "filename": "assertions.js",
            "lineno": 2953,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005361",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "satisfy~obj",
        "kind": "member",
        "memberof": "satisfy",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                96213,
                96234
            ],
            "filename": "assertions.js",
            "lineno": 2954,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005368",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "satisfy~result",
        "kind": "member",
        "memberof": "satisfy",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target is a number that's within a given +/- `delta` range\n * of the given number `expected`. However, it's often best to assert that the\n * target is equal to its expected value.\n *\n *     // Recommended\n *     expect(1.5).to.equal(1.5);\n *\n *     // Not recommended\n *     expect(1.5).to.be.closeTo(1, 0.5);\n *     expect(1.5).to.be.closeTo(2, 0.5);\n *     expect(1.5).to.be.closeTo(1, 1);\n *\n * Add `.not` earlier in the chain to negate `.closeTo`.\n *\n *     expect(1.5).to.equal(1.5); // Recommended\n *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n *\n * `.closeTo` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n *\n * The alias `.approximately` can be used interchangeably with `.closeTo`.\n *\n * @name closeTo\n * @alias approximately\n * @param {number} expected\n * @param {number} delta\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 2967,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is a number that's within a given +/- `delta` range\nof the given number `expected`. However, it's often best to assert that the\ntarget is equal to its expected value.\n\n    // Recommended\n    expect(1.5).to.equal(1.5);\n\n    // Not recommended\n    expect(1.5).to.be.closeTo(1, 0.5);\n    expect(1.5).to.be.closeTo(2, 0.5);\n    expect(1.5).to.be.closeTo(1, 1);\n\nAdd `.not` earlier in the chain to negate `.closeTo`.\n\n    expect(1.5).to.equal(1.5); // Recommended\n    expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n\n`.closeTo` accepts an optional `msg` argument which is a custom error\nmessage to show when the assertion fails. The message can also be given as\nthe second argument to `expect`.\n\n    expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n    expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n\nThe alias `.approximately` can be used interchangeably with `.closeTo`.",
        "name": "closeTo",
        "alias": "approximately",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "expected"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "delta"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "closeTo",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                97658,
                98866
            ],
            "filename": "assertions.js",
            "lineno": 3001,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005415",
                "name": "closeTo",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "expected",
                    "delta",
                    "msg"
                ]
            },
            "vars": {
                "obj": "closeTo~obj",
                "flagMsg": "closeTo~flagMsg",
                "ssfi": "closeTo~ssfi",
                "message": "closeTo~message",
                "abs": "closeTo~abs",
                "": null,
                "strip": "closeTo~strip"
            }
        },
        "undocumented": true,
        "name": "closeTo",
        "longname": "closeTo",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                97744,
                97770
            ],
            "filename": "assertions.js",
            "lineno": 3003,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005430",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "closeTo~obj",
        "kind": "member",
        "memberof": "closeTo",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                97776,
                97807
            ],
            "filename": "assertions.js",
            "lineno": 3004,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005436",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "closeTo~flagMsg",
        "kind": "member",
        "memberof": "closeTo",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                97813,
                97838
            ],
            "filename": "assertions.js",
            "lineno": 3005,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005442",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "closeTo~ssfi",
        "kind": "member",
        "memberof": "closeTo",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                97901,
                97954
            ],
            "filename": "assertions.js",
            "lineno": 3008,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005460",
                "name": "message",
                "type": "Literal",
                "value": "A `delta` value is required for `closeTo`"
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "closeTo~message",
        "kind": "member",
        "memberof": "closeTo",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                98164,
                98220
            ],
            "filename": "assertions.js",
            "lineno": 3017,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005494",
                "name": "message",
                "type": "Literal",
                "funcscope": "closeTo",
                "value": "A `expected` value is required for `closeTo`",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "closeTo~message",
        "kind": "member",
        "memberof": "closeTo",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                98443,
                98473
            ],
            "filename": "assertions.js",
            "lineno": 3027,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005528",
                "name": "abs",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "abs",
        "longname": "closeTo~abs",
        "kind": "function",
        "memberof": "closeTo",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                98593,
                98659
            ],
            "filename": "assertions.js",
            "lineno": 3031,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005540",
                "name": "strip",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "strip",
        "longname": "closeTo~strip",
        "kind": "function",
        "memberof": "closeTo",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @param {unknown} _subset\n * @param {unknown} _superset\n * @param {unknown} cmp\n * @param {unknown} contains\n * @param {unknown} ordered\n * @returns {boolean}\n */",
        "meta": {
            "range": [
                99126,
                100034
            ],
            "filename": "assertions.js",
            "lineno": 3051,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005595",
                "name": "isSubsetOf",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "_subset",
                    "_superset",
                    "cmp",
                    "contains",
                    "ordered"
                ]
            },
            "vars": {
                "superset": "isSubsetOf~superset",
                "subset": "isSubsetOf~subset",
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "_subset"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "_superset"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "cmp"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "contains"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "ordered"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "name": "isSubsetOf",
        "longname": "isSubsetOf",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99198,
                99230
            ],
            "filename": "assertions.js",
            "lineno": 3052,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005604",
                "name": "superset",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "superset",
        "longname": "isSubsetOf~superset",
        "kind": "member",
        "memberof": "isSubsetOf",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99238,
                99266
            ],
            "filename": "assertions.js",
            "lineno": 3053,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005612",
                "name": "subset",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "subset",
        "longname": "isSubsetOf~subset",
        "kind": "member",
        "memberof": "isSubsetOf",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99348,
                99375
            ],
            "filename": "assertions.js",
            "lineno": 3056,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005634",
                "name": "superset",
                "type": "CallExpression",
                "funcscope": "isSubsetOf",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "superset",
        "longname": "isSubsetOf~superset",
        "kind": "member",
        "memberof": "isSubsetOf",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99535,
                99568
            ],
            "filename": "assertions.js",
            "lineno": 3063,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005670",
                "name": "matchIdx",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "matchIdx",
        "longname": "<anonymous>~matchIdx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target array has the same members as the given array\n * `set`.\n *\n *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n *\n * By default, members are compared using strict (`===`) equality. Add `.deep`\n * earlier in the chain to use deep equality instead. See the `deep-eql`\n * project page for info on the deep equality algorithm:\n * https://github.com/chaijs/deep-eql.\n *\n *     // Target array deeply (but not strictly) has member `{a: 1}`\n *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n *\n * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n * require that members appear in the same order.\n *\n *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n *       .but.not.ordered.members([2, 1, 3]);\n *\n * By default, both arrays must be the same size. Add `.include` earlier in\n * the chain to require that the target's members be a superset of the\n * expected members. Note that duplicates are ignored in the subset when\n * `.include` is added.\n *\n *     // Target array is a superset of [1, 2] but not identical\n *     expect([1, 2, 3]).to.include.members([1, 2]);\n *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n *\n *     // Duplicates in the subset are ignored\n *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n *\n * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n * `.include` and `.ordered` are combined, the ordering begins at the start of\n * both arrays.\n *\n *     expect([{a: 1}, {b: 2}, {c: 3}])\n *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n *\n * Add `.not` earlier in the chain to negate `.members`. However, it's\n * dangerous to do so. The problem is that it creates uncertain expectations\n * by asserting that the target array doesn't have all of the same members as\n * the given array `set` but may or may not have some of them. It's often best\n * to identify the exact output that's expected, and then write an assertion\n * that only accepts that exact output.\n *\n *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n *\n * `.members` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n *\n * @name members\n * @param {Array} set\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 3081,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target array has the same members as the given array\n`set`.\n\n    expect([1, 2, 3]).to.have.members([2, 1, 3]);\n    expect([1, 2, 2]).to.have.members([2, 1, 2]);\n\nBy default, members are compared using strict (`===`) equality. Add `.deep`\nearlier in the chain to use deep equality instead. See the `deep-eql`\nproject page for info on the deep equality algorithm:\nhttps://github.com/chaijs/deep-eql.\n\n    // Target array deeply (but not strictly) has member `{a: 1}`\n    expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n    expect([{a: 1}]).to.not.have.members([{a: 1}]);\n\nBy default, order doesn't matter. Add `.ordered` earlier in the chain to\nrequire that members appear in the same order.\n\n    expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n    expect([1, 2, 3]).to.have.members([2, 1, 3])\n      .but.not.ordered.members([2, 1, 3]);\n\nBy default, both arrays must be the same size. Add `.include` earlier in\nthe chain to require that the target's members be a superset of the\nexpected members. Note that duplicates are ignored in the subset when\n`.include` is added.\n\n    // Target array is a superset of [1, 2] but not identical\n    expect([1, 2, 3]).to.include.members([1, 2]);\n    expect([1, 2, 3]).to.not.have.members([1, 2]);\n\n    // Duplicates in the subset are ignored\n    expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n\n`.deep`, `.ordered`, and `.include` can all be combined. However, if\n`.include` and `.ordered` are combined, the ordering begins at the start of\nboth arrays.\n\n    expect([{a: 1}, {b: 2}, {c: 3}])\n      .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n      .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n\nAdd `.not` earlier in the chain to negate `.members`. However, it's\ndangerous to do so. The problem is that it creates uncertain expectations\nby asserting that the target array doesn't have all of the same members as\nthe given array `set` but may or may not have some of them. It's often best\nto identify the exact output that's expected, and then write an assertion\nthat only accepts that exact output.\n\n    expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n    expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n\n`.members` accepts an optional `msg` argument which is a custom error\nmessage to show when the assertion fails. The message can also be given as\nthe second argument to `expect`.\n\n    expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n    expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);",
        "name": "members",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "members",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102923,
                102949
            ],
            "filename": "assertions.js",
            "lineno": 3148,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005744",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "<anonymous>~obj",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102955,
                102986
            ],
            "filename": "assertions.js",
            "lineno": 3149,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005750",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "<anonymous>~flagMsg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102992,
                103017
            ],
            "filename": "assertions.js",
            "lineno": 3150,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005756",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "<anonymous>~ssfi",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103146,
                103179
            ],
            "filename": "assertions.js",
            "lineno": 3155,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005789",
                "name": "contains",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "contains",
        "longname": "<anonymous>~contains",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103187,
                103218
            ],
            "filename": "assertions.js",
            "lineno": 3156,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005796",
                "name": "ordered",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ordered",
        "longname": "<anonymous>~ordered",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103227,
                103234
            ],
            "filename": "assertions.js",
            "lineno": 3158,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005803",
                "name": "subject"
            }
        },
        "undocumented": true,
        "name": "subject",
        "longname": "<anonymous>~subject",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103236,
                103243
            ],
            "filename": "assertions.js",
            "lineno": 3158,
            "columnno": 15,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005805",
                "name": "failMsg"
            }
        },
        "undocumented": true,
        "name": "failMsg",
        "longname": "<anonymous>~failMsg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103245,
                103258
            ],
            "filename": "assertions.js",
            "lineno": 3158,
            "columnno": 24,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005807",
                "name": "failNegateMsg"
            }
        },
        "undocumented": true,
        "name": "failNegateMsg",
        "longname": "<anonymous>~failNegateMsg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103283,
                103339
            ],
            "filename": "assertions.js",
            "lineno": 3161,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005813",
                "name": "subject",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "subject",
        "longname": "<anonymous>~subject",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103345,
                103405
            ],
            "filename": "assertions.js",
            "lineno": 3162,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005820",
                "name": "failMsg",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "failMsg",
        "longname": "<anonymous>~failMsg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103411,
                103481
            ],
            "filename": "assertions.js",
            "lineno": 3163,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005828",
                "name": "failNegateMsg",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "failNegateMsg",
        "longname": "<anonymous>~failNegateMsg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103498,
                103547
            ],
            "filename": "assertions.js",
            "lineno": 3165,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005837",
                "name": "subject",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "subject",
        "longname": "<anonymous>~subject",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103553,
                103624
            ],
            "filename": "assertions.js",
            "lineno": 3166,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005844",
                "name": "failMsg",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "failMsg",
        "longname": "<anonymous>~failMsg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103630,
                103717
            ],
            "filename": "assertions.js",
            "lineno": 3167,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005852",
                "name": "failNegateMsg",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "failNegateMsg",
        "longname": "<anonymous>~failNegateMsg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103730,
                103786
            ],
            "filename": "assertions.js",
            "lineno": 3171,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005860",
                "name": "cmp",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "cmp",
        "longname": "<anonymous>~cmp",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target is an iterable, which means that it has a iterator.\n *\n *     expect([1, 2]).to.be.iterable;\n *     expect(\"foobar\").to.be.iterable;\n *\n * Add `.not` earlier in the chain to negate `.iterable`.\n *\n *     expect(1).to.not.be.iterable;\n *     expect(true).to.not.be.iterable;\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(1, 'nooo why fail??').to.be.iterable;\n *\n * @name iterable\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 3183,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is an iterable, which means that it has a iterator.\n\n    expect([1, 2]).to.be.iterable;\n    expect(\"foobar\").to.be.iterable;\n\nAdd `.not` earlier in the chain to negate `.iterable`.\n\n    expect(1).to.not.be.iterable;\n    expect(true).to.not.be.iterable;\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect(1, 'nooo why fail??').to.be.iterable;",
        "name": "iterable",
        "access": "public",
        "longname": "iterable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                104500,
                104526
            ],
            "filename": "assertions.js",
            "lineno": 3203,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005907",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "<anonymous>~obj",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target is a member of the given array `list`. However,\n * it's often best to assert that the target is equal to its expected value.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n *\n * Comparisons are performed using strict (`===`) equality.\n *\n * Add `.not` earlier in the chain to negate `.oneOf`.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n *\n * It can also be chained with `.contain` or `.include`, which will work with\n * both arrays and strings:\n *\n *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n *     expect([1,2,3]).to.contain.oneOf([3,4,5])\n *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n *\n * `.oneOf` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n *\n * @name oneOf\n * @param {Array<*>} list\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 3213,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is a member of the given array `list`. However,\nit's often best to assert that the target is equal to its expected value.\n\n    expect(1).to.equal(1); // Recommended\n    expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n\nComparisons are performed using strict (`===`) equality.\n\nAdd `.not` earlier in the chain to negate `.oneOf`.\n\n    expect(1).to.equal(1); // Recommended\n    expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n\nIt can also be chained with `.contain` or `.include`, which will work with\nboth arrays and strings:\n\n    expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n    expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n    expect([1,2,3]).to.contain.oneOf([3,4,5])\n    expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n\n`.oneOf` accepts an optional `msg` argument which is a custom error message\nto show when the assertion fails. The message can also be given as the\nsecond argument to `expect`.\n\n    expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n    expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);",
        "name": "oneOf",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<*>"
                    ]
                },
                "name": "list"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "oneOf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                105956,
                107098
            ],
            "filename": "assertions.js",
            "lineno": 3247,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005930",
                "name": "oneOf",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "list",
                    "msg"
                ]
            },
            "vars": {
                "expected": "oneOf~expected",
                "flagMsg": "oneOf~flagMsg",
                "ssfi": "oneOf~ssfi",
                "contains": "oneOf~contains",
                "isDeep": "oneOf~isDeep",
                "eql": "oneOf~eql",
                "": null
            }
        },
        "undocumented": true,
        "name": "oneOf",
        "longname": "oneOf",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                106029,
                106060
            ],
            "filename": "assertions.js",
            "lineno": 3249,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005944",
                "name": "expected",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "expected",
        "longname": "oneOf~expected",
        "kind": "member",
        "memberof": "oneOf",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                106066,
                106097
            ],
            "filename": "assertions.js",
            "lineno": 3250,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005950",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "oneOf~flagMsg",
        "kind": "member",
        "memberof": "oneOf",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                106103,
                106128
            ],
            "filename": "assertions.js",
            "lineno": 3251,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005956",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "oneOf~ssfi",
        "kind": "member",
        "memberof": "oneOf",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                106134,
                106167
            ],
            "filename": "assertions.js",
            "lineno": 3252,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005962",
                "name": "contains",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "contains",
        "longname": "oneOf~contains",
        "kind": "member",
        "memberof": "oneOf",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                106173,
                106200
            ],
            "filename": "assertions.js",
            "lineno": 3253,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005968",
                "name": "isDeep",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isDeep",
        "longname": "oneOf~isDeep",
        "kind": "member",
        "memberof": "oneOf",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                106206,
                106229
            ],
            "filename": "assertions.js",
            "lineno": 3254,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100005974",
                "name": "eql",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "eql",
        "longname": "oneOf~eql",
        "kind": "member",
        "memberof": "oneOf",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * When one argument is provided, `.change` asserts that the given function\n * `subject` returns a different value when it's invoked before the target\n * function compared to when it's invoked afterward. However, it's often best\n * to assert that `subject` is equal to its expected value.\n *\n *     var dots = ''\n *     , addDot = function () { dots += '.'; }\n *     , getDots = function () { return dots; };\n *\n *     // Recommended\n *     expect(getDots()).to.equal('');\n *     addDot();\n *     expect(getDots()).to.equal('.');\n *\n *     // Not recommended\n *     expect(addDot).to.change(getDots);\n *\n * When two arguments are provided, `.change` asserts that the value of the\n * given object `subject`'s `prop` property is different before invoking the\n * target function compared to afterward.\n *\n *     var myObj = {dots: ''}\n *     , addDot = function () { myObj.dots += '.'; };\n *\n *     // Recommended\n *     expect(myObj).to.have.property('dots', '');\n *     addDot();\n *     expect(myObj).to.have.property('dots', '.');\n *\n *     // Not recommended\n *     expect(addDot).to.change(myObj, 'dots');\n *\n * Strict (`===`) equality is used to compare before and after values.\n *\n * Add `.not` earlier in the chain to negate `.change`.\n *\n *     var dots = ''\n *     , noop = function () {}\n *     , getDots = function () { return dots; };\n *\n *     expect(noop).to.not.change(getDots);\n *\n *     var myObj = {dots: ''}\n *     , noop = function () {};\n *\n *     expect(noop).to.not.change(myObj, 'dots');\n *\n * `.change` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`. When not providing two arguments, always\n * use the second form.\n *\n *     var myObj = {dots: ''}\n *     , addDot = function () { myObj.dots += '.'; };\n *\n *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n *\n *     var dots = ''\n *     , addDot = function () { dots += '.'; }\n *     , getDots = function () { return dots; };\n *\n *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n *\n * `.change` also causes all `.by` assertions that follow in the chain to\n * assert how much a numeric subject was increased or decreased by. However,\n * it's dangerous to use `.change.by`. The problem is that it creates\n * uncertain expectations by asserting that the subject either increases by\n * the given delta, or that it decreases by the given delta. It's often best\n * to identify the exact output that's expected, and then write an assertion\n * that only accepts that exact output.\n *\n *     var myObj = {val: 1}\n *     , addTwo = function () { myObj.val += 2; }\n *     , subtractTwo = function () { myObj.val -= 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n *\n *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n *\n * The alias `.changes` can be used interchangeably with `.change`.\n *\n * @name change\n * @alias changes\n * @param {string} subject\n * @param {string} prop name _optional_\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 3292,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "When one argument is provided, `.change` asserts that the given function\n`subject` returns a different value when it's invoked before the target\nfunction compared to when it's invoked afterward. However, it's often best\nto assert that `subject` is equal to its expected value.\n\n    var dots = ''\n    , addDot = function () { dots += '.'; }\n    , getDots = function () { return dots; };\n\n    // Recommended\n    expect(getDots()).to.equal('');\n    addDot();\n    expect(getDots()).to.equal('.');\n\n    // Not recommended\n    expect(addDot).to.change(getDots);\n\nWhen two arguments are provided, `.change` asserts that the value of the\ngiven object `subject`'s `prop` property is different before invoking the\ntarget function compared to afterward.\n\n    var myObj = {dots: ''}\n    , addDot = function () { myObj.dots += '.'; };\n\n    // Recommended\n    expect(myObj).to.have.property('dots', '');\n    addDot();\n    expect(myObj).to.have.property('dots', '.');\n\n    // Not recommended\n    expect(addDot).to.change(myObj, 'dots');\n\nStrict (`===`) equality is used to compare before and after values.\n\nAdd `.not` earlier in the chain to negate `.change`.\n\n    var dots = ''\n    , noop = function () {}\n    , getDots = function () { return dots; };\n\n    expect(noop).to.not.change(getDots);\n\n    var myObj = {dots: ''}\n    , noop = function () {};\n\n    expect(noop).to.not.change(myObj, 'dots');\n\n`.change` accepts an optional `msg` argument which is a custom error\nmessage to show when the assertion fails. The message can also be given as\nthe second argument to `expect`. When not providing two arguments, always\nuse the second form.\n\n    var myObj = {dots: ''}\n    , addDot = function () { myObj.dots += '.'; };\n\n    expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n\n    var dots = ''\n    , addDot = function () { dots += '.'; }\n    , getDots = function () { return dots; };\n\n    expect(addDot, 'nooo why fail??').to.not.change(getDots);\n\n`.change` also causes all `.by` assertions that follow in the chain to\nassert how much a numeric subject was increased or decreased by. However,\nit's dangerous to use `.change.by`. The problem is that it creates\nuncertain expectations by asserting that the subject either increases by\nthe given delta, or that it decreases by the given delta. It's often best\nto identify the exact output that's expected, and then write an assertion\nthat only accepts that exact output.\n\n    var myObj = {val: 1}\n    , addTwo = function () { myObj.val += 2; }\n    , subtractTwo = function () { myObj.val -= 2; };\n\n    expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n    expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n\n    expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n    expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n\nThe alias `.changes` can be used interchangeably with `.change`.",
        "name": "change",
        "alias": "changes",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "subject"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "change",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                110410,
                111455
            ],
            "filename": "assertions.js",
            "lineno": 3383,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006073",
                "name": "assertChanges",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "subject",
                    "prop",
                    "msg"
                ]
            },
            "vars": {
                "fn": "assertChanges~fn",
                "flagMsg": "assertChanges~flagMsg",
                "ssfi": "assertChanges~ssfi",
                "initial": "assertChanges~initial",
                "final": "assertChanges~final",
                "msgObj": "assertChanges~msgObj"
            }
        },
        "undocumented": true,
        "name": "assertChanges",
        "longname": "assertChanges",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                110500,
                110525
            ],
            "filename": "assertions.js",
            "lineno": 3385,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006088",
                "name": "fn",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "fn",
        "longname": "assertChanges~fn",
        "kind": "member",
        "memberof": "assertChanges",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                110531,
                110562
            ],
            "filename": "assertions.js",
            "lineno": 3386,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006094",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "assertChanges~flagMsg",
        "kind": "member",
        "memberof": "assertChanges",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                110568,
                110593
            ],
            "filename": "assertions.js",
            "lineno": 3387,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006100",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "assertChanges~ssfi",
        "kind": "member",
        "memberof": "assertChanges",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                110661,
                110668
            ],
            "filename": "assertions.js",
            "lineno": 3390,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006120",
                "name": "initial"
            }
        },
        "undocumented": true,
        "name": "initial",
        "longname": "assertChanges~initial",
        "kind": "member",
        "memberof": "assertChanges",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                110755,
                110774
            ],
            "filename": "assertions.js",
            "lineno": 3393,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006140",
                "name": "initial",
                "type": "CallExpression",
                "funcscope": "assertChanges",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "initial",
        "longname": "assertChanges~initial",
        "kind": "member",
        "memberof": "assertChanges",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                110863,
                110886
            ],
            "filename": "assertions.js",
            "lineno": 3396,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006161",
                "name": "initial",
                "type": "MemberExpression",
                "funcscope": "assertChanges",
                "value": "subject[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "initial",
        "longname": "assertChanges~initial",
        "kind": "member",
        "memberof": "assertChanges",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                110908,
                110979
            ],
            "filename": "assertions.js",
            "lineno": 3401,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006170",
                "name": "final",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "final",
        "longname": "assertChanges~final",
        "kind": "member",
        "memberof": "assertChanges",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                110987,
                111054
            ],
            "filename": "assertions.js",
            "lineno": 3402,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006186",
                "name": "msgObj",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "msgObj",
        "longname": "assertChanges~msgObj",
        "kind": "member",
        "memberof": "assertChanges",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * When one argument is provided, `.increase` asserts that the given function\n * `subject` returns a greater number when it's invoked after invoking the\n * target function compared to when it's invoked beforehand. `.increase` also\n * causes all `.by` assertions that follow in the chain to assert how much\n * greater of a number is returned. It's often best to assert that the return\n * value increased by the expected amount, rather than asserting it increased\n * by any amount.\n *\n *     var val = 1\n *     , addTwo = function () { val += 2; }\n *     , getVal = function () { return val; };\n *\n *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n *     expect(addTwo).to.increase(getVal); // Not recommended\n *\n * When two arguments are provided, `.increase` asserts that the value of the\n * given object `subject`'s `prop` property is greater after invoking the\n * target function compared to beforehand.\n *\n *     var myObj = {val: 1}\n *     , addTwo = function () { myObj.val += 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.increase`. However, it's\n * dangerous to do so. The problem is that it creates uncertain expectations\n * by asserting that the subject either decreases, or that it stays the same.\n * It's often best to identify the exact output that's expected, and then\n * write an assertion that only accepts that exact output.\n *\n * When the subject is expected to decrease, it's often best to assert that it\n * decreased by the expected amount.\n *\n *     var myObj = {val: 1}\n *     , subtractTwo = function () { myObj.val -= 2; };\n *\n *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n *\n * When the subject is expected to stay the same, it's often best to assert\n * exactly that.\n *\n *     var myObj = {val: 1}\n *     , noop = function () {};\n *\n *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n *\n * `.increase` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`. When not providing two arguments, always\n * use the second form.\n *\n *     var myObj = {val: 1}\n *     , noop = function () {};\n *\n *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n *\n *     var val = 1\n *     , noop = function () {}\n *     , getVal = function () { return val; };\n *\n *     expect(noop, 'nooo why fail??').to.increase(getVal);\n *\n * The alias `.increases` can be used interchangeably with `.increase`.\n *\n * @name increase\n * @alias increases\n * @param {string | Function} subject\n * @param {string} prop name _optional_\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 3421,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "When one argument is provided, `.increase` asserts that the given function\n`subject` returns a greater number when it's invoked after invoking the\ntarget function compared to when it's invoked beforehand. `.increase` also\ncauses all `.by` assertions that follow in the chain to assert how much\ngreater of a number is returned. It's often best to assert that the return\nvalue increased by the expected amount, rather than asserting it increased\nby any amount.\n\n    var val = 1\n    , addTwo = function () { val += 2; }\n    , getVal = function () { return val; };\n\n    expect(addTwo).to.increase(getVal).by(2); // Recommended\n    expect(addTwo).to.increase(getVal); // Not recommended\n\nWhen two arguments are provided, `.increase` asserts that the value of the\ngiven object `subject`'s `prop` property is greater after invoking the\ntarget function compared to beforehand.\n\n    var myObj = {val: 1}\n    , addTwo = function () { myObj.val += 2; };\n\n    expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n    expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n\nAdd `.not` earlier in the chain to negate `.increase`. However, it's\ndangerous to do so. The problem is that it creates uncertain expectations\nby asserting that the subject either decreases, or that it stays the same.\nIt's often best to identify the exact output that's expected, and then\nwrite an assertion that only accepts that exact output.\n\nWhen the subject is expected to decrease, it's often best to assert that it\ndecreased by the expected amount.\n\n    var myObj = {val: 1}\n    , subtractTwo = function () { myObj.val -= 2; };\n\n    expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n    expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n\nWhen the subject is expected to stay the same, it's often best to assert\nexactly that.\n\n    var myObj = {val: 1}\n    , noop = function () {};\n\n    expect(noop).to.not.change(myObj, 'val'); // Recommended\n    expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n\n`.increase` accepts an optional `msg` argument which is a custom error\nmessage to show when the assertion fails. The message can also be given as\nthe second argument to `expect`. When not providing two arguments, always\nuse the second form.\n\n    var myObj = {val: 1}\n    , noop = function () {};\n\n    expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n\n    var val = 1\n    , noop = function () {}\n    , getVal = function () { return val; };\n\n    expect(noop, 'nooo why fail??').to.increase(getVal);\n\nThe alias `.increases` can be used interchangeably with `.increase`.",
        "name": "increase",
        "alias": "increases",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "function"
                    ]
                },
                "name": "subject"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "increase",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                114512,
                115612
            ],
            "filename": "assertions.js",
            "lineno": 3496,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006264",
                "name": "assertIncreases",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "subject",
                    "prop",
                    "msg"
                ]
            },
            "vars": {
                "fn": "assertIncreases~fn",
                "flagMsg": "assertIncreases~flagMsg",
                "ssfi": "assertIncreases~ssfi",
                "initial": "assertIncreases~initial",
                "final": "assertIncreases~final",
                "msgObj": "assertIncreases~msgObj"
            }
        },
        "undocumented": true,
        "name": "assertIncreases",
        "longname": "assertIncreases",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                114604,
                114629
            ],
            "filename": "assertions.js",
            "lineno": 3498,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006279",
                "name": "fn",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "fn",
        "longname": "assertIncreases~fn",
        "kind": "member",
        "memberof": "assertIncreases",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                114635,
                114666
            ],
            "filename": "assertions.js",
            "lineno": 3499,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006285",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "assertIncreases~flagMsg",
        "kind": "member",
        "memberof": "assertIncreases",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                114672,
                114697
            ],
            "filename": "assertions.js",
            "lineno": 3500,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006291",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "assertIncreases~ssfi",
        "kind": "member",
        "memberof": "assertIncreases",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                114765,
                114772
            ],
            "filename": "assertions.js",
            "lineno": 3503,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006311",
                "name": "initial"
            }
        },
        "undocumented": true,
        "name": "initial",
        "longname": "assertIncreases~initial",
        "kind": "member",
        "memberof": "assertIncreases",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                114859,
                114878
            ],
            "filename": "assertions.js",
            "lineno": 3506,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006331",
                "name": "initial",
                "type": "CallExpression",
                "funcscope": "assertIncreases",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "initial",
        "longname": "assertIncreases~initial",
        "kind": "member",
        "memberof": "assertIncreases",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                114967,
                114990
            ],
            "filename": "assertions.js",
            "lineno": 3509,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006352",
                "name": "initial",
                "type": "MemberExpression",
                "funcscope": "assertIncreases",
                "value": "subject[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "initial",
        "longname": "assertIncreases~initial",
        "kind": "member",
        "memberof": "assertIncreases",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                115118,
                115189
            ],
            "filename": "assertions.js",
            "lineno": 3517,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006374",
                "name": "final",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "final",
        "longname": "assertIncreases~final",
        "kind": "member",
        "memberof": "assertIncreases",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                115197,
                115264
            ],
            "filename": "assertions.js",
            "lineno": 3518,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006390",
                "name": "msgObj",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "msgObj",
        "longname": "assertIncreases~msgObj",
        "kind": "member",
        "memberof": "assertIncreases",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * When one argument is provided, `.decrease` asserts that the given function\n * `subject` returns a lesser number when it's invoked after invoking the\n * target function compared to when it's invoked beforehand. `.decrease` also\n * causes all `.by` assertions that follow in the chain to assert how much\n * lesser of a number is returned. It's often best to assert that the return\n * value decreased by the expected amount, rather than asserting it decreased\n * by any amount.\n *\n *     var val = 1\n *       , subtractTwo = function () { val -= 2; }\n *       , getVal = function () { return val; };\n *\n *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n *\n * When two arguments are provided, `.decrease` asserts that the value of the\n * given object `subject`'s `prop` property is lesser after invoking the\n * target function compared to beforehand.\n *\n *     var myObj = {val: 1}\n *       , subtractTwo = function () { myObj.val -= 2; };\n *\n *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n * dangerous to do so. The problem is that it creates uncertain expectations\n * by asserting that the subject either increases, or that it stays the same.\n * It's often best to identify the exact output that's expected, and then\n * write an assertion that only accepts that exact output.\n *\n * When the subject is expected to increase, it's often best to assert that it\n * increased by the expected amount.\n *\n *     var myObj = {val: 1}\n *       , addTwo = function () { myObj.val += 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n *\n * When the subject is expected to stay the same, it's often best to assert\n * exactly that.\n *\n *     var myObj = {val: 1}\n *       , noop = function () {};\n *\n *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n *\n * `.decrease` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`. When not providing two arguments, always\n * use the second form.\n *\n *     var myObj = {val: 1}\n *       , noop = function () {};\n *\n *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n *\n *     var val = 1\n *       , noop = function () {}\n *       , getVal = function () { return val; };\n *\n *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n *\n * The alias `.decreases` can be used interchangeably with `.decrease`.\n *\n * @name decrease\n * @alias decreases\n * @param {string | Function} subject\n * @param {string} prop name _optional_\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 3536,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "When one argument is provided, `.decrease` asserts that the given function\n`subject` returns a lesser number when it's invoked after invoking the\ntarget function compared to when it's invoked beforehand. `.decrease` also\ncauses all `.by` assertions that follow in the chain to assert how much\nlesser of a number is returned. It's often best to assert that the return\nvalue decreased by the expected amount, rather than asserting it decreased\nby any amount.\n\n    var val = 1\n      , subtractTwo = function () { val -= 2; }\n      , getVal = function () { return val; };\n\n    expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n    expect(subtractTwo).to.decrease(getVal); // Not recommended\n\nWhen two arguments are provided, `.decrease` asserts that the value of the\ngiven object `subject`'s `prop` property is lesser after invoking the\ntarget function compared to beforehand.\n\n    var myObj = {val: 1}\n      , subtractTwo = function () { myObj.val -= 2; };\n\n    expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n    expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n\nAdd `.not` earlier in the chain to negate `.decrease`. However, it's\ndangerous to do so. The problem is that it creates uncertain expectations\nby asserting that the subject either increases, or that it stays the same.\nIt's often best to identify the exact output that's expected, and then\nwrite an assertion that only accepts that exact output.\n\nWhen the subject is expected to increase, it's often best to assert that it\nincreased by the expected amount.\n\n    var myObj = {val: 1}\n      , addTwo = function () { myObj.val += 2; };\n\n    expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n    expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n\nWhen the subject is expected to stay the same, it's often best to assert\nexactly that.\n\n    var myObj = {val: 1}\n      , noop = function () {};\n\n    expect(noop).to.not.change(myObj, 'val'); // Recommended\n    expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n\n`.decrease` accepts an optional `msg` argument which is a custom error\nmessage to show when the assertion fails. The message can also be given as\nthe second argument to `expect`. When not providing two arguments, always\nuse the second form.\n\n    var myObj = {val: 1}\n      , noop = function () {};\n\n    expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n\n    var val = 1\n      , noop = function () {}\n      , getVal = function () { return val; };\n\n    expect(noop, 'nooo why fail??').to.decrease(getVal);\n\nThe alias `.decreases` can be used interchangeably with `.decrease`.",
        "name": "decrease",
        "alias": "decreases",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "function"
                    ]
                },
                "name": "subject"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "decrease",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                118705,
                119805
            ],
            "filename": "assertions.js",
            "lineno": 3611,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006470",
                "name": "assertDecreases",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "subject",
                    "prop",
                    "msg"
                ]
            },
            "vars": {
                "fn": "assertDecreases~fn",
                "flagMsg": "assertDecreases~flagMsg",
                "ssfi": "assertDecreases~ssfi",
                "initial": "assertDecreases~initial",
                "final": "assertDecreases~final",
                "msgObj": "assertDecreases~msgObj"
            }
        },
        "undocumented": true,
        "name": "assertDecreases",
        "longname": "assertDecreases",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                118797,
                118822
            ],
            "filename": "assertions.js",
            "lineno": 3613,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006485",
                "name": "fn",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "fn",
        "longname": "assertDecreases~fn",
        "kind": "member",
        "memberof": "assertDecreases",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                118828,
                118859
            ],
            "filename": "assertions.js",
            "lineno": 3614,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006491",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "assertDecreases~flagMsg",
        "kind": "member",
        "memberof": "assertDecreases",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                118865,
                118890
            ],
            "filename": "assertions.js",
            "lineno": 3615,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006497",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "assertDecreases~ssfi",
        "kind": "member",
        "memberof": "assertDecreases",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                118958,
                118965
            ],
            "filename": "assertions.js",
            "lineno": 3618,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006517",
                "name": "initial"
            }
        },
        "undocumented": true,
        "name": "initial",
        "longname": "assertDecreases~initial",
        "kind": "member",
        "memberof": "assertDecreases",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119052,
                119071
            ],
            "filename": "assertions.js",
            "lineno": 3621,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006537",
                "name": "initial",
                "type": "CallExpression",
                "funcscope": "assertDecreases",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "initial",
        "longname": "assertDecreases~initial",
        "kind": "member",
        "memberof": "assertDecreases",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119160,
                119183
            ],
            "filename": "assertions.js",
            "lineno": 3624,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006558",
                "name": "initial",
                "type": "MemberExpression",
                "funcscope": "assertDecreases",
                "value": "subject[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "initial",
        "longname": "assertDecreases~initial",
        "kind": "member",
        "memberof": "assertDecreases",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119311,
                119382
            ],
            "filename": "assertions.js",
            "lineno": 3632,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006580",
                "name": "final",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "final",
        "longname": "assertDecreases~final",
        "kind": "member",
        "memberof": "assertDecreases",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119390,
                119457
            ],
            "filename": "assertions.js",
            "lineno": 3633,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006596",
                "name": "msgObj",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "msgObj",
        "longname": "assertDecreases~msgObj",
        "kind": "member",
        "memberof": "assertDecreases",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * When following an `.increase` assertion in the chain, `.by` asserts that\n * the subject of the `.increase` assertion increased by the given `delta`.\n *\n *     var myObj = {val: 1}\n *       , addTwo = function () { myObj.val += 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(2);\n *\n * When following a `.decrease` assertion in the chain, `.by` asserts that the\n * subject of the `.decrease` assertion decreased by the given `delta`.\n *\n *     var myObj = {val: 1}\n *       , subtractTwo = function () { myObj.val -= 2; };\n *\n *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n *\n * When following a `.change` assertion in the chain, `.by` asserts that the\n * subject of the `.change` assertion either increased or decreased by the\n * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n * that it creates uncertain expectations. It's often best to identify the\n * exact output that's expected, and then write an assertion that only accepts\n * that exact output.\n *\n *     var myObj = {val: 1}\n *       , addTwo = function () { myObj.val += 2; }\n *       , subtractTwo = function () { myObj.val -= 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n *\n *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n * to assert that the subject changed by its expected delta, rather than\n * asserting that it didn't change by one of countless unexpected deltas.\n *\n *     var myObj = {val: 1}\n *       , addTwo = function () { myObj.val += 2; };\n *\n *     // Recommended\n *     expect(addTwo).to.increase(myObj, 'val').by(2);\n *\n *     // Not recommended\n *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n *\n * `.by` accepts an optional `msg` argument which is a custom error message to\n * show when the assertion fails. The message can also be given as the second\n * argument to `expect`.\n *\n *     var myObj = {val: 1}\n *       , addTwo = function () { myObj.val += 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n *\n * @name by\n * @param {number} delta\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 3651,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "When following an `.increase` assertion in the chain, `.by` asserts that\nthe subject of the `.increase` assertion increased by the given `delta`.\n\n    var myObj = {val: 1}\n      , addTwo = function () { myObj.val += 2; };\n\n    expect(addTwo).to.increase(myObj, 'val').by(2);\n\nWhen following a `.decrease` assertion in the chain, `.by` asserts that the\nsubject of the `.decrease` assertion decreased by the given `delta`.\n\n    var myObj = {val: 1}\n      , subtractTwo = function () { myObj.val -= 2; };\n\n    expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n\nWhen following a `.change` assertion in the chain, `.by` asserts that the\nsubject of the `.change` assertion either increased or decreased by the\ngiven `delta`. However, it's dangerous to use `.change.by`. The problem is\nthat it creates uncertain expectations. It's often best to identify the\nexact output that's expected, and then write an assertion that only accepts\nthat exact output.\n\n    var myObj = {val: 1}\n      , addTwo = function () { myObj.val += 2; }\n      , subtractTwo = function () { myObj.val -= 2; };\n\n    expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n    expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n\n    expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n    expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n\nAdd `.not` earlier in the chain to negate `.by`. However, it's often best\nto assert that the subject changed by its expected delta, rather than\nasserting that it didn't change by one of countless unexpected deltas.\n\n    var myObj = {val: 1}\n      , addTwo = function () { myObj.val += 2; };\n\n    // Recommended\n    expect(addTwo).to.increase(myObj, 'val').by(2);\n\n    // Not recommended\n    expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n\n`.by` accepts an optional `msg` argument which is a custom error message to\nshow when the assertion fails. The message can also be given as the second\nargument to `expect`.\n\n    var myObj = {val: 1}\n      , addTwo = function () { myObj.val += 2; };\n\n    expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n    expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);",
        "name": "by",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "delta"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "by",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                122355,
                123000
            ],
            "filename": "assertions.js",
            "lineno": 3713,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006676",
                "name": "assertDelta",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "delta",
                    "msg"
                ]
            },
            "vars": {
                "msgObj": "assertDelta~msgObj",
                "initial": "assertDelta~initial",
                "final": "assertDelta~final",
                "behavior": "assertDelta~behavior",
                "realDelta": "assertDelta~realDelta",
                "expression": "assertDelta~expression"
            }
        },
        "undocumented": true,
        "name": "assertDelta",
        "longname": "assertDelta",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                122436,
                122470
            ],
            "filename": "assertions.js",
            "lineno": 3716,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006690",
                "name": "msgObj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "msgObj",
        "longname": "assertDelta~msgObj",
        "kind": "member",
        "memberof": "assertDelta",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                122478,
                122519
            ],
            "filename": "assertions.js",
            "lineno": 3717,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006697",
                "name": "initial",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "initial",
        "longname": "assertDelta~initial",
        "kind": "member",
        "memberof": "assertDelta",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                122527,
                122564
            ],
            "filename": "assertions.js",
            "lineno": 3718,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006704",
                "name": "final",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "final",
        "longname": "assertDelta~final",
        "kind": "member",
        "memberof": "assertDelta",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                122572,
                122610
            ],
            "filename": "assertions.js",
            "lineno": 3719,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006711",
                "name": "behavior",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "behavior",
        "longname": "assertDelta~behavior",
        "kind": "member",
        "memberof": "assertDelta",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                122618,
                122653
            ],
            "filename": "assertions.js",
            "lineno": 3720,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006718",
                "name": "realDelta",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "realDelta",
        "longname": "assertDelta~realDelta",
        "kind": "member",
        "memberof": "assertDelta",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                122662,
                122672
            ],
            "filename": "assertions.js",
            "lineno": 3722,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006725",
                "name": "expression"
            }
        },
        "undocumented": true,
        "name": "expression",
        "longname": "assertDelta~expression",
        "kind": "member",
        "memberof": "assertDelta",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                122709,
                122767
            ],
            "filename": "assertions.js",
            "lineno": 3724,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006733",
                "name": "expression",
                "type": "BinaryExpression",
                "funcscope": "assertDelta",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "expression",
        "longname": "assertDelta~expression",
        "kind": "member",
        "memberof": "assertDelta",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                122784,
                122826
            ],
            "filename": "assertions.js",
            "lineno": 3726,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006750",
                "name": "expression",
                "type": "BinaryExpression",
                "funcscope": "assertDelta",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "expression",
        "longname": "assertDelta~expression",
        "kind": "member",
        "memberof": "assertDelta",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that the target is extensible, which means that new properties can\n * be added to it. Primitives are never extensible.\n *\n *     expect({a: 1}).to.be.extensible;\n *\n * Add `.not` earlier in the chain to negate `.extensible`.\n *\n *     var nonExtensibleObject = Object.preventExtensions({})\n *     , sealedObject = Object.seal({})\n *     , frozenObject = Object.freeze({});\n *\n *     expect(nonExtensibleObject).to.not.be.extensible;\n *     expect(sealedObject).to.not.be.extensible;\n *     expect(frozenObject).to.not.be.extensible;\n *     expect(1).to.not.be.extensible;\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(1, 'nooo why fail??').to.be.extensible;\n *\n * @name extensible\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 3738,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is extensible, which means that new properties can\nbe added to it. Primitives are never extensible.\n\n    expect({a: 1}).to.be.extensible;\n\nAdd `.not` earlier in the chain to negate `.extensible`.\n\n    var nonExtensibleObject = Object.preventExtensions({})\n    , sealedObject = Object.seal({})\n    , frozenObject = Object.freeze({});\n\n    expect(nonExtensibleObject).to.not.be.extensible;\n    expect(sealedObject).to.not.be.extensible;\n    expect(frozenObject).to.not.be.extensible;\n    expect(1).to.not.be.extensible;\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect(1, 'nooo why fail??').to.be.extensible;",
        "name": "extensible",
        "access": "public",
        "longname": "extensible",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                123859,
                123885
            ],
            "filename": "assertions.js",
            "lineno": 3763,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006803",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "<anonymous>~obj",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                124275,
                124337
            ],
            "filename": "assertions.js",
            "lineno": 3770,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006810",
                "name": "isExtensible",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isExtensible",
        "longname": "<anonymous>~isExtensible",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target is sealed, which means that new properties can't be\n * added to it, and its existing properties can't be reconfigured or deleted.\n * However, it's possible that its existing properties can still be reassigned\n * to different values. Primitives are always sealed.\n *\n *     var sealedObject = Object.seal({});\n *     var frozenObject = Object.freeze({});\n *\n *     expect(sealedObject).to.be.sealed;\n *     expect(frozenObject).to.be.sealed;\n *     expect(1).to.be.sealed;\n *\n * Add `.not` earlier in the chain to negate `.sealed`.\n *\n *     expect({a: 1}).to.not.be.sealed;\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n *\n * @name sealed\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 3779,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is sealed, which means that new properties can't be\nadded to it, and its existing properties can't be reconfigured or deleted.\nHowever, it's possible that its existing properties can still be reassigned\nto different values. Primitives are always sealed.\n\n    var sealedObject = Object.seal({});\n    var frozenObject = Object.freeze({});\n\n    expect(sealedObject).to.be.sealed;\n    expect(frozenObject).to.be.sealed;\n    expect(1).to.be.sealed;\n\nAdd `.not` earlier in the chain to negate `.sealed`.\n\n    expect({a: 1}).to.not.be.sealed;\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect({a: 1}, 'nooo why fail??').to.be.sealed;",
        "name": "sealed",
        "access": "public",
        "longname": "sealed",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                125296,
                125322
            ],
            "filename": "assertions.js",
            "lineno": 3804,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006840",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "<anonymous>~obj",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                125703,
                125763
            ],
            "filename": "assertions.js",
            "lineno": 3811,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006847",
                "name": "isSealed",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isSealed",
        "longname": "<anonymous>~isSealed",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target is frozen, which means that new properties can't be\n * added to it, and its existing properties can't be reassigned to different\n * values, reconfigured, or deleted. Primitives are always frozen.\n *\n *     var frozenObject = Object.freeze({});\n *\n *     expect(frozenObject).to.be.frozen;\n *     expect(1).to.be.frozen;\n *\n * Add `.not` earlier in the chain to negate `.frozen`.\n *\n *     expect({a: 1}).to.not.be.frozen;\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n *\n * @name frozen\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 3820,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is frozen, which means that new properties can't be\nadded to it, and its existing properties can't be reassigned to different\nvalues, reconfigured, or deleted. Primitives are always frozen.\n\n    var frozenObject = Object.freeze({});\n\n    expect(frozenObject).to.be.frozen;\n    expect(1).to.be.frozen;\n\nAdd `.not` earlier in the chain to negate `.frozen`.\n\n    expect({a: 1}).to.not.be.frozen;\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect({a: 1}, 'nooo why fail??').to.be.frozen;",
        "name": "frozen",
        "access": "public",
        "longname": "frozen",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                126558,
                126584
            ],
            "filename": "assertions.js",
            "lineno": 3842,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006878",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "<anonymous>~obj",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                126965,
                127025
            ],
            "filename": "assertions.js",
            "lineno": 3849,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006885",
                "name": "isFrozen",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isFrozen",
        "longname": "<anonymous>~isFrozen",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target is a number, and isn't `NaN` or positive/negative\n * `Infinity`.\n *\n *     expect(1).to.be.finite;\n *\n * Add `.not` earlier in the chain to negate `.finite`. However, it's\n * dangerous to do so. The problem is that it creates uncertain expectations\n * by asserting that the subject either isn't a number, or that it's `NaN`, or\n * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n * best to identify the exact output that's expected, and then write an\n * assertion that only accepts that exact output.\n *\n * When the target isn't expected to be a number, it's often best to assert\n * that it's the expected type, rather than asserting that it isn't one of\n * many unexpected types.\n *\n *     expect('foo').to.be.a('string'); // Recommended\n *     expect('foo').to.not.be.finite; // Not recommended\n *\n * When the target is expected to be `NaN`, it's often best to assert exactly\n * that.\n *\n *     expect(NaN).to.be.NaN; // Recommended\n *     expect(NaN).to.not.be.finite; // Not recommended\n *\n * When the target is expected to be positive infinity, it's often best to\n * assert exactly that.\n *\n *     expect(Infinity).to.equal(Infinity); // Recommended\n *     expect(Infinity).to.not.be.finite; // Not recommended\n *\n * When the target is expected to be negative infinity, it's often best to\n * assert exactly that.\n *\n *     expect(-Infinity).to.equal(-Infinity); // Recommended\n *     expect(-Infinity).to.not.be.finite; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect('foo', 'nooo why fail??').to.be.finite;\n *\n * @name finite\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 3858,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target is a number, and isn't `NaN` or positive/negative\n`Infinity`.\n\n    expect(1).to.be.finite;\n\nAdd `.not` earlier in the chain to negate `.finite`. However, it's\ndangerous to do so. The problem is that it creates uncertain expectations\nby asserting that the subject either isn't a number, or that it's `NaN`, or\nthat it's positive `Infinity`, or that it's negative `Infinity`. It's often\nbest to identify the exact output that's expected, and then write an\nassertion that only accepts that exact output.\n\nWhen the target isn't expected to be a number, it's often best to assert\nthat it's the expected type, rather than asserting that it isn't one of\nmany unexpected types.\n\n    expect('foo').to.be.a('string'); // Recommended\n    expect('foo').to.not.be.finite; // Not recommended\n\nWhen the target is expected to be `NaN`, it's often best to assert exactly\nthat.\n\n    expect(NaN).to.be.NaN; // Recommended\n    expect(NaN).to.not.be.finite; // Not recommended\n\nWhen the target is expected to be positive infinity, it's often best to\nassert exactly that.\n\n    expect(Infinity).to.equal(Infinity); // Recommended\n    expect(Infinity).to.not.be.finite; // Not recommended\n\nWhen the target is expected to be negative infinity, it's often best to\nassert exactly that.\n\n    expect(-Infinity).to.equal(-Infinity); // Recommended\n    expect(-Infinity).to.not.be.finite; // Not recommended\n\nA custom error message can be given as the second argument to `expect`.\n\n    expect('foo', 'nooo why fail??').to.be.finite;",
        "name": "finite",
        "access": "public",
        "longname": "finite",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                128873,
                128899
            ],
            "filename": "assertions.js",
            "lineno": 3904,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006917",
                "name": "obj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "<anonymous>~obj",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * A subset-aware compare function\n *\n * @param {unknown} expected\n * @param {unknown} actual\n * @returns {boolean}\n */",
        "meta": {
            "range": [
                129193,
                130345
            ],
            "filename": "assertions.js",
            "lineno": 3920,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100006938",
                "name": "compareSubset",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "expected",
                    "actual"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "A subset-aware compare function",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "expected"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "actual"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "name": "compareSubset",
        "longname": "compareSubset",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                129955,
                129984
            ],
            "filename": "assertions.js",
            "lineno": 3954,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100007053",
                "name": "expectedValue",
                "type": "MemberExpression",
                "value": "expected[undefined]"
            }
        },
        "undocumented": true,
        "name": "expectedValue",
        "longname": "<anonymous>~expectedValue",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                129994,
                130019
            ],
            "filename": "assertions.js",
            "lineno": 3955,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100007059",
                "name": "actualValue",
                "type": "MemberExpression",
                "value": "actual[undefined]"
            }
        },
        "undocumented": true,
        "name": "actualValue",
        "longname": "<anonymous>~actualValue",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target primitive/object/array structure deeply contains all provided fields\n * at the same key/depth as the provided structure.\n *\n * When comparing arrays, the target must contain the subset of at least one of each object/value in the subset array.\n * Order does not matter.\n *\n *     expect({name: {first: \"John\", last: \"Smith\"}}).to.containSubset({name: {first: \"John\"}});\n *\n * Add `.not` earlier in the chain to negate the assertion. This will cause the assertion to fail\n * only if the target DOES contains the provided data at the expected keys/depths.\n *\n * @name containSubset\n * @public\n */",
        "meta": {
            "filename": "assertions.js",
            "lineno": 3970,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {}
        },
        "description": "Asserts that the target primitive/object/array structure deeply contains all provided fields\nat the same key/depth as the provided structure.\n\nWhen comparing arrays, the target must contain the subset of at least one of each object/value in the subset array.\nOrder does not matter.\n\n    expect({name: {first: \"John\", last: \"Smith\"}}).to.containSubset({name: {first: \"John\"}});\n\nAdd `.not` earlier in the chain to negate the assertion. This will cause the assertion to fail\nonly if the target DOES contains the provided data at the expected keys/depths.",
        "name": "containSubset",
        "access": "public",
        "longname": "containSubset",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                131039,
                131070
            ],
            "filename": "assertions.js",
            "lineno": 3986,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100007107",
                "name": "actual",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "<anonymous>~actual",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                131080,
                131106
            ],
            "filename": "assertions.js",
            "lineno": 3987,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/core",
            "code": {
                "id": "astnode100007116",
                "name": "showDiff",
                "type": "MemberExpression",
                "value": "config.showDiff"
            }
        },
        "undocumented": true,
        "name": "showDiff",
        "longname": "<anonymous>~showDiff",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Write your own test expressions.\n *\n *     assert('foo' !== 'bar', 'foo is not bar');\n *     assert(Array.isArray([]), 'empty arrays are arrays');\n *\n * @param {unknown} express - expression to test for truthiness\n * @param {string} errmsg - message to display on error\n * @name assert\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 12,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Write your own test expressions.\n\n    assert('foo' !== 'bar', 'foo is not bar');\n    assert(Array.isArray([]), 'empty arrays are arrays');",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "expression to test for truthiness",
                "name": "express"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "message to display on error",
                "name": "errmsg"
            }
        ],
        "name": "assert",
        "access": "public",
        "longname": "assert",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                594,
                764
            ],
            "filename": "assert.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007155",
                "name": "exports.assert",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "express",
                    "errmsg"
                ]
            }
        },
        "undocumented": true,
        "name": "assert",
        "longname": "assert",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                601,
                764
            ],
            "filename": "assert.js",
            "lineno": 23,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007156",
                "name": "assert",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "express",
                    "errmsg"
                ]
            },
            "vars": {
                "test": "assert~test"
            }
        },
        "undocumented": true,
        "name": "assert",
        "longname": "assert",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                642,
                693
            ],
            "filename": "assert.js",
            "lineno": 24,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007162",
                "name": "test",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "test",
        "longname": "assert~test",
        "kind": "member",
        "memberof": "assert",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Throw a failure. Node.js `assert` module-compatible.\n *\n *     assert.fail();\n *     assert.fail(\"custom error message\");\n *     assert.fail(1, 2);\n *     assert.fail(1, 2, \"custom error message\");\n *     assert.fail(1, 2, \"custom error message\", \">\");\n *     assert.fail(1, 2, undefined, \">\");\n *\n * @name fail\n * @param {unknown} actual\n * @param {unknown} expected\n * @param {string} message\n * @param {string} operator\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 28,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Throw a failure. Node.js `assert` module-compatible.\n\n    assert.fail();\n    assert.fail(\"custom error message\");\n    assert.fail(1, 2);\n    assert.fail(1, 2, \"custom error message\");\n    assert.fail(1, 2, \"custom error message\", \">\");\n    assert.fail(1, 2, undefined, \">\");",
        "name": "fail",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "actual"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "expected"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "operator"
            }
        ],
        "access": "public",
        "longname": "fail",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1211,
                1599
            ],
            "filename": "assert.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007181",
                "name": "assert.fail",
                "type": "FunctionExpression",
                "paramnames": [
                    "actual",
                    "expected",
                    "message",
                    "operator"
                ]
            },
            "vars": {
                "message": "assert.fail~message",
                "actual": "assert.fail~actual"
            }
        },
        "undocumented": true,
        "name": "fail",
        "longname": "assert.fail",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1361,
                1377
            ],
            "filename": "assert.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007199",
                "name": "message",
                "type": "Identifier",
                "funcscope": "assert.fail",
                "value": "actual",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "assert.fail~message",
        "kind": "member",
        "memberof": "assert.fail",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1383,
                1401
            ],
            "filename": "assert.js",
            "lineno": 50,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007203",
                "name": "actual",
                "type": "Identifier",
                "funcscope": "assert.fail",
                "value": "undefined",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "assert.fail~actual",
        "kind": "member",
        "memberof": "assert.fail",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1410,
                1446
            ],
            "filename": "assert.js",
            "lineno": 53,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007207",
                "name": "message",
                "type": "LogicalExpression",
                "funcscope": "assert.fail",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "assert.fail~message",
        "kind": "member",
        "memberof": "assert.fail",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1501,
                1515
            ],
            "filename": "assert.js",
            "lineno": 57,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007217",
                "name": "actual",
                "type": "Identifier",
                "value": "actual"
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "actual",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1523,
                1541
            ],
            "filename": "assert.js",
            "lineno": 58,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007219",
                "name": "expected",
                "type": "Identifier",
                "value": "expected"
            }
        },
        "undocumented": true,
        "name": "expected",
        "longname": "expected",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1549,
                1567
            ],
            "filename": "assert.js",
            "lineno": 59,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007221",
                "name": "operator",
                "type": "Identifier",
                "value": "operator"
            }
        },
        "undocumented": true,
        "name": "operator",
        "longname": "operator",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Asserts that `object` is truthy.\n *\n *     assert.isOk('everything', 'everything is ok');\n *     assert.isOk(false, 'this will fail');\n *\n * @name isOk\n * @alias ok\n * @param {unknown} val object to test\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 65,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` is truthy.\n\n    assert.isOk('everything', 'everything is ok');\n    assert.isOk(false, 'this will fail');",
        "name": "isOk",
        "alias": "ok",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "object to test",
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isOk",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1851,
                1940
            ],
            "filename": "assert.js",
            "lineno": 77,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007227",
                "name": "assert.isOk",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isOk",
        "longname": "assert.isOk",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` is falsy.\n *\n *     assert.isNotOk('everything', 'this will fail');\n *     assert.isNotOk(false, 'this will pass');\n *\n * @name isNotOk\n * @alias notOk\n * @param {unknown} val object to test\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 81,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` is falsy.\n\n    assert.isNotOk('everything', 'this will fail');\n    assert.isNotOk(false, 'this will pass');",
        "name": "isNotOk",
        "alias": "notOk",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "object to test",
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNotOk",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2201,
                2300
            ],
            "filename": "assert.js",
            "lineno": 93,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007249",
                "name": "assert.isNotOk",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotOk",
        "longname": "assert.isNotOk",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts non-strict equality (`==`) of `actual` and `expected`.\n *\n *     assert.equal(3, '3', '== coerces values to strings');\n *\n * @name equal\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 97,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts non-strict equality (`==`) of `actual` and `expected`.\n\n    assert.equal(3, '3', '== coerces values to strings');",
        "name": "equal",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "act"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "equal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2541,
                2808
            ],
            "filename": "assert.js",
            "lineno": 108,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007273",
                "name": "assert.equal",
                "type": "FunctionExpression",
                "paramnames": [
                    "act",
                    "exp",
                    "msg"
                ]
            },
            "vars": {
                "test": "assert.equal~test"
            }
        },
        "undocumented": true,
        "name": "equal",
        "longname": "assert.equal",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2589,
                2639
            ],
            "filename": "assert.js",
            "lineno": 109,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007283",
                "name": "test",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "test",
        "longname": "assert.equal~test",
        "kind": "member",
        "memberof": "assert.equal",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n *\n *     assert.notEqual(3, 4, 'these numbers are not equal');\n *\n * @name notEqual\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 121,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n\n    assert.notEqual(3, 4, 'these numbers are not equal');",
        "name": "notEqual",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "act"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notEqual",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3054,
                3327
            ],
            "filename": "assert.js",
            "lineno": 132,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007310",
                "name": "assert.notEqual",
                "type": "FunctionExpression",
                "paramnames": [
                    "act",
                    "exp",
                    "msg"
                ]
            },
            "vars": {
                "test": "assert.notEqual~test"
            }
        },
        "undocumented": true,
        "name": "notEqual",
        "longname": "assert.notEqual",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3105,
                3158
            ],
            "filename": "assert.js",
            "lineno": 133,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007320",
                "name": "test",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "test",
        "longname": "assert.notEqual~test",
        "kind": "member",
        "memberof": "assert.notEqual",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts strict equality (`===`) of `actual` and `expected`.\n *\n *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n *\n * @name strictEqual\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 145,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts strict equality (`===`) of `actual` and `expected`.\n\n    assert.strictEqual(true, true, 'these booleans are strictly equal');",
        "name": "strictEqual",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "act"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "strictEqual",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3586,
                3702
            ],
            "filename": "assert.js",
            "lineno": 156,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007347",
                "name": "assert.strictEqual",
                "type": "FunctionExpression",
                "paramnames": [
                    "act",
                    "exp",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "strictEqual",
        "longname": "assert.strictEqual",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts strict inequality (`!==`) of `actual` and `expected`.\n *\n *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n *\n * @name notStrictEqual\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 160,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts strict inequality (`!==`) of `actual` and `expected`.\n\n    assert.notStrictEqual(3, '3', 'no coercion for strict equality');",
        "name": "notStrictEqual",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "act"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notStrictEqual",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3963,
                4089
            ],
            "filename": "assert.js",
            "lineno": 171,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007372",
                "name": "assert.notStrictEqual",
                "type": "FunctionExpression",
                "paramnames": [
                    "act",
                    "exp",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notStrictEqual",
        "longname": "assert.notStrictEqual",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `actual` is deeply equal to `expected`.\n *\n *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n *\n * @name deepEqual\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @alias deepStrictEqual\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 175,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `actual` is deeply equal to `expected`.\n\n    assert.deepEqual({ tea: 'green' }, { tea: 'green' });",
        "name": "deepEqual",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "act"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "alias": "deepStrictEqual",
        "access": "public",
        "longname": "deepEqual",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4350,
                4485
            ],
            "filename": "assert.js",
            "lineno": 187,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007399",
                "name": "assert.deepEqual",
                "type": "AssignmentExpression",
                "value": "assert.deepStrictEqual",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "deepEqual",
        "longname": "assert.deepEqual",
        "kind": "member",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4369,
                4485
            ],
            "filename": "assert.js",
            "lineno": 187,
            "columnno": 19,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007403",
                "name": "assert.deepStrictEqual",
                "type": "FunctionExpression",
                "paramnames": [
                    "act",
                    "exp",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "deepStrictEqual",
        "longname": "assert.deepStrictEqual",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Assert that `actual` is not deeply equal to `expected`.\n *\n *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n *\n * @name notDeepEqual\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 191,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Assert that `actual` is not deeply equal to `expected`.\n\n    assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });",
        "name": "notDeepEqual",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "act"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notDeepEqual",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4731,
                4851
            ],
            "filename": "assert.js",
            "lineno": 202,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007428",
                "name": "assert.notDeepEqual",
                "type": "FunctionExpression",
                "paramnames": [
                    "act",
                    "exp",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notDeepEqual",
        "longname": "assert.notDeepEqual",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n *\n *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n *\n * @name isAbove\n * @param {unknown} val\n * @param {unknown} abv\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 206,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n\n    assert.isAbove(5, 2, '5 is strictly greater than 2');",
        "name": "isAbove",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "abv"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isAbove",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5101,
                5212
            ],
            "filename": "assert.js",
            "lineno": 217,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007455",
                "name": "assert.isAbove",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "abv",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isAbove",
        "longname": "assert.isAbove",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n *\n *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n *\n * @name isAtLeast\n * @param {unknown} val\n * @param {unknown} atlst\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 221,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n\n    assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n    assert.isAtLeast(3, 3, '3 is greater or equal to 3');",
        "name": "isAtLeast",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "atlst"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isAtLeast",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5533,
                5652
            ],
            "filename": "assert.js",
            "lineno": 233,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007482",
                "name": "assert.isAtLeast",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "atlst",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isAtLeast",
        "longname": "assert.isAtLeast",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n *\n *     assert.isBelow(3, 6, '3 is strictly less than 6');\n *\n * @name isBelow\n * @param {unknown} val\n * @param {unknown} blw\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 237,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n\n    assert.isBelow(3, 6, '3 is strictly less than 6');",
        "name": "isBelow",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "blw"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isBelow",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5896,
                6007
            ],
            "filename": "assert.js",
            "lineno": 248,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007509",
                "name": "assert.isBelow",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "blw",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isBelow",
        "longname": "assert.isBelow",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n *\n *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n *\n * @name isAtMost\n * @param {unknown} val\n * @param {unknown} atmst\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 252,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n\n    assert.isAtMost(3, 6, '3 is less than or equal to 6');\n    assert.isAtMost(4, 4, '4 is less than or equal to 4');",
        "name": "isAtMost",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "atmst"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isAtMost",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6325,
                6441
            ],
            "filename": "assert.js",
            "lineno": 264,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007536",
                "name": "assert.isAtMost",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "atmst",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isAtMost",
        "longname": "assert.isAtMost",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is true.\n *\n *     var teaServed = true;\n *     assert.isTrue(teaServed, 'the tea has been served');\n *\n * @name isTrue\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 268,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is true.\n\n    var teaServed = true;\n    assert.isTrue(teaServed, 'the tea has been served');",
        "name": "isTrue",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isTrue",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6654,
                6752
            ],
            "filename": "assert.js",
            "lineno": 279,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007563",
                "name": "assert.isTrue",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isTrue",
        "longname": "assert.isTrue",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is not true.\n *\n *     var tea = 'tasty chai';\n *     assert.isNotTrue(tea, 'great, time for tea!');\n *\n * @name isNotTrue\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 283,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is not true.\n\n    var tea = 'tasty chai';\n    assert.isNotTrue(tea, 'great, time for tea!');",
        "name": "isNotTrue",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNotTrue",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6968,
                7080
            ],
            "filename": "assert.js",
            "lineno": 294,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007585",
                "name": "assert.isNotTrue",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotTrue",
        "longname": "assert.isNotTrue",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is false.\n *\n *     var teaServed = false;\n *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n *\n * @name isFalse\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 298,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is false.\n\n    var teaServed = false;\n    assert.isFalse(teaServed, 'no tea yet? hmm...');",
        "name": "isFalse",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isFalse",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7292,
                7393
            ],
            "filename": "assert.js",
            "lineno": 309,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007611",
                "name": "assert.isFalse",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isFalse",
        "longname": "assert.isFalse",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is not false.\n *\n *     var tea = 'tasty chai';\n *     assert.isNotFalse(tea, 'great, time for tea!');\n *\n * @name isNotFalse\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 313,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is not false.\n\n    var tea = 'tasty chai';\n    assert.isNotFalse(tea, 'great, time for tea!');",
        "name": "isNotFalse",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNotFalse",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7612,
                7727
            ],
            "filename": "assert.js",
            "lineno": 324,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007633",
                "name": "assert.isNotFalse",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotFalse",
        "longname": "assert.isNotFalse",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is null.\n *\n *     assert.isNull(err, 'there was no error');\n *\n * @name isNull\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 328,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is null.\n\n    assert.isNull(err, 'there was no error');",
        "name": "isNull",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNull",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7900,
                8002
            ],
            "filename": "assert.js",
            "lineno": 338,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007659",
                "name": "assert.isNull",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNull",
        "longname": "assert.isNull",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is not null.\n *\n *     var tea = 'tasty chai';\n *     assert.isNotNull(tea, 'great, time for tea!');\n *\n * @name isNotNull\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 342,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is not null.\n\n    var tea = 'tasty chai';\n    assert.isNotNull(tea, 'great, time for tea!');",
        "name": "isNotNull",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNotNull",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8218,
                8330
            ],
            "filename": "assert.js",
            "lineno": 353,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007683",
                "name": "assert.isNotNull",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotNull",
        "longname": "assert.isNotNull",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that value is NaN.\n *\n *     assert.isNaN(NaN, 'NaN is NaN');\n *\n * @name isNaN\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 357,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that value is NaN.\n\n    assert.isNaN(NaN, 'NaN is NaN');",
        "name": "isNaN",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNaN",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8490,
                8585
            ],
            "filename": "assert.js",
            "lineno": 367,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007709",
                "name": "assert.isNaN",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNaN",
        "longname": "assert.isNaN",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that value is not NaN.\n *\n *     assert.isNotNaN(4, '4 is not NaN');\n *\n * @name isNotNaN\n * @param {unknown} value\n * @param {string} message\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 371,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that value is not NaN.\n\n    assert.isNotNaN(4, '4 is not NaN');",
        "name": "isNotNaN",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            }
        ],
        "access": "public",
        "longname": "isNotNaN",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8761,
                8878
            ],
            "filename": "assert.js",
            "lineno": 381,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007733",
                "name": "assert.isNotNaN",
                "type": "FunctionExpression",
                "paramnames": [
                    "value",
                    "message"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotNaN",
        "longname": "assert.isNotNaN",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that the target is neither `null` nor `undefined`.\n *\n *     var foo = 'hi';\n *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n *\n * @name exists\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 385,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that the target is neither `null` nor `undefined`.\n\n    var foo = 'hi';\n    assert.exists(foo, 'foo is neither `null` nor `undefined`');",
        "name": "exists",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "exists",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9122,
                9218
            ],
            "filename": "assert.js",
            "lineno": 396,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007759",
                "name": "assert.exists",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "exists",
        "longname": "assert.exists",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that the target is either `null` or `undefined`.\n *\n *     var bar = null\n *     , baz;\n *\n *     assert.notExists(bar);\n *     assert.notExists(baz, 'baz is either null or undefined');\n *\n * @name notExists\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 400,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that the target is either `null` or `undefined`.\n\n    var bar = null\n    , baz;\n\n    assert.notExists(bar);\n    assert.notExists(baz, 'baz is either null or undefined');",
        "name": "notExists",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notExists",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9506,
                9612
            ],
            "filename": "assert.js",
            "lineno": 414,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007781",
                "name": "assert.notExists",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notExists",
        "longname": "assert.notExists",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is `undefined`.\n *\n *     var tea;\n *     assert.isUndefined(tea, 'no tea defined');\n *\n * @name isUndefined\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 418,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is `undefined`.\n\n    var tea;\n    assert.isUndefined(tea, 'no tea defined');",
        "name": "isUndefined",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isUndefined",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9814,
                9931
            ],
            "filename": "assert.js",
            "lineno": 429,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007805",
                "name": "assert.isUndefined",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isUndefined",
        "longname": "assert.isUndefined",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is not `undefined`.\n *\n *     var tea = 'cup of chai';\n *     assert.isDefined(tea, 'tea has been defined');\n *\n * @name isDefined\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 433,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is not `undefined`.\n\n    var tea = 'cup of chai';\n    assert.isDefined(tea, 'tea has been defined');",
        "name": "isDefined",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isDefined",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10155,
                10272
            ],
            "filename": "assert.js",
            "lineno": 444,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007829",
                "name": "assert.isDefined",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isDefined",
        "longname": "assert.isDefined",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is a callable function.\n *\n *     function serveTea() { return 'cup of tea'; };\n *     assert.isCallable(serveTea, 'great, we can have tea now');\n *\n * @name isCallable\n * @param {unknown} value\n * @param {string} message\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 448,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is a callable function.\n\n    function serveTea() { return 'cup of tea'; };\n    assert.isCallable(serveTea, 'great, we can have tea now');",
        "name": "isCallable",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            }
        ],
        "access": "public",
        "longname": "isCallable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10540,
                10659
            ],
            "filename": "assert.js",
            "lineno": 459,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007855",
                "name": "assert.isCallable",
                "type": "FunctionExpression",
                "paramnames": [
                    "value",
                    "message"
                ]
            }
        },
        "undocumented": true,
        "name": "isCallable",
        "longname": "assert.isCallable",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is _not_ a callable function.\n *\n *     var serveTea = [ 'heat', 'pour', 'sip' ];\n *     assert.isNotCallable(serveTea, 'great, we have listed the steps');\n *\n * @name isNotCallable\n * @param {unknown} value\n * @param {string} message\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 463,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is _not_ a callable function.\n\n    var serveTea = [ 'heat', 'pour', 'sip' ];\n    assert.isNotCallable(serveTea, 'great, we have listed the steps');",
        "name": "isNotCallable",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            }
        ],
        "access": "public",
        "longname": "isNotCallable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10940,
                11069
            ],
            "filename": "assert.js",
            "lineno": 474,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007877",
                "name": "assert.isNotCallable",
                "type": "FunctionExpression",
                "paramnames": [
                    "value",
                    "message"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotCallable",
        "longname": "assert.isNotCallable",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n * _The assertion does not match subclassed objects._\n *\n *     var selection = { name: 'Chai', serve: 'with spices' };\n *     assert.isObject(selection, 'tea selection is an object');\n *\n * @name isObject\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 478,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n_The assertion does not match subclassed objects._\n\n    var selection = { name: 'Chai', serve: 'with spices' };\n    assert.isObject(selection, 'tea selection is an object');",
        "name": "isObject",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isObject",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11444,
                11553
            ],
            "filename": "assert.js",
            "lineno": 490,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007901",
                "name": "assert.isObject",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isObject",
        "longname": "assert.isObject",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n *\n *     var selection = 'chai'\n *     assert.isNotObject(selection, 'tea selection is not an object');\n *     assert.isNotObject(null, 'null is not an object');\n *\n * @name isNotObject\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 494,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n\n    var selection = 'chai'\n    assert.isNotObject(selection, 'tea selection is not an object');\n    assert.isNotObject(null, 'null is not an object');",
        "name": "isNotObject",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNotObject",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11915,
                12034
            ],
            "filename": "assert.js",
            "lineno": 506,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007927",
                "name": "assert.isNotObject",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotObject",
        "longname": "assert.isNotObject",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is an array.\n *\n *     var menu = [ 'green', 'chai', 'oolong' ];\n *     assert.isArray(menu, 'what kind of tea do we want?');\n *\n * @name isArray\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 510,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is an array.\n\n    var menu = [ 'green', 'chai', 'oolong' ];\n    assert.isArray(menu, 'what kind of tea do we want?');",
        "name": "isArray",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isArray",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12273,
                12380
            ],
            "filename": "assert.js",
            "lineno": 521,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007955",
                "name": "assert.isArray",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isArray",
        "longname": "assert.isArray",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is _not_ an array.\n *\n *     var menu = 'green|chai|oolong';\n *     assert.isNotArray(menu, 'what kind of tea do we want?');\n *\n * @name isNotArray\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 525,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is _not_ an array.\n\n    var menu = 'green|chai|oolong';\n    assert.isNotArray(menu, 'what kind of tea do we want?');",
        "name": "isNotArray",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNotArray",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12621,
                12738
            ],
            "filename": "assert.js",
            "lineno": 536,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100007981",
                "name": "assert.isNotArray",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotArray",
        "longname": "assert.isNotArray",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is a string.\n *\n *     var teaOrder = 'chai';\n *     assert.isString(teaOrder, 'order placed');\n *\n * @name isString\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 540,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is a string.\n\n    var teaOrder = 'chai';\n    assert.isString(teaOrder, 'order placed');",
        "name": "isString",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isString",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12948,
                13057
            ],
            "filename": "assert.js",
            "lineno": 551,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008009",
                "name": "assert.isString",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isString",
        "longname": "assert.isString",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is _not_ a string.\n *\n *     var teaOrder = 4;\n *     assert.isNotString(teaOrder, 'order placed');\n *\n * @name isNotString\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 555,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is _not_ a string.\n\n    var teaOrder = 4;\n    assert.isNotString(teaOrder, 'order placed');",
        "name": "isNotString",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNotString",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13274,
                13393
            ],
            "filename": "assert.js",
            "lineno": 566,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008035",
                "name": "assert.isNotString",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotString",
        "longname": "assert.isNotString",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is a number.\n *\n *     var cups = 2;\n *     assert.isNumber(cups, 'how many cups');\n *\n * @name isNumber\n * @param {number} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 570,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is a number.\n\n    var cups = 2;\n    assert.isNumber(cups, 'how many cups');",
        "name": "isNumber",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNumber",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13590,
                13699
            ],
            "filename": "assert.js",
            "lineno": 581,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008063",
                "name": "assert.isNumber",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNumber",
        "longname": "assert.isNumber",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is _not_ a number.\n *\n *     var cups = '2 cups please';\n *     assert.isNotNumber(cups, 'how many cups');\n *\n * @name isNotNumber\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 585,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is _not_ a number.\n\n    var cups = '2 cups please';\n    assert.isNotNumber(cups, 'how many cups');",
        "name": "isNotNumber",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNotNumber",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13923,
                14042
            ],
            "filename": "assert.js",
            "lineno": 596,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008089",
                "name": "assert.isNotNumber",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotNumber",
        "longname": "assert.isNotNumber",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is a number or BigInt.\n *\n *     var cups = 2;\n *     assert.isNumeric(cups, 'how many cups');\n *\n *     var cups = 10n;\n *     assert.isNumeric(cups, 'how many cups');\n *\n * @name isNumeric\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 600,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is a number or BigInt.\n\n    var cups = 2;\n    assert.isNumeric(cups, 'how many cups');\n\n    var cups = 10n;\n    assert.isNumeric(cups, 'how many cups');",
        "name": "isNumeric",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNumeric",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14326,
                14430
            ],
            "filename": "assert.js",
            "lineno": 614,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008117",
                "name": "assert.isNumeric",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNumeric",
        "longname": "assert.isNumeric",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is _not_ a number or BigInt.\n *\n *     var cups = '2 cups please';\n *     assert.isNotNumeric(cups, 'how many cups');\n *\n * @name isNotNumeric\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 618,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is _not_ a number or BigInt.\n\n    var cups = '2 cups please';\n    assert.isNotNumeric(cups, 'how many cups');",
        "name": "isNotNumeric",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNotNumeric",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14666,
                14780
            ],
            "filename": "assert.js",
            "lineno": 629,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008139",
                "name": "assert.isNotNumeric",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotNumeric",
        "longname": "assert.isNotNumeric",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n *\n *     var cups = 2;\n *     assert.isFinite(cups, 'how many cups');\n *     assert.isFinite(NaN); // throws\n *\n * @name isFinite\n * @param {number} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 633,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n\n    var cups = 2;\n    assert.isFinite(cups, 'how many cups');\n    assert.isFinite(NaN); // throws",
        "name": "isFinite",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isFinite",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15084,
                15188
            ],
            "filename": "assert.js",
            "lineno": 645,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008163",
                "name": "assert.isFinite",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isFinite",
        "longname": "assert.isFinite",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is a boolean.\n *\n *     var teaReady = true\n *     , teaServed = false;\n *\n *     assert.isBoolean(teaReady, 'is the tea ready');\n *     assert.isBoolean(teaServed, 'has tea been served');\n *\n * @name isBoolean\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 649,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is a boolean.\n\n    var teaReady = true\n    , teaServed = false;\n\n    assert.isBoolean(teaReady, 'is the tea ready');\n    assert.isBoolean(teaServed, 'has tea been served');",
        "name": "isBoolean",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isBoolean",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15492,
                15604
            ],
            "filename": "assert.js",
            "lineno": 663,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008187",
                "name": "assert.isBoolean",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isBoolean",
        "longname": "assert.isBoolean",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is _not_ a boolean.\n *\n *     var teaReady = 'yep'\n *     , teaServed = 'nope';\n *\n *     assert.isNotBoolean(teaReady, 'is the tea ready');\n *     assert.isNotBoolean(teaServed, 'has tea been served');\n *\n * @name isNotBoolean\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 667,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is _not_ a boolean.\n\n    var teaReady = 'yep'\n    , teaServed = 'nope';\n\n    assert.isNotBoolean(teaReady, 'is the tea ready');\n    assert.isNotBoolean(teaServed, 'has tea been served');",
        "name": "isNotBoolean",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNotBoolean",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15925,
                16047
            ],
            "filename": "assert.js",
            "lineno": 681,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008213",
                "name": "assert.isNotBoolean",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotBoolean",
        "longname": "assert.isNotBoolean",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value`'s type is `name`, as determined by\n * `Object.prototype.toString`.\n *\n *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n *     assert.typeOf('tea', 'string', 'we have a string');\n *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n *     assert.typeOf(null, 'null', 'we have a null');\n *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n *\n * @name typeOf\n * @param {unknown} val\n * @param {string} type\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 685,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value`'s type is `name`, as determined by\n`Object.prototype.toString`.\n\n    assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n    assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n    assert.typeOf('tea', 'string', 'we have a string');\n    assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n    assert.typeOf(null, 'null', 'we have a null');\n    assert.typeOf(undefined, 'undefined', 'we have an undefined');",
        "name": "typeOf",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "typeOf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16649,
                16756
            ],
            "filename": "assert.js",
            "lineno": 702,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008241",
                "name": "assert.typeOf",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "type",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "typeOf",
        "longname": "assert.typeOf",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value`'s type is _not_ `name`, as determined by\n * `Object.prototype.toString`.\n *\n *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n *\n * @name notTypeOf\n * @param {unknown} value\n * @param {string} type\n * @param {string} message\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 706,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value`'s type is _not_ `name`, as determined by\n`Object.prototype.toString`.\n\n    assert.notTypeOf('tea', 'number', 'strings are not numbers');",
        "name": "notTypeOf",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            }
        ],
        "access": "public",
        "longname": "notTypeOf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17046,
                17175
            ],
            "filename": "assert.js",
            "lineno": 718,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008268",
                "name": "assert.notTypeOf",
                "type": "FunctionExpression",
                "paramnames": [
                    "value",
                    "type",
                    "message"
                ]
            }
        },
        "undocumented": true,
        "name": "notTypeOf",
        "longname": "assert.notTypeOf",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` is an instance of `constructor`.\n *\n *     var Tea = function (name) { this.name = name; }\n *     , chai = new Tea('chai');\n *\n *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n *\n * @name instanceOf\n * @param {object} val\n * @param {object} type\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 722,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` is an instance of `constructor`.\n\n    var Tea = function (name) { this.name = name; }\n    , chai = new Tea('chai');\n\n    assert.instanceOf(chai, Tea, 'chai is an instance of tea');",
        "name": "instanceOf",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "instanceOf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17508,
                17632
            ],
            "filename": "assert.js",
            "lineno": 736,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008297",
                "name": "assert.instanceOf",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "type",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "instanceOf",
        "longname": "assert.instanceOf",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts `value` is not an instance of `constructor`.\n *\n *     var Tea = function (name) { this.name = name; }\n *     , chai = new String('chai');\n *\n *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n *\n * @name notInstanceOf\n * @param {object} val\n * @param {object} type\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 740,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts `value` is not an instance of `constructor`.\n\n    var Tea = function (name) { this.name = name; }\n    , chai = new String('chai');\n\n    assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');",
        "name": "notInstanceOf",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notInstanceOf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17977,
                18120
            ],
            "filename": "assert.js",
            "lineno": 754,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008324",
                "name": "assert.notInstanceOf",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "type",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notInstanceOf",
        "longname": "assert.notInstanceOf",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `haystack` includes `needle`. Can be used to assert the\n * inclusion of a value in an array, a substring in a string, or a subset of\n * properties in an object.\n *\n *     assert.include([1,2,3], 2, 'array contains value');\n *     assert.include('foobar', 'foo', 'string contains substring');\n *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n *\n * Strict equality (===) is used. When asserting the inclusion of a value in\n * an array, the array is searched for an element that's strictly equal to the\n * given value. When asserting a subset of properties in an object, the object\n * is searched for the given property keys, checking that each one is present\n * and strictly equal to the given property value. For instance:\n *\n *     var obj1 = {a: 1}\n *     , obj2 = {b: 2};\n *     assert.include([obj1, obj2], obj1);\n *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n *\n * @name include\n * @param {Array | string} exp\n * @param {unknown} inc\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 760,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `haystack` includes `needle`. Can be used to assert the\ninclusion of a value in an array, a substring in a string, or a subset of\nproperties in an object.\n\n    assert.include([1,2,3], 2, 'array contains value');\n    assert.include('foobar', 'foo', 'string contains substring');\n    assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n\nStrict equality (===) is used. When asserting the inclusion of a value in\nan array, the array is searched for an element that's strictly equal to the\ngiven value. When asserting a subset of properties in an object, the object\nis searched for the given property keys, checking that each one is present\nand strictly equal to the given property value. For instance:\n\n    var obj1 = {a: 1}\n    , obj2 = {b: 2};\n    assert.include([obj1, obj2], obj1);\n    assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n    assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});",
        "name": "include",
        "params": [
            {
                "type": {
                    "names": [
                        "Array",
                        "string"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "inc"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "include",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19257,
                19364
            ],
            "filename": "assert.js",
            "lineno": 787,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008353",
                "name": "assert.include",
                "type": "FunctionExpression",
                "paramnames": [
                    "exp",
                    "inc",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "include",
        "longname": "assert.include",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `haystack` does not include `needle`. Can be used to assert\n * the absence of a value in an array, a substring in a string, or a subset of\n * properties in an object.\n *\n *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n *\n * Strict equality (===) is used. When asserting the absence of a value in an\n * array, the array is searched to confirm the absence of an element that's\n * strictly equal to the given value. When asserting a subset of properties in\n * an object, the object is searched to confirm that at least one of the given\n * property keys is either not present or not strictly equal to the given\n * property value. For instance:\n *\n *     var obj1 = {a: 1}\n *     , obj2 = {b: 2};\n *     assert.notInclude([obj1, obj2], {a: 1});\n *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n *\n * @name notInclude\n * @param {Array | string} exp\n * @param {unknown} inc\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 791,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `haystack` does not include `needle`. Can be used to assert\nthe absence of a value in an array, a substring in a string, or a subset of\nproperties in an object.\n\n    assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n    assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n    assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n\nStrict equality (===) is used. When asserting the absence of a value in an\narray, the array is searched to confirm the absence of an element that's\nstrictly equal to the given value. When asserting a subset of properties in\nan object, the object is searched to confirm that at least one of the given\nproperty keys is either not present or not strictly equal to the given\nproperty value. For instance:\n\n    var obj1 = {a: 1}\n    , obj2 = {b: 2};\n    assert.notInclude([obj1, obj2], {a: 1});\n    assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n    assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});",
        "name": "notInclude",
        "params": [
            {
                "type": {
                    "names": [
                        "Array",
                        "string"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "inc"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notInclude",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20596,
                20713
            ],
            "filename": "assert.js",
            "lineno": 819,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008376",
                "name": "assert.notInclude",
                "type": "FunctionExpression",
                "paramnames": [
                    "exp",
                    "inc",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notInclude",
        "longname": "assert.notInclude",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `haystack` includes `needle`. Can be used to assert the\n * inclusion of a value in an array or a subset of properties in an object.\n * Deep equality is used.\n *\n *     var obj1 = {a: 1}\n *     , obj2 = {b: 2};\n *     assert.deepInclude([obj1, obj2], {a: 1});\n *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n *\n * @name deepInclude\n * @param {Array | string} exp\n * @param {unknown} inc\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 823,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `haystack` includes `needle`. Can be used to assert the\ninclusion of a value in an array or a subset of properties in an object.\nDeep equality is used.\n\n    var obj1 = {a: 1}\n    , obj2 = {b: 2};\n    assert.deepInclude([obj1, obj2], {a: 1});\n    assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n    assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});",
        "name": "deepInclude",
        "params": [
            {
                "type": {
                    "names": [
                        "Array",
                        "string"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "inc"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "deepInclude",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21257,
                21377
            ],
            "filename": "assert.js",
            "lineno": 840,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008401",
                "name": "assert.deepInclude",
                "type": "FunctionExpression",
                "paramnames": [
                    "exp",
                    "inc",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "deepInclude",
        "longname": "assert.deepInclude",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `haystack` does not include `needle`. Can be used to assert\n * the absence of a value in an array or a subset of properties in an object.\n * Deep equality is used.\n *\n *     var obj1 = {a: 1}\n *     , obj2 = {b: 2};\n *     assert.notDeepInclude([obj1, obj2], {a: 9});\n *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n *\n * @name notDeepInclude\n * @param {Array | string} exp\n * @param {unknown} inc\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 844,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `haystack` does not include `needle`. Can be used to assert\nthe absence of a value in an array or a subset of properties in an object.\nDeep equality is used.\n\n    var obj1 = {a: 1}\n    , obj2 = {b: 2};\n    assert.notDeepInclude([obj1, obj2], {a: 9});\n    assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n    assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});",
        "name": "notDeepInclude",
        "params": [
            {
                "type": {
                    "names": [
                        "Array",
                        "string"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "inc"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notDeepInclude",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21939,
                22069
            ],
            "filename": "assert.js",
            "lineno": 861,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008426",
                "name": "assert.notDeepInclude",
                "type": "FunctionExpression",
                "paramnames": [
                    "exp",
                    "inc",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notDeepInclude",
        "longname": "assert.notDeepInclude",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that 'haystack' includes 'needle'.\n * Can be used to assert the inclusion of a subset of properties in an\n * object.\n * Enables the use of dot- and bracket-notation for referencing nested\n * properties.\n * '[]' and '.' in property names can be escaped using double backslashes.\n *\n *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n *\n * @name nestedInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 865,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that 'haystack' includes 'needle'.\nCan be used to assert the inclusion of a subset of properties in an\nobject.\nEnables the use of dot- and bracket-notation for referencing nested\nproperties.\n'[]' and '.' in property names can be escaped using double backslashes.\n\n    assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n    assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});",
        "name": "nestedInclude",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "inc"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "nestedInclude",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22616,
                22742
            ],
            "filename": "assert.js",
            "lineno": 882,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008453",
                "name": "assert.nestedInclude",
                "type": "FunctionExpression",
                "paramnames": [
                    "exp",
                    "inc",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "nestedInclude",
        "longname": "assert.nestedInclude",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that 'haystack' does not include 'needle'.\n * Can be used to assert the absence of a subset of properties in an\n * object.\n * Enables the use of dot- and bracket-notation for referencing nested\n * properties.\n * '[]' and '.' in property names can be escaped using double backslashes.\n *\n *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n *\n * @name notNestedInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 886,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that 'haystack' does not include 'needle'.\nCan be used to assert the absence of a subset of properties in an\nobject.\nEnables the use of dot- and bracket-notation for referencing nested\nproperties.\n'[]' and '.' in property names can be escaped using double backslashes.\n\n    assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n    assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});",
        "name": "notNestedInclude",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "inc"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notNestedInclude",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23302,
                23447
            ],
            "filename": "assert.js",
            "lineno": 903,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008478",
                "name": "assert.notNestedInclude",
                "type": "FunctionExpression",
                "paramnames": [
                    "exp",
                    "inc",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notNestedInclude",
        "longname": "assert.notNestedInclude",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that 'haystack' includes 'needle'.\n * Can be used to assert the inclusion of a subset of properties in an\n * object while checking for deep equality.\n * Enables the use of dot- and bracket-notation for referencing nested\n * properties.\n * '[]' and '.' in property names can be escaped using double backslashes.\n *\n *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n *\n * @name deepNestedInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 909,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that 'haystack' includes 'needle'.\nCan be used to assert the inclusion of a subset of properties in an\nobject while checking for deep equality.\nEnables the use of dot- and bracket-notation for referencing nested\nproperties.\n'[]' and '.' in property names can be escaped using double backslashes.\n\n    assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n    assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});",
        "name": "deepNestedInclude",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "inc"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "deepNestedInclude",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24050,
                24198
            ],
            "filename": "assert.js",
            "lineno": 926,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008505",
                "name": "assert.deepNestedInclude",
                "type": "FunctionExpression",
                "paramnames": [
                    "exp",
                    "inc",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "deepNestedInclude",
        "longname": "assert.deepNestedInclude",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that 'haystack' does not include 'needle'.\n * Can be used to assert the absence of a subset of properties in an\n * object while checking for deep equality.\n * Enables the use of dot- and bracket-notation for referencing nested\n * properties.\n * '[]' and '.' in property names can be escaped using double backslashes.\n *\n *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n *\n * @name notDeepNestedInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 932,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that 'haystack' does not include 'needle'.\nCan be used to assert the absence of a subset of properties in an\nobject while checking for deep equality.\nEnables the use of dot- and bracket-notation for referencing nested\nproperties.\n'[]' and '.' in property names can be escaped using double backslashes.\n\n    assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n    assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});",
        "name": "notDeepNestedInclude",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "inc"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notDeepNestedInclude",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24815,
                24985
            ],
            "filename": "assert.js",
            "lineno": 949,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008532",
                "name": "assert.notDeepNestedInclude",
                "type": "FunctionExpression",
                "paramnames": [
                    "exp",
                    "inc",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notDeepNestedInclude",
        "longname": "assert.notDeepNestedInclude",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that 'haystack' includes 'needle'.\n * Can be used to assert the inclusion of a subset of properties in an\n * object while ignoring inherited properties.\n *\n *     assert.ownInclude({ a: 1 }, { a: 1 });\n *\n * @name ownInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 958,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that 'haystack' includes 'needle'.\nCan be used to assert the inclusion of a subset of properties in an\nobject while ignoring inherited properties.\n\n    assert.ownInclude({ a: 1 }, { a: 1 });",
        "name": "ownInclude",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "inc"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "ownInclude",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25312,
                25429
            ],
            "filename": "assert.js",
            "lineno": 971,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008561",
                "name": "assert.ownInclude",
                "type": "FunctionExpression",
                "paramnames": [
                    "exp",
                    "inc",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "ownInclude",
        "longname": "assert.ownInclude",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that 'haystack' does not include 'needle'.\n * Can be used to assert the absence of a subset of properties in an\n * object while ignoring inherited properties.\n *\n *     Object.prototype.b = 2;\n *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n *\n * @name notOwnInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 975,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that 'haystack' does not include 'needle'.\nCan be used to assert the absence of a subset of properties in an\nobject while ignoring inherited properties.\n\n    Object.prototype.b = 2;\n    assert.notOwnInclude({ a: 1 }, { b: 2 });",
        "name": "notOwnInclude",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "inc"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notOwnInclude",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25799,
                25926
            ],
            "filename": "assert.js",
            "lineno": 989,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008586",
                "name": "assert.notOwnInclude",
                "type": "FunctionExpression",
                "paramnames": [
                    "exp",
                    "inc",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notOwnInclude",
        "longname": "assert.notOwnInclude",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that 'haystack' includes 'needle'.\n * Can be used to assert the inclusion of a subset of properties in an\n * object while ignoring inherited properties and checking for deep equality.\n *\n *     assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n *\n * @name deepOwnInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 993,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that 'haystack' includes 'needle'.\nCan be used to assert the inclusion of a subset of properties in an\nobject while ignoring inherited properties and checking for deep equality.\n\n    assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});",
        "name": "deepOwnInclude",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "inc"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "deepOwnInclude",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26298,
                26428
            ],
            "filename": "assert.js",
            "lineno": 1006,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008613",
                "name": "assert.deepOwnInclude",
                "type": "FunctionExpression",
                "paramnames": [
                    "exp",
                    "inc",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "deepOwnInclude",
        "longname": "assert.deepOwnInclude",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that 'haystack' includes 'needle'.\n * Can be used to assert the absence of a subset of properties in an\n * object while ignoring inherited properties and checking for deep equality.\n *\n *     assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n *\n * @name notDeepOwnInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1010,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that 'haystack' includes 'needle'.\nCan be used to assert the absence of a subset of properties in an\nobject while ignoring inherited properties and checking for deep equality.\n\n    assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});",
        "name": "notDeepOwnInclude",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "inc"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notDeepOwnInclude",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26804,
                26953
            ],
            "filename": "assert.js",
            "lineno": 1023,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008640",
                "name": "assert.notDeepOwnInclude",
                "type": "FunctionExpression",
                "paramnames": [
                    "exp",
                    "inc",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notDeepOwnInclude",
        "longname": "assert.notDeepOwnInclude",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` matches the regular expression `regexp`.\n *\n *     assert.match('foobar', /^foo/, 'regexp matches');\n *\n * @name match\n * @param {unknown} exp\n * @param {RegExp} re\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1029,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` matches the regular expression `regexp`.\n\n    assert.match('foobar', /^foo/, 'regexp matches');",
        "name": "match",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "RegExp"
                    ]
                },
                "name": "re"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "match",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27187,
                27289
            ],
            "filename": "assert.js",
            "lineno": 1040,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008669",
                "name": "assert.match",
                "type": "FunctionExpression",
                "paramnames": [
                    "exp",
                    "re",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "match",
        "longname": "assert.match",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `value` does not match the regular expression `regexp`.\n *\n *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n *\n * @name notMatch\n * @param {unknown} exp\n * @param {RegExp} re\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1044,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `value` does not match the regular expression `regexp`.\n\n    assert.notMatch('foobar', /^foo/, 'regexp does not match');",
        "name": "notMatch",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "RegExp"
                    ]
                },
                "name": "re"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notMatch",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27543,
                27655
            ],
            "filename": "assert.js",
            "lineno": 1055,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008694",
                "name": "assert.notMatch",
                "type": "FunctionExpression",
                "paramnames": [
                    "exp",
                    "re",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notMatch",
        "longname": "assert.notMatch",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has a direct or inherited property named by\n * `property`.\n *\n *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n *\n * @name property\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1059,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has a direct or inherited property named by\n`property`.\n\n    assert.property({ tea: { green: 'matcha' }}, 'tea');\n    assert.property({ tea: { green: 'matcha' }}, 'toString');",
        "name": "property",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "property",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27980,
                28100
            ],
            "filename": "assert.js",
            "lineno": 1072,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008721",
                "name": "assert.property",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "property",
        "longname": "assert.property",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` does _not_ have a direct or inherited property named\n * by `property`.\n *\n *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n *\n * @name notProperty\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1076,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` does _not_ have a direct or inherited property named\nby `property`.\n\n    assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');",
        "name": "notProperty",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notProperty",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28381,
                28511
            ],
            "filename": "assert.js",
            "lineno": 1088,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008748",
                "name": "assert.notProperty",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notProperty",
        "longname": "assert.notProperty",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has a direct or inherited property named by\n * `property` with a value given by `value`. Uses a strict equality check\n * (===).\n *\n *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n *\n * @name propertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1092,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has a direct or inherited property named by\n`property` with a value given by `value`. Uses a strict equality check\n(===).\n\n    assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');",
        "name": "propertyVal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "propertyVal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28872,
                29008
            ],
            "filename": "assert.js",
            "lineno": 1106,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008777",
                "name": "assert.propertyVal",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "propertyVal",
        "longname": "assert.propertyVal",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` does _not_ have a direct or inherited property named\n * by `property` with value given by `value`. Uses a strict equality check\n * (===).\n *\n *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n *\n * @name notPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1110,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` does _not_ have a direct or inherited property named\nby `property` with value given by `value`. Uses a strict equality check\n(===).\n\n    assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n    assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');",
        "name": "notPropertyVal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notPropertyVal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29455,
                29614
            ],
            "filename": "assert.js",
            "lineno": 1125,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008806",
                "name": "assert.notPropertyVal",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notPropertyVal",
        "longname": "assert.notPropertyVal",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has a direct or inherited property named by\n * `property` with a value given by `value`. Uses a deep equality check.\n *\n *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n *\n * @name deepPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1132,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has a direct or inherited property named by\n`property` with a value given by `value`. Uses a deep equality check.\n\n    assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });",
        "name": "deepPropertyVal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "deepPropertyVal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29992,
                30154
            ],
            "filename": "assert.js",
            "lineno": 1145,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008837",
                "name": "assert.deepPropertyVal",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "deepPropertyVal",
        "longname": "assert.deepPropertyVal",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` does _not_ have a direct or inherited property named\n * by `property` with value given by `value`. Uses a deep equality check.\n *\n *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n *\n * @name notDeepPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1152,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` does _not_ have a direct or inherited property named\nby `property` with value given by `value`. Uses a deep equality check.\n\n    assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n    assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n    assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });",
        "name": "notDeepPropertyVal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notDeepPropertyVal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30735,
                30915
            ],
            "filename": "assert.js",
            "lineno": 1167,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008868",
                "name": "assert.notDeepPropertyVal",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notDeepPropertyVal",
        "longname": "assert.notDeepPropertyVal",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has a direct property named by `property`. Inherited\n * properties aren't checked.\n *\n *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n *\n * @name ownProperty\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1176,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has a direct property named by `property`. Inherited\nproperties aren't checked.\n\n    assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');",
        "name": "ownProperty",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "ownProperty",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                31205,
                31335
            ],
            "filename": "assert.js",
            "lineno": 1188,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008901",
                "name": "assert.ownProperty",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "ownProperty",
        "longname": "assert.ownProperty",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` does _not_ have a direct property named by\n * `property`. Inherited properties aren't checked.\n *\n *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n *     assert.notOwnProperty({}, 'toString');\n *\n * @name notOwnProperty\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1192,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` does _not_ have a direct property named by\n`property`. Inherited properties aren't checked.\n\n    assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n    assert.notOwnProperty({}, 'toString');",
        "name": "notOwnProperty",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notOwnProperty",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                31692,
                31841
            ],
            "filename": "assert.js",
            "lineno": 1205,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008930",
                "name": "assert.notOwnProperty",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notOwnProperty",
        "longname": "assert.notOwnProperty",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has a direct property named by `property` and a value\n * equal to the provided `value`. Uses a strict equality check (===).\n * Inherited properties aren't checked.\n *\n *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n *\n * @name ownPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} value\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1211,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has a direct property named by `property` and a value\nequal to the provided `value`. Uses a strict equality check (===).\nInherited properties aren't checked.\n\n    assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');",
        "name": "ownPropertyVal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "ownPropertyVal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                32251,
                32414
            ],
            "filename": "assert.js",
            "lineno": 1225,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008961",
                "name": "assert.ownPropertyVal",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "value",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "ownPropertyVal",
        "longname": "assert.ownPropertyVal",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` does _not_ have a direct property named by `property`\n * with a value equal to the provided `value`. Uses a strict equality check\n * (===). Inherited properties aren't checked.\n *\n *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n *\n * @name notOwnPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} value\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1232,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` does _not_ have a direct property named by `property`\nwith a value equal to the provided `value`. Uses a strict equality check\n(===). Inherited properties aren't checked.\n\n    assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n    assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);",
        "name": "notOwnPropertyVal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notOwnPropertyVal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                32916,
                33097
            ],
            "filename": "assert.js",
            "lineno": 1247,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100008992",
                "name": "assert.notOwnPropertyVal",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "value",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notOwnPropertyVal",
        "longname": "assert.notOwnPropertyVal",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has a direct property named by `property` and a value\n * equal to the provided `value`. Uses a deep equality check. Inherited\n * properties aren't checked.\n *\n *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n *\n * @name deepOwnPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} value\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1256,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has a direct property named by `property` and a value\nequal to the provided `value`. Uses a deep equality check. Inherited\nproperties aren't checked.\n\n    assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });",
        "name": "deepOwnPropertyVal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "deepOwnPropertyVal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                33522,
                33706
            ],
            "filename": "assert.js",
            "lineno": 1270,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009025",
                "name": "assert.deepOwnPropertyVal",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "value",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "deepOwnPropertyVal",
        "longname": "assert.deepOwnPropertyVal",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` does _not_ have a direct property named by `property`\n * with a value equal to the provided `value`. Uses a deep equality check.\n * Inherited properties aren't checked.\n *\n *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n *\n * @name notDeepOwnPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} value\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1279,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` does _not_ have a direct property named by `property`\nwith a value equal to the provided `value`. Uses a deep equality check.\nInherited properties aren't checked.\n\n    assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n    assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n    assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n    assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);",
        "name": "notDeepOwnPropertyVal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notDeepOwnPropertyVal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                34423,
                34617
            ],
            "filename": "assert.js",
            "lineno": 1296,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009058",
                "name": "assert.notDeepOwnPropertyVal",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "value",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notDeepOwnPropertyVal",
        "longname": "assert.notDeepOwnPropertyVal",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has a direct or inherited property named by\n * `property`, which can be a string using dot- and bracket-notation for\n * nested reference.\n *\n *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n *\n * @name nestedProperty\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1305,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has a direct or inherited property named by\n`property`, which can be a string using dot- and bracket-notation for\nnested reference.\n\n    assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');",
        "name": "nestedProperty",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "nestedProperty",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                34974,
                35122
            ],
            "filename": "assert.js",
            "lineno": 1318,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009093",
                "name": "assert.nestedProperty",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "nestedProperty",
        "longname": "assert.nestedProperty",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` does _not_ have a property named by `property`, which\n * can be a string using dot- and bracket-notation for nested reference. The\n * property cannot exist on the object nor anywhere in its prototype chain.\n *\n *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n *\n * @name notNestedProperty\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1324,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` does _not_ have a property named by `property`, which\ncan be a string using dot- and bracket-notation for nested reference. The\nproperty cannot exist on the object nor anywhere in its prototype chain.\n\n    assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');",
        "name": "notNestedProperty",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notNestedProperty",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35555,
                35725
            ],
            "filename": "assert.js",
            "lineno": 1337,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009122",
                "name": "assert.notNestedProperty",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notNestedProperty",
        "longname": "assert.notNestedProperty",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has a property named by `property` with value given\n * by `value`. `property` can use dot- and bracket-notation for nested\n * reference. Uses a strict equality check (===).\n *\n *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n *\n * @name nestedPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1346,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has a property named by `property` with value given\nby `value`. `property` can use dot- and bracket-notation for nested\nreference. Uses a strict equality check (===).\n\n    assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');",
        "name": "nestedPropertyVal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "nestedPropertyVal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                36157,
                36333
            ],
            "filename": "assert.js",
            "lineno": 1360,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009153",
                "name": "assert.nestedPropertyVal",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "nestedPropertyVal",
        "longname": "assert.nestedPropertyVal",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` does _not_ have a property named by `property` with\n * value given by `value`. `property` can use dot- and bracket-notation for\n * nested reference. Uses a strict equality check (===).\n *\n *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n *\n * @name notNestedPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1369,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` does _not_ have a property named by `property` with\nvalue given by `value`. `property` can use dot- and bracket-notation for\nnested reference. Uses a strict equality check (===).\n\n    assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n    assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');",
        "name": "notNestedPropertyVal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notNestedPropertyVal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                36875,
                37061
            ],
            "filename": "assert.js",
            "lineno": 1384,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009184",
                "name": "assert.notNestedPropertyVal",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notNestedPropertyVal",
        "longname": "assert.notNestedPropertyVal",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has a property named by `property` with a value given\n * by `value`. `property` can use dot- and bracket-notation for nested\n * reference. Uses a deep equality check.\n *\n *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n *\n * @name deepNestedPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1393,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has a property named by `property` with a value given\nby `value`. `property` can use dot- and bracket-notation for nested\nreference. Uses a deep equality check.\n\n    assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });",
        "name": "deepNestedPropertyVal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "deepNestedPropertyVal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                37514,
                37703
            ],
            "filename": "assert.js",
            "lineno": 1407,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009217",
                "name": "assert.deepNestedPropertyVal",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "deepNestedPropertyVal",
        "longname": "assert.deepNestedPropertyVal",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` does _not_ have a property named by `property` with\n * value given by `value`. `property` can use dot- and bracket-notation for\n * nested reference. Uses a deep equality check.\n *\n *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n *\n * @name notDeepNestedPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1416,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` does _not_ have a property named by `property` with\nvalue given by `value`. `property` can use dot- and bracket-notation for\nnested reference. Uses a deep equality check.\n\n    assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n    assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n    assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });",
        "name": "notDeepNestedPropertyVal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notDeepNestedPropertyVal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38395,
                38594
            ],
            "filename": "assert.js",
            "lineno": 1432,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009250",
                "name": "assert.notDeepNestedPropertyVal",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "prop",
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notDeepNestedPropertyVal",
        "longname": "assert.notDeepNestedPropertyVal",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has a `length` or `size` with the expected value.\n *\n *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n *     assert.lengthOf('foobar', 6, 'string has length of 6');\n *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n *\n * @name lengthOf\n * @param {unknown} exp\n * @param {number} len\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1441,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has a `length` or `size` with the expected value.\n\n    assert.lengthOf([1,2,3], 3, 'array has length of 3');\n    assert.lengthOf('foobar', 6, 'string has length of 6');\n    assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n    assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');",
        "name": "lengthOf",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "len"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "lengthOf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39059,
                39177
            ],
            "filename": "assert.js",
            "lineno": 1455,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009285",
                "name": "assert.lengthOf",
                "type": "FunctionExpression",
                "paramnames": [
                    "exp",
                    "len",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "lengthOf",
        "longname": "assert.lengthOf",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has at least one of the `keys` provided.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n *\n * @name hasAnyKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1459,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has at least one of the `keys` provided.\nYou can also provide a single object instead of a `keys` array and its keys\nwill be used as the expected set of keys.\n\n    assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n    assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n    assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n    assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);",
        "name": "hasAnyKeys",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "Array",
                        "object"
                    ]
                },
                "name": "keys"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "hasAnyKeys",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39854,
                39978
            ],
            "filename": "assert.js",
            "lineno": 1475,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009312",
                "name": "assert.hasAnyKeys",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "keys",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "hasAnyKeys",
        "longname": "assert.hasAnyKeys",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has all and only all of the `keys` provided.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n *\n * @name hasAllKeys\n * @param {unknown} obj\n * @param {string[]} keys\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1479,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has all and only all of the `keys` provided.\nYou can also provide a single object instead of a `keys` array and its keys\nwill be used as the expected set of keys.\n\n    assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n    assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n    assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n    assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);",
        "name": "hasAllKeys",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "name": "keys"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "hasAllKeys",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                40639,
                40763
            ],
            "filename": "assert.js",
            "lineno": 1495,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009341",
                "name": "assert.hasAllKeys",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "keys",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "hasAllKeys",
        "longname": "assert.hasAllKeys",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}]);\n *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n *\n * @name containsAllKeys\n * @param {unknown} obj\n * @param {string[]} keys\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1499,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has all of the `keys` provided but may have more keys not listed.\nYou can also provide a single object instead of a `keys` array and its keys\nwill be used as the expected set of keys.\n\n    assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n    assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n    assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n    assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n    assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n    assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n    assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}]);\n    assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);",
        "name": "containsAllKeys",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "name": "keys"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "containsAllKeys",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                41799,
                41945
            ],
            "filename": "assert.js",
            "lineno": 1519,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009370",
                "name": "assert.containsAllKeys",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "keys",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "containsAllKeys",
        "longname": "assert.containsAllKeys",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has none of the `keys` provided.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{one: 'two'}, 'example']);\n *\n * @name doesNotHaveAnyKeys\n * @param {unknown} obj\n * @param {string[]} keys\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1525,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has none of the `keys` provided.\nYou can also provide a single object instead of a `keys` array and its keys\nwill be used as the expected set of keys.\n\n    assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n    assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n    assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n    assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{one: 'two'}, 'example']);",
        "name": "doesNotHaveAnyKeys",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "name": "keys"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "doesNotHaveAnyKeys",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42646,
                42799
            ],
            "filename": "assert.js",
            "lineno": 1541,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009399",
                "name": "assert.doesNotHaveAnyKeys",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "keys",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "doesNotHaveAnyKeys",
        "longname": "assert.doesNotHaveAnyKeys",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` does not have at least one of the `keys` provided.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{one: 'two'}, 'example']);\n *\n * @name doesNotHaveAllKeys\n * @param {unknown} obj\n * @param {string[]} keys\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1547,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` does not have at least one of the `keys` provided.\nYou can also provide a single object instead of a `keys` array and its keys\nwill be used as the expected set of keys.\n\n    assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n    assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n    assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n    assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{one: 'two'}, 'example']);",
        "name": "doesNotHaveAllKeys",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "name": "keys"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "doesNotHaveAllKeys",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43518,
                43671
            ],
            "filename": "assert.js",
            "lineno": 1563,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009430",
                "name": "assert.doesNotHaveAllKeys",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "keys",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "doesNotHaveAllKeys",
        "longname": "assert.doesNotHaveAllKeys",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has at least one of the `keys` provided.\n * Since Sets and Maps can have objects as keys you can use this assertion to perform\n * a deep comparison.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n *\n * @name hasAnyDeepKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1569,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has at least one of the `keys` provided.\nSince Sets and Maps can have objects as keys you can use this assertion to perform\na deep comparison.\nYou can also provide a single object instead of a `keys` array and its keys\nwill be used as the expected set of keys.\n\n    assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n    assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n    assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n    assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n    assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n    assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);",
        "name": "hasAnyDeepKeys",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "Array",
                        "object"
                    ]
                },
                "name": "keys"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "hasAnyDeepKeys",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                44710,
                44856
            ],
            "filename": "assert.js",
            "lineno": 1589,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009461",
                "name": "assert.hasAnyDeepKeys",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "keys",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "hasAnyDeepKeys",
        "longname": "assert.hasAnyDeepKeys",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has all and only all of the `keys` provided.\n * Since Sets and Maps can have objects as keys you can use this assertion to perform\n * a deep comparison.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n *\n * @name hasAllDeepKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1595,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has all and only all of the `keys` provided.\nSince Sets and Maps can have objects as keys you can use this assertion to perform\na deep comparison.\nYou can also provide a single object instead of a `keys` array and its keys\nwill be used as the expected set of keys.\n\n    assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n    assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n    assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n    assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);",
        "name": "hasAllDeepKeys",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "Array",
                        "object"
                    ]
                },
                "name": "keys"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "hasAllDeepKeys",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45667,
                45813
            ],
            "filename": "assert.js",
            "lineno": 1613,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009492",
                "name": "assert.hasAllDeepKeys",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "keys",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "hasAllDeepKeys",
        "longname": "assert.hasAllDeepKeys",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` contains all of the `keys` provided.\n * Since Sets and Maps can have objects as keys you can use this assertion to perform\n * a deep comparison.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n *\n * @name containsAllDeepKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1619,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` contains all of the `keys` provided.\nSince Sets and Maps can have objects as keys you can use this assertion to perform\na deep comparison.\nYou can also provide a single object instead of a `keys` array and its keys\nwill be used as the expected set of keys.\n\n    assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n    assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n    assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n    assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);",
        "name": "containsAllDeepKeys",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "Array",
                        "object"
                    ]
                },
                "name": "keys"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "containsAllDeepKeys",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                46663,
                46834
            ],
            "filename": "assert.js",
            "lineno": 1637,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009523",
                "name": "assert.containsAllDeepKeys",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "keys",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "containsAllDeepKeys",
        "longname": "assert.containsAllDeepKeys",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` has none of the `keys` provided.\n * Since Sets and Maps can have objects as keys you can use this assertion to perform\n * a deep comparison.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n *\n * @name doesNotHaveAnyDeepKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1646,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` has none of the `keys` provided.\nSince Sets and Maps can have objects as keys you can use this assertion to perform\na deep comparison.\nYou can also provide a single object instead of a `keys` array and its keys\nwill be used as the expected set of keys.\n\n    assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n    assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n    assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n    assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);",
        "name": "doesNotHaveAnyDeepKeys",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "Array",
                        "object"
                    ]
                },
                "name": "keys"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "doesNotHaveAnyDeepKeys",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                47731,
                47909
            ],
            "filename": "assert.js",
            "lineno": 1664,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009554",
                "name": "assert.doesNotHaveAnyDeepKeys",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "keys",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "doesNotHaveAnyDeepKeys",
        "longname": "assert.doesNotHaveAnyDeepKeys",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` does not have at least one of the `keys` provided.\n * Since Sets and Maps can have objects as keys you can use this assertion to perform\n * a deep comparison.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n *\n * @name doesNotHaveAllDeepKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1673,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` does not have at least one of the `keys` provided.\nSince Sets and Maps can have objects as keys you can use this assertion to perform\na deep comparison.\nYou can also provide a single object instead of a `keys` array and its keys\nwill be used as the expected set of keys.\n\n    assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n    assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n    assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n    assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);",
        "name": "doesNotHaveAllDeepKeys",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "Array",
                        "object"
                    ]
                },
                "name": "keys"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "doesNotHaveAllDeepKeys",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                48814,
                48992
            ],
            "filename": "assert.js",
            "lineno": 1691,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009587",
                "name": "assert.doesNotHaveAllDeepKeys",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "keys",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "doesNotHaveAllDeepKeys",
        "longname": "assert.doesNotHaveAllDeepKeys",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n * instance of `errorLike`.\n * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n * instance as `errorLike`.\n * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n * message matching `errMsgMatcher`.\n *\n *     assert.throws(fn, 'Error thrown must have this msg');\n *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n *     assert.throws(fn, ReferenceError);\n *     assert.throws(fn, errorInstance);\n *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n *\n * @name throws\n * @alias throw\n * @alias Throw\n * @param {Function} fn\n * @param {Error} errorLike\n * @param {RegExp | string} errMsgMatcher\n * @param {string} msg\n * @returns {unknown}\n * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1700,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\ninstance of `errorLike`.\nIf `errorLike` is an `Error` instance, asserts that the error thrown is the same\ninstance as `errorLike`.\nIf `errMsgMatcher` is provided, it also asserts that the error thrown will have a\nmessage matching `errMsgMatcher`.\n\n    assert.throws(fn, 'Error thrown must have this msg');\n    assert.throws(fn, /Error thrown must have a msg that matches this/);\n    assert.throws(fn, ReferenceError);\n    assert.throws(fn, errorInstance);\n    assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n    assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n    assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n    assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);",
        "name": "throws",
        "alias": "Throw",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Error"
                    ]
                },
                "name": "errorLike"
            },
            {
                "type": {
                    "names": [
                        "RegExp",
                        "string"
                    ]
                },
                "name": "errMsgMatcher"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                }
            }
        ],
        "see": [
            "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types"
        ],
        "access": "public",
        "longname": "throws",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50286,
                50625
            ],
            "filename": "assert.js",
            "lineno": 1728,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009620",
                "name": "assert.throws",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn",
                    "errorLike",
                    "errMsgMatcher",
                    "msg"
                ]
            },
            "vars": {
                "errMsgMatcher": "assert.throws~errMsgMatcher",
                "errorLike": "assert.throws~errorLike",
                "assertErr": "assert.throws~assertErr"
            }
        },
        "undocumented": true,
        "name": "throws",
        "longname": "assert.throws",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50423,
                50448
            ],
            "filename": "assert.js",
            "lineno": 1730,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009641",
                "name": "errMsgMatcher",
                "type": "Identifier",
                "funcscope": "assert.throws",
                "value": "errorLike",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errMsgMatcher",
        "longname": "assert.throws~errMsgMatcher",
        "kind": "member",
        "memberof": "assert.throws",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50454,
                50470
            ],
            "filename": "assert.js",
            "lineno": 1731,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009645",
                "name": "errorLike",
                "type": "Literal",
                "funcscope": "assert.throws",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorLike",
        "longname": "assert.throws~errorLike",
        "kind": "member",
        "memberof": "assert.throws",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50483,
                50586
            ],
            "filename": "assert.js",
            "lineno": 1734,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009649",
                "name": "assertErr",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "assertErr",
        "longname": "assert.throws~assertErr",
        "kind": "member",
        "memberof": "assert.throws",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n * instance of `errorLike`.\n * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n * instance as `errorLike`.\n * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n * message matching `errMsgMatcher`.\n *\n *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n *     assert.doesNotThrow(fn, Error);\n *     assert.doesNotThrow(fn, errorInstance);\n *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n *\n * @name doesNotThrow\n * @param {Function} fn\n * @param {Error} errorLike\n * @param {RegExp | string} errMsgMatcher\n * @param {string} message\n * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1741,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\ninstance of `errorLike`.\nIf `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\ninstance as `errorLike`.\nIf `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\nmessage matching `errMsgMatcher`.\n\n    assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n    assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n    assert.doesNotThrow(fn, Error);\n    assert.doesNotThrow(fn, errorInstance);\n    assert.doesNotThrow(fn, Error, 'Error must not have this message');\n    assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n    assert.doesNotThrow(fn, Error, /Error must not match this/);\n    assert.doesNotThrow(fn, errorInstance, /Error must not match this/);",
        "name": "doesNotThrow",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Error"
                    ]
                },
                "name": "errorLike"
            },
            {
                "type": {
                    "names": [
                        "RegExp",
                        "string"
                    ]
                },
                "name": "errMsgMatcher"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            }
        ],
        "see": [
            "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types"
        ],
        "access": "public",
        "longname": "doesNotThrow",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51804,
                52115
            ],
            "filename": "assert.js",
            "lineno": 1766,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009672",
                "name": "assert.doesNotThrow",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn",
                    "errorLike",
                    "errMsgMatcher",
                    "message"
                ]
            },
            "vars": {
                "errMsgMatcher": "assert.doesNotThrow~errMsgMatcher",
                "errorLike": "assert.doesNotThrow~errorLike"
            }
        },
        "undocumented": true,
        "name": "doesNotThrow",
        "longname": "assert.doesNotThrow",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51951,
                51976
            ],
            "filename": "assert.js",
            "lineno": 1768,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009693",
                "name": "errMsgMatcher",
                "type": "Identifier",
                "funcscope": "assert.doesNotThrow",
                "value": "errorLike",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errMsgMatcher",
        "longname": "assert.doesNotThrow~errMsgMatcher",
        "kind": "member",
        "memberof": "assert.doesNotThrow",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51982,
                51998
            ],
            "filename": "assert.js",
            "lineno": 1769,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009697",
                "name": "errorLike",
                "type": "Literal",
                "funcscope": "assert.doesNotThrow",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorLike",
        "longname": "assert.doesNotThrow~errorLike",
        "kind": "member",
        "memberof": "assert.doesNotThrow",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Compares two values using `operator`.\n *\n *     assert.operator(1, '<', 2, 'everything is ok');\n *     assert.operator(1, '>', 2, 'this will fail');\n *\n * @name operator\n * @param {unknown} val\n * @param {string} operator\n * @param {unknown} val2\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1778,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Compares two values using `operator`.\n\n    assert.operator(1, '<', 2, 'everything is ok');\n    assert.operator(1, '>', 2, 'this will fail');",
        "name": "operator",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "operator"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val2"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "operator",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52410,
                53379
            ],
            "filename": "assert.js",
            "lineno": 1791,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009719",
                "name": "assert.operator",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "operator",
                    "val2",
                    "msg"
                ]
            },
            "vars": {
                "ok": "assert.operator~ok",
                "msg": "assert.operator~msg",
                "test": "assert.operator~test"
            }
        },
        "undocumented": true,
        "name": "operator",
        "longname": "assert.operator",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52472,
                52474
            ],
            "filename": "assert.js",
            "lineno": 1792,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009730",
                "name": "ok"
            }
        },
        "undocumented": true,
        "name": "ok",
        "longname": "assert.operator~ok",
        "kind": "member",
        "memberof": "assert.operator",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52519,
                52535
            ],
            "filename": "assert.js",
            "lineno": 1795,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009737",
                "name": "ok",
                "type": "BinaryExpression",
                "funcscope": "assert.operator",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ok",
        "longname": "assert.operator~ok",
        "kind": "member",
        "memberof": "assert.operator",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52572,
                52589
            ],
            "filename": "assert.js",
            "lineno": 1798,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009746",
                "name": "ok",
                "type": "BinaryExpression",
                "funcscope": "assert.operator",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ok",
        "longname": "assert.operator~ok",
        "kind": "member",
        "memberof": "assert.operator",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52624,
                52639
            ],
            "filename": "assert.js",
            "lineno": 1801,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009755",
                "name": "ok",
                "type": "BinaryExpression",
                "funcscope": "assert.operator",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ok",
        "longname": "assert.operator~ok",
        "kind": "member",
        "memberof": "assert.operator",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52675,
                52691
            ],
            "filename": "assert.js",
            "lineno": 1804,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009764",
                "name": "ok",
                "type": "BinaryExpression",
                "funcscope": "assert.operator",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ok",
        "longname": "assert.operator~ok",
        "kind": "member",
        "memberof": "assert.operator",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52726,
                52741
            ],
            "filename": "assert.js",
            "lineno": 1807,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009773",
                "name": "ok",
                "type": "BinaryExpression",
                "funcscope": "assert.operator",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ok",
        "longname": "assert.operator~ok",
        "kind": "member",
        "memberof": "assert.operator",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52777,
                52793
            ],
            "filename": "assert.js",
            "lineno": 1810,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009782",
                "name": "ok",
                "type": "BinaryExpression",
                "funcscope": "assert.operator",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ok",
        "longname": "assert.operator~ok",
        "kind": "member",
        "memberof": "assert.operator",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52829,
                52845
            ],
            "filename": "assert.js",
            "lineno": 1813,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009791",
                "name": "ok",
                "type": "BinaryExpression",
                "funcscope": "assert.operator",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ok",
        "longname": "assert.operator~ok",
        "kind": "member",
        "memberof": "assert.operator",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52882,
                52899
            ],
            "filename": "assert.js",
            "lineno": 1816,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009800",
                "name": "ok",
                "type": "BinaryExpression",
                "funcscope": "assert.operator",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ok",
        "longname": "assert.operator~ok",
        "kind": "member",
        "memberof": "assert.operator",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52933,
                52961
            ],
            "filename": "assert.js",
            "lineno": 1819,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009808",
                "name": "msg",
                "type": "ConditionalExpression",
                "funcscope": "assert.operator",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assert.operator~msg",
        "kind": "member",
        "memberof": "assert.operator",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                53111,
                53163
            ],
            "filename": "assert.js",
            "lineno": 1826,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009831",
                "name": "test",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "test",
        "longname": "assert.operator~test",
        "kind": "member",
        "memberof": "assert.operator",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n *\n *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n *\n * @name closeTo\n * @param {number} act\n * @param {number} exp\n * @param {number} delta\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1834,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that the target is equal `expected`, to within a +/- `delta` range.\n\n    assert.closeTo(1.5, 1, 0.5, 'numbers are close');",
        "name": "closeTo",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "act"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "delta"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "closeTo",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                53654,
                53781
            ],
            "filename": "assert.js",
            "lineno": 1846,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009883",
                "name": "assert.closeTo",
                "type": "FunctionExpression",
                "paramnames": [
                    "act",
                    "exp",
                    "delta",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "closeTo",
        "longname": "assert.closeTo",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n *\n *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n *\n * @name approximately\n * @param {number} act\n * @param {number} exp\n * @param {number} delta\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1850,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that the target is equal `expected`, to within a +/- `delta` range.\n\n    assert.approximately(1.5, 1, 0.5, 'numbers are close');",
        "name": "approximately",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "act"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "delta"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "approximately",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                54068,
                54226
            ],
            "filename": "assert.js",
            "lineno": 1862,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009912",
                "name": "assert.approximately",
                "type": "FunctionExpression",
                "paramnames": [
                    "act",
                    "exp",
                    "delta",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "approximately",
        "longname": "assert.approximately",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `set1` and `set2` have the same members in any order. Uses a\n * strict equality check (===).\n *\n *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n *\n * @name sameMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1869,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `set1` and `set2` have the same members in any order. Uses a\nstrict equality check (===).\n\n    assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');",
        "name": "sameMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set2"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "sameMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                54522,
                54654
            ],
            "filename": "assert.js",
            "lineno": 1881,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009941",
                "name": "assert.sameMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "set1",
                    "set2",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "sameMembers",
        "longname": "assert.sameMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `set1` and `set2` don't have the same members in any order.\n * Uses a strict equality check (===).\n *\n *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n *\n * @name notSameMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1885,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `set1` and `set2` don't have the same members in any order.\nUses a strict equality check (===).\n\n    assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');",
        "name": "notSameMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set2"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notSameMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                54966,
                55129
            ],
            "filename": "assert.js",
            "lineno": 1897,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100009970",
                "name": "assert.notSameMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "set1",
                    "set2",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notSameMembers",
        "longname": "assert.notSameMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `set1` and `set2` have the same members in any order. Uses a\n * deep equality check.\n *\n *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n *\n * @name sameDeepMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1906,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `set1` and `set2` have the same members in any order. Uses a\ndeep equality check.\n\n    assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');",
        "name": "sameDeepMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set2"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "sameDeepMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                55470,
                55636
            ],
            "filename": "assert.js",
            "lineno": 1918,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010001",
                "name": "assert.sameDeepMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "set1",
                    "set2",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "sameDeepMembers",
        "longname": "assert.sameDeepMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `set1` and `set2` don't have the same members in any order.\n * Uses a deep equality check.\n *\n *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n *\n * @name notSameDeepMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1927,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `set1` and `set2` don't have the same members in any order.\nUses a deep equality check.\n\n    assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');",
        "name": "notSameDeepMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set2"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notSameDeepMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                55993,
                56169
            ],
            "filename": "assert.js",
            "lineno": 1939,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010032",
                "name": "assert.notSameDeepMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "set1",
                    "set2",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notSameDeepMembers",
        "longname": "assert.notSameDeepMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `set1` and `set2` have the same members in the same order.\n * Uses a strict equality check (===).\n *\n *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n *\n * @name sameOrderedMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1948,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `set1` and `set2` have the same members in the same order.\nUses a strict equality check (===).\n\n    assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');",
        "name": "sameOrderedMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set2"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "sameOrderedMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                56492,
                56667
            ],
            "filename": "assert.js",
            "lineno": 1960,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010065",
                "name": "assert.sameOrderedMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "set1",
                    "set2",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "sameOrderedMembers",
        "longname": "assert.sameOrderedMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `set1` and `set2` don't have the same members in the same\n * order. Uses a strict equality check (===).\n *\n *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n *\n * @name notSameOrderedMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1969,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `set1` and `set2` don't have the same members in the same\norder. Uses a strict equality check (===).\n\n    assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');",
        "name": "notSameOrderedMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set2"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notSameOrderedMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                57006,
                57191
            ],
            "filename": "assert.js",
            "lineno": 1981,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010096",
                "name": "assert.notSameOrderedMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "set1",
                    "set2",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notSameOrderedMembers",
        "longname": "assert.notSameOrderedMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `set1` and `set2` have the same members in the same order.\n * Uses a deep equality check.\n *\n *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n *\n * @name sameDeepOrderedMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 1990,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `set1` and `set2` have the same members in the same order.\nUses a deep equality check.\n\n    assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');",
        "name": "sameDeepOrderedMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set2"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "sameDeepOrderedMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                57561,
                57749
            ],
            "filename": "assert.js",
            "lineno": 2002,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010129",
                "name": "assert.sameDeepOrderedMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "set1",
                    "set2",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "sameDeepOrderedMembers",
        "longname": "assert.sameDeepOrderedMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `set1` and `set2` don't have the same members in the same\n * order. Uses a deep equality check.\n *\n *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n *\n * @name notSameDeepOrderedMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2011,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `set1` and `set2` don't have the same members in the same\norder. Uses a deep equality check.\n\n    assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n    assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');",
        "name": "notSameDeepOrderedMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "set2"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notSameDeepOrderedMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58277,
                58475
            ],
            "filename": "assert.js",
            "lineno": 2024,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010162",
                "name": "assert.notSameDeepOrderedMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "set1",
                    "set2",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notSameDeepOrderedMembers",
        "longname": "assert.notSameDeepOrderedMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `subset` is included in `superset` in any order. Uses a\n * strict equality check (===). Duplicates are ignored.\n *\n *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n *\n * @name includeMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2033,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `subset` is included in `superset` in any order. Uses a\nstrict equality check (===). Duplicates are ignored.\n\n    assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');",
        "name": "includeMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "superset"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "subset"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "includeMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58805,
                58962
            ],
            "filename": "assert.js",
            "lineno": 2045,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010197",
                "name": "assert.includeMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "superset",
                    "subset",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "includeMembers",
        "longname": "assert.includeMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `subset` isn't included in `superset` in any order. Uses a\n * strict equality check (===). Duplicates are ignored.\n *\n *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n *\n * @name notIncludeMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2051,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `subset` isn't included in `superset` in any order. Uses a\nstrict equality check (===). Duplicates are ignored.\n\n    assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');",
        "name": "notIncludeMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "superset"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "subset"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notIncludeMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59302,
                59481
            ],
            "filename": "assert.js",
            "lineno": 2063,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010224",
                "name": "assert.notIncludeMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "superset",
                    "subset",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notIncludeMembers",
        "longname": "assert.notIncludeMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `subset` is included in `superset` in any order. Uses a deep\n * equality check. Duplicates are ignored.\n *\n *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n *\n * @name includeDeepMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2072,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `subset` is included in `superset` in any order. Uses a deep\nequality check. Duplicates are ignored.\n\n    assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');",
        "name": "includeDeepMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "superset"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "subset"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "includeDeepMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59858,
                60040
            ],
            "filename": "assert.js",
            "lineno": 2084,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010253",
                "name": "assert.includeDeepMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "superset",
                    "subset",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "includeDeepMembers",
        "longname": "assert.includeDeepMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `subset` isn't included in `superset` in any order. Uses a\n * deep equality check. Duplicates are ignored.\n *\n *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n *\n * @name notIncludeDeepMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2093,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `subset` isn't included in `superset` in any order. Uses a\ndeep equality check. Duplicates are ignored.\n\n    assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');",
        "name": "notIncludeDeepMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "superset"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "subset"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notIncludeDeepMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60420,
                60612
            ],
            "filename": "assert.js",
            "lineno": 2105,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010282",
                "name": "assert.notIncludeDeepMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "superset",
                    "subset",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notIncludeDeepMembers",
        "longname": "assert.notIncludeDeepMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `subset` is included in `superset` in the same order\n * beginning with the first element in `superset`. Uses a strict equality\n * check (===).\n *\n *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n *\n * @name includeOrderedMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2114,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `subset` is included in `superset` in the same order\nbeginning with the first element in `superset`. Uses a strict equality\ncheck (===).\n\n    assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');",
        "name": "includeOrderedMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "superset"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "subset"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "includeOrderedMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60992,
                61183
            ],
            "filename": "assert.js",
            "lineno": 2127,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010313",
                "name": "assert.includeOrderedMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "superset",
                    "subset",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "includeOrderedMembers",
        "longname": "assert.includeOrderedMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `subset` isn't included in `superset` in the same order\n * beginning with the first element in `superset`. Uses a strict equality\n * check (===).\n *\n *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n *\n * @name notIncludeOrderedMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2136,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `subset` isn't included in `superset` in the same order\nbeginning with the first element in `superset`. Uses a strict equality\ncheck (===).\n\n    assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n    assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');",
        "name": "notIncludeOrderedMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "superset"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "subset"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notIncludeOrderedMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                61670,
                61871
            ],
            "filename": "assert.js",
            "lineno": 2150,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010342",
                "name": "assert.notIncludeOrderedMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "superset",
                    "subset",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notIncludeOrderedMembers",
        "longname": "assert.notIncludeOrderedMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `subset` is included in `superset` in the same order\n * beginning with the first element in `superset`. Uses a deep equality\n * check.\n *\n *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n *\n * @name includeDeepOrderedMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2159,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `subset` is included in `superset` in the same order\nbeginning with the first element in `superset`. Uses a deep equality\ncheck.\n\n    assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');",
        "name": "includeDeepOrderedMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "superset"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "subset"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "includeDeepOrderedMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                62291,
                62495
            ],
            "filename": "assert.js",
            "lineno": 2172,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010373",
                "name": "assert.includeDeepOrderedMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "superset",
                    "subset",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "includeDeepOrderedMembers",
        "longname": "assert.includeDeepOrderedMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `subset` isn't included in `superset` in the same order\n * beginning with the first element in `superset`. Uses a deep equality\n * check.\n *\n *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n *\n * @name notIncludeDeepOrderedMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2181,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `subset` isn't included in `superset` in the same order\nbeginning with the first element in `superset`. Uses a deep equality\ncheck.\n\n    assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n    assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n    assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');",
        "name": "notIncludeDeepOrderedMembers",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "superset"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "subset"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "notIncludeDeepOrderedMembers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                63204,
                63418
            ],
            "filename": "assert.js",
            "lineno": 2196,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010404",
                "name": "assert.notIncludeDeepOrderedMembers",
                "type": "FunctionExpression",
                "paramnames": [
                    "superset",
                    "subset",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "notIncludeDeepOrderedMembers",
        "longname": "assert.notIncludeDeepOrderedMembers",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n *\n *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n *\n * @name oneOf\n * @param {*} inList\n * @param {Array<*>} list\n * @param {string} msg\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2205,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n\n    assert.oneOf(1, [ 2, 1 ], 'Not found in list');",
        "name": "oneOf",
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "inList"
            },
            {
                "type": {
                    "names": [
                        "Array.<*>"
                    ]
                },
                "name": "list"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "oneOf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                63673,
                63788
            ],
            "filename": "assert.js",
            "lineno": 2216,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010437",
                "name": "assert.oneOf",
                "type": "FunctionExpression",
                "paramnames": [
                    "inList",
                    "list",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "oneOf",
        "longname": "assert.oneOf",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that the target is an iterable, which means that it has a iterator\n * with the exception of `String.`\n *\n *     assert.isIterable([1, 2]);\n *\n * @param {unknown} obj\n * @param {string} [msg]\n * @public\n */",
        "meta": {
            "range": [
                64012,
                64304
            ],
            "filename": "assert.js",
            "lineno": 2230,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010464",
                "name": "assert.isIterable",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "msg"
                ]
            },
            "vars": {
                "msg": "assert.isIterable~msg"
            }
        },
        "description": "Asserts that the target is an iterable, which means that it has a iterator\nwith the exception of `String.`\n\n    assert.isIterable([1, 2]);",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "name": "msg"
            }
        ],
        "access": "public",
        "name": "isIterable",
        "longname": "assert.isIterable",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                64109,
                64231
            ],
            "filename": "assert.js",
            "lineno": 2232,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010485",
                "name": "msg",
                "type": "ConditionalExpression",
                "funcscope": "assert.isIterable",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assert.isIterable~msg",
        "kind": "member",
        "memberof": "assert.isIterable",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that a function changes the value of a property.\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 22 };\n *     assert.changes(fn, obj, 'val');\n *\n * @name changes\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2240,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that a function changes the value of a property.\n\n    var obj = { val: 10 };\n    var fn = function() { obj.val = 22 };\n    assert.changes(fn, obj, 'val');",
        "name": "changes",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "modifier function",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object or getter function",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "property name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "changes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                64697,
                64915
            ],
            "filename": "assert.js",
            "lineno": 2254,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010512",
                "name": "assert.changes",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn",
                    "obj",
                    "prop",
                    "msg"
                ]
            },
            "vars": {
                "msg": "assert.changes~msg",
                "prop": "assert.changes~prop"
            }
        },
        "undocumented": true,
        "name": "changes",
        "longname": "assert.changes",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                64811,
                64821
            ],
            "filename": "assert.js",
            "lineno": 2256,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010535",
                "name": "msg",
                "type": "Identifier",
                "funcscope": "assert.changes",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assert.changes~msg",
        "kind": "member",
        "memberof": "assert.changes",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                64827,
                64838
            ],
            "filename": "assert.js",
            "lineno": 2257,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010539",
                "name": "prop",
                "type": "Literal",
                "funcscope": "assert.changes",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "assert.changes~prop",
        "kind": "member",
        "memberof": "assert.changes",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that a function changes the value of a property by an amount (delta).\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val += 2 };\n *     assert.changesBy(fn, obj, 'val', 2);\n *\n * @name changesBy\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {number} delta msg change amount (delta)\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2263,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that a function changes the value of a property by an amount (delta).\n\n    var obj = { val: 10 };\n    var fn = function() { obj.val += 2 };\n    assert.changesBy(fn, obj, 'val', 2);",
        "name": "changesBy",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "modifier function",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object or getter function",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "property name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "msg change amount (delta)",
                "name": "delta"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "changesBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65387,
                65727
            ],
            "filename": "assert.js",
            "lineno": 2278,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010559",
                "name": "assert.changesBy",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn",
                    "obj",
                    "prop",
                    "delta",
                    "msg"
                ]
            },
            "vars": {
                "tmpMsg": "assert.changesBy~tmpMsg",
                "delta": "assert.changesBy~delta",
                "msg": "assert.changesBy~msg",
                "prop": "assert.changesBy~prop"
            }
        },
        "undocumented": true,
        "name": "changesBy",
        "longname": "assert.changesBy",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65514,
                65528
            ],
            "filename": "assert.js",
            "lineno": 2280,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010583",
                "name": "tmpMsg",
                "type": "Identifier",
                "value": "delta"
            }
        },
        "undocumented": true,
        "name": "tmpMsg",
        "longname": "assert.changesBy~tmpMsg",
        "kind": "member",
        "memberof": "assert.changesBy",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65534,
                65546
            ],
            "filename": "assert.js",
            "lineno": 2281,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010587",
                "name": "delta",
                "type": "Identifier",
                "funcscope": "assert.changesBy",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "delta",
        "longname": "assert.changesBy~delta",
        "kind": "member",
        "memberof": "assert.changesBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65552,
                65564
            ],
            "filename": "assert.js",
            "lineno": 2282,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010591",
                "name": "msg",
                "type": "Identifier",
                "funcscope": "assert.changesBy",
                "value": "tmpMsg",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assert.changesBy~msg",
        "kind": "member",
        "memberof": "assert.changesBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65609,
                65621
            ],
            "filename": "assert.js",
            "lineno": 2284,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010602",
                "name": "delta",
                "type": "Identifier",
                "funcscope": "assert.changesBy",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "delta",
        "longname": "assert.changesBy~delta",
        "kind": "member",
        "memberof": "assert.changesBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65627,
                65638
            ],
            "filename": "assert.js",
            "lineno": 2285,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010606",
                "name": "prop",
                "type": "Literal",
                "funcscope": "assert.changesBy",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "assert.changesBy~prop",
        "kind": "member",
        "memberof": "assert.changesBy",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that a function does not change the value of a property.\n *\n *   var obj = { val: 10 };\n *   var fn = function() { console.log('foo'); };\n *   assert.doesNotChange(fn, obj, 'val');\n *\n * @name doesNotChange\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {string} msg _optional_\n * @returns {unknown}\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2291,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that a function does not change the value of a property.\n\n  var obj = { val: 10 };\n  var fn = function() { console.log('foo'); };\n  assert.doesNotChange(fn, obj, 'val');",
        "name": "doesNotChange",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "modifier function",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object or getter function",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "property name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                }
            }
        ],
        "access": "public",
        "longname": "doesNotChange",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66163,
                66417
            ],
            "filename": "assert.js",
            "lineno": 2306,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010630",
                "name": "assert.doesNotChange",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn",
                    "obj",
                    "prop",
                    "msg"
                ]
            },
            "vars": {
                "msg": "assert.doesNotChange~msg",
                "prop": "assert.doesNotChange~prop"
            }
        },
        "undocumented": true,
        "name": "doesNotChange",
        "longname": "assert.doesNotChange",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66283,
                66293
            ],
            "filename": "assert.js",
            "lineno": 2308,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010653",
                "name": "msg",
                "type": "Identifier",
                "funcscope": "assert.doesNotChange",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assert.doesNotChange~msg",
        "kind": "member",
        "memberof": "assert.doesNotChange",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66299,
                66310
            ],
            "filename": "assert.js",
            "lineno": 2309,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010657",
                "name": "prop",
                "type": "Literal",
                "funcscope": "assert.doesNotChange",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "assert.doesNotChange~prop",
        "kind": "member",
        "memberof": "assert.doesNotChange",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val += 10 };\n *     assert.changesButNotBy(fn, obj, 'val', 5);\n *\n * @name changesButNotBy\n * @param {Function} fn - modifier function\n * @param {object} obj - object or getter function\n * @param {string} prop - property name _optional_\n * @param {number} delta - change amount (delta)\n * @param {string} msg - message _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2318,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n\n    var obj = { val: 10 };\n    var fn = function() { obj.val += 10 };\n    assert.changesButNotBy(fn, obj, 'val', 5);",
        "name": "changesButNotBy",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "modifier function",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object or getter function",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "property name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "change amount (delta)",
                "name": "delta"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "message _optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "changesButNotBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66955,
                67325
            ],
            "filename": "assert.js",
            "lineno": 2333,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010679",
                "name": "assert.changesButNotBy",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn",
                    "obj",
                    "prop",
                    "delta",
                    "msg"
                ]
            },
            "vars": {
                "tmpMsg": "assert.changesButNotBy~tmpMsg",
                "delta": "assert.changesButNotBy~delta",
                "msg": "assert.changesButNotBy~msg",
                "prop": "assert.changesButNotBy~prop"
            }
        },
        "undocumented": true,
        "name": "changesButNotBy",
        "longname": "assert.changesButNotBy",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67088,
                67102
            ],
            "filename": "assert.js",
            "lineno": 2335,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010703",
                "name": "tmpMsg",
                "type": "Identifier",
                "value": "delta"
            }
        },
        "undocumented": true,
        "name": "tmpMsg",
        "longname": "assert.changesButNotBy~tmpMsg",
        "kind": "member",
        "memberof": "assert.changesButNotBy",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67108,
                67120
            ],
            "filename": "assert.js",
            "lineno": 2336,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010707",
                "name": "delta",
                "type": "Identifier",
                "funcscope": "assert.changesButNotBy",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "delta",
        "longname": "assert.changesButNotBy~delta",
        "kind": "member",
        "memberof": "assert.changesButNotBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67126,
                67138
            ],
            "filename": "assert.js",
            "lineno": 2337,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010711",
                "name": "msg",
                "type": "Identifier",
                "funcscope": "assert.changesButNotBy",
                "value": "tmpMsg",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assert.changesButNotBy~msg",
        "kind": "member",
        "memberof": "assert.changesButNotBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67183,
                67195
            ],
            "filename": "assert.js",
            "lineno": 2339,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010722",
                "name": "delta",
                "type": "Identifier",
                "funcscope": "assert.changesButNotBy",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "delta",
        "longname": "assert.changesButNotBy~delta",
        "kind": "member",
        "memberof": "assert.changesButNotBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67201,
                67212
            ],
            "filename": "assert.js",
            "lineno": 2340,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010726",
                "name": "prop",
                "type": "Literal",
                "funcscope": "assert.changesButNotBy",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "assert.changesButNotBy~prop",
        "kind": "member",
        "memberof": "assert.changesButNotBy",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that a function increases a numeric object property.\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 13 };\n *     assert.increases(fn, obj, 'val');\n *\n * @public\n * @name increases\n * @param {Function} fn - modifier function\n * @param {object} obj - object or getter function\n * @param {string} prop - property name _optional_\n * @param {string} msg - message _optional_\n * @returns {unknown}\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2348,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that a function increases a numeric object property.\n\n    var obj = { val: 10 };\n    var fn = function() { obj.val = 13 };\n    assert.increases(fn, obj, 'val');",
        "access": "public",
        "name": "increases",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "modifier function",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object or getter function",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "property name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "message _optional_",
                "name": "msg"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                }
            }
        ],
        "longname": "increases",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67764,
                67995
            ],
            "filename": "assert.js",
            "lineno": 2363,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010754",
                "name": "assert.increases",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn",
                    "obj",
                    "prop",
                    "msg"
                ]
            },
            "vars": {
                "msg": "assert.increases~msg",
                "prop": "assert.increases~prop"
            }
        },
        "undocumented": true,
        "name": "increases",
        "longname": "assert.increases",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67880,
                67890
            ],
            "filename": "assert.js",
            "lineno": 2365,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010777",
                "name": "msg",
                "type": "Identifier",
                "funcscope": "assert.increases",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assert.increases~msg",
        "kind": "member",
        "memberof": "assert.increases",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67896,
                67907
            ],
            "filename": "assert.js",
            "lineno": 2366,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010781",
                "name": "prop",
                "type": "Literal",
                "funcscope": "assert.increases",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "assert.increases~prop",
        "kind": "member",
        "memberof": "assert.increases",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val += 10 };\n *     assert.increasesBy(fn, obj, 'val', 10);\n *\n * @public\n * @name increasesBy\n * @param {Function} fn - modifier function\n * @param {object} obj - object or getter function\n * @param {string} prop - property name _optional_\n * @param {number} delta - change amount (delta)\n * @param {string} msg - message _optional_\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2372,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n\n    var obj = { val: 10 };\n    var fn = function() { obj.val += 10 };\n    assert.increasesBy(fn, obj, 'val', 10);",
        "access": "public",
        "name": "increasesBy",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "modifier function",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object or getter function",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "property name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "change amount (delta)",
                "name": "delta"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "message _optional_",
                "name": "msg"
            }
        ],
        "longname": "increasesBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68520,
                68876
            ],
            "filename": "assert.js",
            "lineno": 2387,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010801",
                "name": "assert.increasesBy",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn",
                    "obj",
                    "prop",
                    "delta",
                    "msg"
                ]
            },
            "vars": {
                "tmpMsg": "assert.increasesBy~tmpMsg",
                "delta": "assert.increasesBy~delta",
                "msg": "assert.increasesBy~msg",
                "prop": "assert.increasesBy~prop"
            }
        },
        "undocumented": true,
        "name": "increasesBy",
        "longname": "assert.increasesBy",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68649,
                68663
            ],
            "filename": "assert.js",
            "lineno": 2389,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010825",
                "name": "tmpMsg",
                "type": "Identifier",
                "value": "delta"
            }
        },
        "undocumented": true,
        "name": "tmpMsg",
        "longname": "assert.increasesBy~tmpMsg",
        "kind": "member",
        "memberof": "assert.increasesBy",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68669,
                68681
            ],
            "filename": "assert.js",
            "lineno": 2390,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010829",
                "name": "delta",
                "type": "Identifier",
                "funcscope": "assert.increasesBy",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "delta",
        "longname": "assert.increasesBy~delta",
        "kind": "member",
        "memberof": "assert.increasesBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68687,
                68699
            ],
            "filename": "assert.js",
            "lineno": 2391,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010833",
                "name": "msg",
                "type": "Identifier",
                "funcscope": "assert.increasesBy",
                "value": "tmpMsg",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assert.increasesBy~msg",
        "kind": "member",
        "memberof": "assert.increasesBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68744,
                68756
            ],
            "filename": "assert.js",
            "lineno": 2393,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010844",
                "name": "delta",
                "type": "Identifier",
                "funcscope": "assert.increasesBy",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "delta",
        "longname": "assert.increasesBy~delta",
        "kind": "member",
        "memberof": "assert.increasesBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68762,
                68773
            ],
            "filename": "assert.js",
            "lineno": 2394,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010848",
                "name": "prop",
                "type": "Literal",
                "funcscope": "assert.increasesBy",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "assert.increasesBy~prop",
        "kind": "member",
        "memberof": "assert.increasesBy",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that a function does not increase a numeric object property.\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 8 };\n *     assert.doesNotIncrease(fn, obj, 'val');\n *\n * @name doesNotIncrease\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @returns {Assertion}\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2402,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that a function does not increase a numeric object property.\n\n    var obj = { val: 10 };\n    var fn = function() { obj.val = 8 };\n    assert.doesNotIncrease(fn, obj, 'val');",
        "name": "doesNotIncrease",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "modifier function",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object or getter function",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "property name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Assertion"
                    ]
                }
            }
        ],
        "access": "public",
        "longname": "doesNotIncrease",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69320,
                69580
            ],
            "filename": "assert.js",
            "lineno": 2417,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010872",
                "name": "assert.doesNotIncrease",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn",
                    "obj",
                    "prop",
                    "msg"
                ]
            },
            "vars": {
                "msg": "assert.doesNotIncrease~msg",
                "prop": "assert.doesNotIncrease~prop"
            }
        },
        "undocumented": true,
        "name": "doesNotIncrease",
        "longname": "assert.doesNotIncrease",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69442,
                69452
            ],
            "filename": "assert.js",
            "lineno": 2419,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010895",
                "name": "msg",
                "type": "Identifier",
                "funcscope": "assert.doesNotIncrease",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assert.doesNotIncrease~msg",
        "kind": "member",
        "memberof": "assert.doesNotIncrease",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69458,
                69469
            ],
            "filename": "assert.js",
            "lineno": 2420,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010899",
                "name": "prop",
                "type": "Literal",
                "funcscope": "assert.doesNotIncrease",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "assert.doesNotIncrease~prop",
        "kind": "member",
        "memberof": "assert.doesNotIncrease",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 15 };\n *     assert.increasesButNotBy(fn, obj, 'val', 10);\n *\n * @name increasesButNotBy\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {number} delta change amount (delta)\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2429,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n\n    var obj = { val: 10 };\n    var fn = function() { obj.val = 15 };\n    assert.increasesButNotBy(fn, obj, 'val', 10);",
        "name": "increasesButNotBy",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "modifier function",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object or getter function",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "property name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "change amount (delta)",
                "name": "delta"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "increasesButNotBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70104,
                70480
            ],
            "filename": "assert.js",
            "lineno": 2444,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010921",
                "name": "assert.increasesButNotBy",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn",
                    "obj",
                    "prop",
                    "delta",
                    "msg"
                ]
            },
            "vars": {
                "tmpMsg": "assert.increasesButNotBy~tmpMsg",
                "delta": "assert.increasesButNotBy~delta",
                "msg": "assert.increasesButNotBy~msg",
                "prop": "assert.increasesButNotBy~prop"
            }
        },
        "undocumented": true,
        "name": "increasesButNotBy",
        "longname": "assert.increasesButNotBy",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70239,
                70253
            ],
            "filename": "assert.js",
            "lineno": 2446,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010945",
                "name": "tmpMsg",
                "type": "Identifier",
                "value": "delta"
            }
        },
        "undocumented": true,
        "name": "tmpMsg",
        "longname": "assert.increasesButNotBy~tmpMsg",
        "kind": "member",
        "memberof": "assert.increasesButNotBy",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70259,
                70271
            ],
            "filename": "assert.js",
            "lineno": 2447,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010949",
                "name": "delta",
                "type": "Identifier",
                "funcscope": "assert.increasesButNotBy",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "delta",
        "longname": "assert.increasesButNotBy~delta",
        "kind": "member",
        "memberof": "assert.increasesButNotBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70277,
                70289
            ],
            "filename": "assert.js",
            "lineno": 2448,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010953",
                "name": "msg",
                "type": "Identifier",
                "funcscope": "assert.increasesButNotBy",
                "value": "tmpMsg",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assert.increasesButNotBy~msg",
        "kind": "member",
        "memberof": "assert.increasesButNotBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70334,
                70346
            ],
            "filename": "assert.js",
            "lineno": 2450,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010964",
                "name": "delta",
                "type": "Identifier",
                "funcscope": "assert.increasesButNotBy",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "delta",
        "longname": "assert.increasesButNotBy~delta",
        "kind": "member",
        "memberof": "assert.increasesButNotBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70352,
                70363
            ],
            "filename": "assert.js",
            "lineno": 2451,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010968",
                "name": "prop",
                "type": "Literal",
                "funcscope": "assert.increasesButNotBy",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "assert.increasesButNotBy~prop",
        "kind": "member",
        "memberof": "assert.increasesButNotBy",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that a function decreases a numeric object property.\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 5 };\n *     assert.decreases(fn, obj, 'val');\n *\n * @name decreases\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @returns {Assertion}\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2459,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that a function decreases a numeric object property.\n\n    var obj = { val: 10 };\n    var fn = function() { obj.val = 5 };\n    assert.decreases(fn, obj, 'val');",
        "name": "decreases",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "modifier function",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object or getter function",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "property name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Assertion"
                    ]
                }
            }
        ],
        "access": "public",
        "longname": "decreases",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70904,
                71135
            ],
            "filename": "assert.js",
            "lineno": 2474,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100010996",
                "name": "assert.decreases",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn",
                    "obj",
                    "prop",
                    "msg"
                ]
            },
            "vars": {
                "msg": "assert.decreases~msg",
                "prop": "assert.decreases~prop"
            }
        },
        "undocumented": true,
        "name": "decreases",
        "longname": "assert.decreases",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71020,
                71030
            ],
            "filename": "assert.js",
            "lineno": 2476,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011019",
                "name": "msg",
                "type": "Identifier",
                "funcscope": "assert.decreases",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assert.decreases~msg",
        "kind": "member",
        "memberof": "assert.decreases",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71036,
                71047
            ],
            "filename": "assert.js",
            "lineno": 2477,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011023",
                "name": "prop",
                "type": "Literal",
                "funcscope": "assert.decreases",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "assert.decreases~prop",
        "kind": "member",
        "memberof": "assert.decreases",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val -= 5 };\n *     assert.decreasesBy(fn, obj, 'val', 5);\n *\n * @name decreasesBy\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {number} delta change amount (delta)\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2483,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n\n    var obj = { val: 10 };\n    var fn = function() { obj.val -= 5 };\n    assert.decreasesBy(fn, obj, 'val', 5);",
        "name": "decreasesBy",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "modifier function",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object or getter function",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "property name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "change amount (delta)",
                "name": "delta"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "decreasesBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71639,
                71995
            ],
            "filename": "assert.js",
            "lineno": 2498,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011043",
                "name": "assert.decreasesBy",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn",
                    "obj",
                    "prop",
                    "delta",
                    "msg"
                ]
            },
            "vars": {
                "tmpMsg": "assert.decreasesBy~tmpMsg",
                "delta": "assert.decreasesBy~delta",
                "msg": "assert.decreasesBy~msg",
                "prop": "assert.decreasesBy~prop"
            }
        },
        "undocumented": true,
        "name": "decreasesBy",
        "longname": "assert.decreasesBy",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71768,
                71782
            ],
            "filename": "assert.js",
            "lineno": 2500,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011067",
                "name": "tmpMsg",
                "type": "Identifier",
                "value": "delta"
            }
        },
        "undocumented": true,
        "name": "tmpMsg",
        "longname": "assert.decreasesBy~tmpMsg",
        "kind": "member",
        "memberof": "assert.decreasesBy",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71788,
                71800
            ],
            "filename": "assert.js",
            "lineno": 2501,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011071",
                "name": "delta",
                "type": "Identifier",
                "funcscope": "assert.decreasesBy",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "delta",
        "longname": "assert.decreasesBy~delta",
        "kind": "member",
        "memberof": "assert.decreasesBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71806,
                71818
            ],
            "filename": "assert.js",
            "lineno": 2502,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011075",
                "name": "msg",
                "type": "Identifier",
                "funcscope": "assert.decreasesBy",
                "value": "tmpMsg",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assert.decreasesBy~msg",
        "kind": "member",
        "memberof": "assert.decreasesBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71863,
                71875
            ],
            "filename": "assert.js",
            "lineno": 2504,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011086",
                "name": "delta",
                "type": "Identifier",
                "funcscope": "assert.decreasesBy",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "delta",
        "longname": "assert.decreasesBy~delta",
        "kind": "member",
        "memberof": "assert.decreasesBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71881,
                71892
            ],
            "filename": "assert.js",
            "lineno": 2505,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011090",
                "name": "prop",
                "type": "Literal",
                "funcscope": "assert.decreasesBy",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "assert.decreasesBy~prop",
        "kind": "member",
        "memberof": "assert.decreasesBy",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that a function does not decreases a numeric object property.\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 15 };\n *     assert.doesNotDecrease(fn, obj, 'val');\n *\n * @name doesNotDecrease\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @returns {Assertion}\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2513,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that a function does not decreases a numeric object property.\n\n    var obj = { val: 10 };\n    var fn = function() { obj.val = 15 };\n    assert.doesNotDecrease(fn, obj, 'val');",
        "name": "doesNotDecrease",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "modifier function",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object or getter function",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "property name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Assertion"
                    ]
                }
            }
        ],
        "access": "public",
        "longname": "doesNotDecrease",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                72441,
                72701
            ],
            "filename": "assert.js",
            "lineno": 2528,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011114",
                "name": "assert.doesNotDecrease",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn",
                    "obj",
                    "prop",
                    "msg"
                ]
            },
            "vars": {
                "msg": "assert.doesNotDecrease~msg",
                "prop": "assert.doesNotDecrease~prop"
            }
        },
        "undocumented": true,
        "name": "doesNotDecrease",
        "longname": "assert.doesNotDecrease",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                72563,
                72573
            ],
            "filename": "assert.js",
            "lineno": 2530,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011137",
                "name": "msg",
                "type": "Identifier",
                "funcscope": "assert.doesNotDecrease",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assert.doesNotDecrease~msg",
        "kind": "member",
        "memberof": "assert.doesNotDecrease",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                72579,
                72590
            ],
            "filename": "assert.js",
            "lineno": 2531,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011141",
                "name": "prop",
                "type": "Literal",
                "funcscope": "assert.doesNotDecrease",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "assert.doesNotDecrease~prop",
        "kind": "member",
        "memberof": "assert.doesNotDecrease",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 5 };\n *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n *\n * @name doesNotDecreaseBy\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {number} delta change amount (delta)\n * @returns {Assertion}\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2540,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n\n    var obj = { val: 10 };\n    var fn = function() { obj.val = 5 };\n    assert.doesNotDecreaseBy(fn, obj, 'val', 1);",
        "name": "doesNotDecreaseBy",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "modifier function",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object or getter function",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "property name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "change amount (delta)",
                "name": "delta"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Assertion"
                    ]
                }
            }
        ],
        "access": "public",
        "longname": "doesNotDecreaseBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73249,
                73628
            ],
            "filename": "assert.js",
            "lineno": 2556,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011163",
                "name": "assert.doesNotDecreaseBy",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn",
                    "obj",
                    "prop",
                    "delta",
                    "msg"
                ]
            },
            "vars": {
                "tmpMsg": "assert.doesNotDecreaseBy~tmpMsg",
                "delta": "assert.doesNotDecreaseBy~delta",
                "msg": "assert.doesNotDecreaseBy~msg",
                "prop": "assert.doesNotDecreaseBy~prop"
            }
        },
        "undocumented": true,
        "name": "doesNotDecreaseBy",
        "longname": "assert.doesNotDecreaseBy",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73384,
                73398
            ],
            "filename": "assert.js",
            "lineno": 2558,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011187",
                "name": "tmpMsg",
                "type": "Identifier",
                "value": "delta"
            }
        },
        "undocumented": true,
        "name": "tmpMsg",
        "longname": "assert.doesNotDecreaseBy~tmpMsg",
        "kind": "member",
        "memberof": "assert.doesNotDecreaseBy",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73404,
                73416
            ],
            "filename": "assert.js",
            "lineno": 2559,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011191",
                "name": "delta",
                "type": "Identifier",
                "funcscope": "assert.doesNotDecreaseBy",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "delta",
        "longname": "assert.doesNotDecreaseBy~delta",
        "kind": "member",
        "memberof": "assert.doesNotDecreaseBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73422,
                73434
            ],
            "filename": "assert.js",
            "lineno": 2560,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011195",
                "name": "msg",
                "type": "Identifier",
                "funcscope": "assert.doesNotDecreaseBy",
                "value": "tmpMsg",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assert.doesNotDecreaseBy~msg",
        "kind": "member",
        "memberof": "assert.doesNotDecreaseBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73479,
                73491
            ],
            "filename": "assert.js",
            "lineno": 2562,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011206",
                "name": "delta",
                "type": "Identifier",
                "funcscope": "assert.doesNotDecreaseBy",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "delta",
        "longname": "assert.doesNotDecreaseBy~delta",
        "kind": "member",
        "memberof": "assert.doesNotDecreaseBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73497,
                73508
            ],
            "filename": "assert.js",
            "lineno": 2563,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011210",
                "name": "prop",
                "type": "Literal",
                "funcscope": "assert.doesNotDecreaseBy",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "assert.doesNotDecreaseBy~prop",
        "kind": "member",
        "memberof": "assert.doesNotDecreaseBy",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 5 };\n *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n *\n * @name decreasesButNotBy\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {number} delta change amount (delta)\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2571,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n\n    var obj = { val: 10 };\n    var fn = function() { obj.val = 5 };\n    assert.decreasesButNotBy(fn, obj, 'val', 1);",
        "name": "decreasesButNotBy",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "modifier function",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object or getter function",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "property name _optional_",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "change amount (delta)",
                "name": "delta"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "decreasesButNotBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74152,
                74528
            ],
            "filename": "assert.js",
            "lineno": 2586,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011236",
                "name": "assert.decreasesButNotBy",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn",
                    "obj",
                    "prop",
                    "delta",
                    "msg"
                ]
            },
            "vars": {
                "tmpMsg": "assert.decreasesButNotBy~tmpMsg",
                "delta": "assert.decreasesButNotBy~delta",
                "msg": "assert.decreasesButNotBy~msg",
                "prop": "assert.decreasesButNotBy~prop"
            }
        },
        "undocumented": true,
        "name": "decreasesButNotBy",
        "longname": "assert.decreasesButNotBy",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74287,
                74301
            ],
            "filename": "assert.js",
            "lineno": 2588,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011260",
                "name": "tmpMsg",
                "type": "Identifier",
                "value": "delta"
            }
        },
        "undocumented": true,
        "name": "tmpMsg",
        "longname": "assert.decreasesButNotBy~tmpMsg",
        "kind": "member",
        "memberof": "assert.decreasesButNotBy",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74307,
                74319
            ],
            "filename": "assert.js",
            "lineno": 2589,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011264",
                "name": "delta",
                "type": "Identifier",
                "funcscope": "assert.decreasesButNotBy",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "delta",
        "longname": "assert.decreasesButNotBy~delta",
        "kind": "member",
        "memberof": "assert.decreasesButNotBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74325,
                74337
            ],
            "filename": "assert.js",
            "lineno": 2590,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011268",
                "name": "msg",
                "type": "Identifier",
                "funcscope": "assert.decreasesButNotBy",
                "value": "tmpMsg",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "assert.decreasesButNotBy~msg",
        "kind": "member",
        "memberof": "assert.decreasesButNotBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74382,
                74394
            ],
            "filename": "assert.js",
            "lineno": 2592,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011279",
                "name": "delta",
                "type": "Identifier",
                "funcscope": "assert.decreasesButNotBy",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "delta",
        "longname": "assert.decreasesButNotBy~delta",
        "kind": "member",
        "memberof": "assert.decreasesButNotBy",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74400,
                74411
            ],
            "filename": "assert.js",
            "lineno": 2593,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011283",
                "name": "prop",
                "type": "Literal",
                "funcscope": "assert.decreasesButNotBy",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "assert.decreasesButNotBy~prop",
        "kind": "member",
        "memberof": "assert.decreasesButNotBy",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Asserts if value is not a false value, and throws if it is a true value.\n * This is added to allow for chai to be a drop-in replacement for Node's\n * assert class.\n *\n *     var err = new Error('I am a custom error');\n *     assert.ifError(err); // Rethrows err!\n *\n * @name ifError\n * @param {object} val\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2601,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts if value is not a false value, and throws if it is a true value.\nThis is added to allow for chai to be a drop-in replacement for Node's\nassert class.\n\n    var err = new Error('I am a custom error');\n    assert.ifError(err); // Rethrows err!",
        "name": "ifError",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "val"
            }
        ],
        "access": "public",
        "longname": "ifError",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74859,
                74926
            ],
            "filename": "assert.js",
            "lineno": 2613,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011311",
                "name": "assert.ifError",
                "type": "FunctionExpression",
                "paramnames": [
                    "val"
                ]
            }
        },
        "undocumented": true,
        "name": "ifError",
        "longname": "assert.ifError",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` is extensible (can have new properties added to it).\n *\n *     assert.isExtensible({});\n *\n * @name isExtensible\n * @alias extensible\n * @param {object} obj\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2619,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` is extensible (can have new properties added to it).\n\n    assert.isExtensible({});",
        "name": "isExtensible",
        "alias": "extensible",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isExtensible",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                75164,
                75280
            ],
            "filename": "assert.js",
            "lineno": 2630,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011324",
                "name": "assert.isExtensible",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isExtensible",
        "longname": "assert.isExtensible",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` is _not_ extensible.\n *\n *     var nonExtensibleObject = Object.preventExtensions({});\n *     var sealedObject = Object.seal({});\n *     var frozenObject = Object.freeze({});\n *\n *     assert.isNotExtensible(nonExtensibleObject);\n *     assert.isNotExtensible(sealedObject);\n *     assert.isNotExtensible(frozenObject);\n *\n * @name isNotExtensible\n * @alias notExtensible\n * @param {object} obj\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2634,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` is _not_ extensible.\n\n    var nonExtensibleObject = Object.preventExtensions({});\n    var sealedObject = Object.seal({});\n    var frozenObject = Object.freeze({});\n\n    assert.isNotExtensible(nonExtensibleObject);\n    assert.isNotExtensible(sealedObject);\n    assert.isNotExtensible(frozenObject);",
        "name": "isNotExtensible",
        "alias": "notExtensible",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNotExtensible",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                75756,
                75882
            ],
            "filename": "assert.js",
            "lineno": 2651,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011348",
                "name": "assert.isNotExtensible",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotExtensible",
        "longname": "assert.isNotExtensible",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` is sealed (cannot have new properties added to it\n * and its existing properties cannot be removed).\n *\n *     var sealedObject = Object.seal({});\n *     var frozenObject = Object.seal({});\n *\n *     assert.isSealed(sealedObject);\n *     assert.isSealed(frozenObject);\n *\n * @name isSealed\n * @alias sealed\n * @param {object} obj\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2655,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` is sealed (cannot have new properties added to it\nand its existing properties cannot be removed).\n\n    var sealedObject = Object.seal({});\n    var frozenObject = Object.seal({});\n\n    assert.isSealed(sealedObject);\n    assert.isSealed(frozenObject);",
        "name": "isSealed",
        "alias": "sealed",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isSealed",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76293,
                76397
            ],
            "filename": "assert.js",
            "lineno": 2671,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011374",
                "name": "assert.isSealed",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isSealed",
        "longname": "assert.isSealed",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` is _not_ sealed.\n *\n *     assert.isNotSealed({});\n *\n * @name isNotSealed\n * @alias notSealed\n * @param {object} obj\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2675,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` is _not_ sealed.\n\n    assert.isNotSealed({});",
        "name": "isNotSealed",
        "alias": "notSealed",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNotSealed",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76596,
                76710
            ],
            "filename": "assert.js",
            "lineno": 2686,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011398",
                "name": "assert.isNotSealed",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotSealed",
        "longname": "assert.isNotSealed",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` is frozen (cannot have new properties added to it\n * and its existing properties cannot be modified).\n *\n *     var frozenObject = Object.freeze({});\n *     assert.frozen(frozenObject);\n *\n * @name isFrozen\n * @alias frozen\n * @param {object} obj\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2690,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` is frozen (cannot have new properties added to it\nand its existing properties cannot be modified).\n\n    var frozenObject = Object.freeze({});\n    assert.frozen(frozenObject);",
        "name": "isFrozen",
        "alias": "frozen",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isFrozen",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77038,
                77142
            ],
            "filename": "assert.js",
            "lineno": 2703,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011424",
                "name": "assert.isFrozen",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isFrozen",
        "longname": "assert.isFrozen",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that `object` is _not_ frozen.\n *\n *     assert.isNotFrozen({});\n *\n * @name isNotFrozen\n * @alias notFrozen\n * @param {object} obj\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2707,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `object` is _not_ frozen.\n\n    assert.isNotFrozen({});",
        "name": "isNotFrozen",
        "alias": "notFrozen",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNotFrozen",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77341,
                77455
            ],
            "filename": "assert.js",
            "lineno": 2718,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011448",
                "name": "assert.isNotFrozen",
                "type": "FunctionExpression",
                "paramnames": [
                    "obj",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotFrozen",
        "longname": "assert.isNotFrozen",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that the target does not contain any values.\n * For arrays and strings, it checks the `length` property.\n * For `Map` and `Set` instances, it checks the `size` property.\n * For non-function objects, it gets the count of own\n * enumerable string keys.\n *\n *     assert.isEmpty([]);\n *     assert.isEmpty('');\n *     assert.isEmpty(new Map);\n *     assert.isEmpty({});\n *\n * @name isEmpty\n * @alias empty\n * @param {object | Array | string | Map | Set} val\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2722,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that the target does not contain any values.\nFor arrays and strings, it checks the `length` property.\nFor `Map` and `Set` instances, it checks the `size` property.\nFor non-function objects, it gets the count of own\nenumerable string keys.\n\n    assert.isEmpty([]);\n    assert.isEmpty('');\n    assert.isEmpty(new Map);\n    assert.isEmpty({});",
        "name": "isEmpty",
        "alias": "empty",
        "params": [
            {
                "type": {
                    "names": [
                        "object",
                        "Array",
                        "string",
                        "Map",
                        "Set"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isEmpty",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77977,
                78078
            ],
            "filename": "assert.js",
            "lineno": 2740,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011474",
                "name": "assert.isEmpty",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isEmpty",
        "longname": "assert.isEmpty",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that the target contains values.\n * For arrays and strings, it checks the `length` property.\n * For `Map` and `Set` instances, it checks the `size` property.\n * For non-function objects, it gets the count of own\n * enumerable string keys.\n *\n *     assert.isNotEmpty([1, 2]);\n *     assert.isNotEmpty('34');\n *     assert.isNotEmpty(new Set([5, 6]));\n *     assert.isNotEmpty({ key: 7 });\n *\n * @name isNotEmpty\n * @alias notEmpty\n * @param {object | Array | string | Map | Set} val\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2744,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that the target contains values.\nFor arrays and strings, it checks the `length` property.\nFor `Map` and `Set` instances, it checks the `size` property.\nFor non-function objects, it gets the count of own\nenumerable string keys.\n\n    assert.isNotEmpty([1, 2]);\n    assert.isNotEmpty('34');\n    assert.isNotEmpty(new Set([5, 6]));\n    assert.isNotEmpty({ key: 7 });",
        "name": "isNotEmpty",
        "alias": "notEmpty",
        "params": [
            {
                "type": {
                    "names": [
                        "object",
                        "Array",
                        "string",
                        "Map",
                        "Set"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "isNotEmpty",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78628,
                78739
            ],
            "filename": "assert.js",
            "lineno": 2762,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011498",
                "name": "assert.isNotEmpty",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "isNotEmpty",
        "longname": "assert.isNotEmpty",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Asserts that the target primitive/object/array structure deeply contains all provided fields\n * at the same key/depth as the provided structure.\n *\n * When comparing arrays, the target must contain the subset of at least one of each object/value in the subset array.\n * Order does not matter.\n *\n *     assert.containsSubset(\n *         [{name: {first: \"John\", last: \"Smith\"}}, {name: {first: \"Jane\", last: \"Doe\"}}],\n *         [{name: {first: \"Jane\"}}]\n *     );\n *\n * @name containsSubset\n * @alias containSubset\n * @param {unknown} val\n * @param {unknown} exp\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2766,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that the target primitive/object/array structure deeply contains all provided fields\nat the same key/depth as the provided structure.\n\nWhen comparing arrays, the target must contain the subset of at least one of each object/value in the subset array.\nOrder does not matter.\n\n    assert.containsSubset(\n        [{name: {first: \"John\", last: \"Smith\"}}, {name: {first: \"Jane\", last: \"Doe\"}}],\n        [{name: {first: \"Jane\"}}]\n    );",
        "name": "containsSubset",
        "alias": "containSubset",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "containsSubset",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                79361,
                79462
            ],
            "filename": "assert.js",
            "lineno": 2785,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011524",
                "name": "assert.containsSubset",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "exp",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "containsSubset",
        "longname": "assert.containsSubset",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * The negation of assert.containsSubset.\n *\n * @name doesNotContainSubset\n * @param {unknown} val\n * @param {unknown} exp\n * @param {string} msg _optional_\n * @public\n */",
        "meta": {
            "filename": "assert.js",
            "lineno": 2789,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "The negation of assert.containsSubset.",
        "name": "doesNotContainSubset",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "exp"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "_optional_",
                "name": "msg"
            }
        ],
        "access": "public",
        "longname": "doesNotContainSubset",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                79641,
                79752
            ],
            "filename": "assert.js",
            "lineno": 2798,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011545",
                "name": "assert.doesNotContainSubset",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "exp",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "doesNotContainSubset",
        "longname": "assert.doesNotContainSubset",
        "kind": "function",
        "memberof": "assert",
        "scope": "static"
    },
    {
        "comment": "/**\n * Aliases.\n *\n * @param {unknown} name\n * @param {unknown} as\n * @returns {unknown}\n */",
        "meta": {
            "range": [
                79854,
                80308
            ],
            "filename": "assert.js",
            "lineno": 2809,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011568",
                "name": "aliases",
                "type": "ArrayExpression",
                "value": "[\"[\\\"isOk\\\",\\\"ok\\\"]\",\"[\\\"isNotOk\\\",\\\"notOk\\\"]\",\"[\\\"throws\\\",\\\"throw\\\"]\",\"[\\\"throws\\\",\\\"Throw\\\"]\",\"[\\\"isExtensible\\\",\\\"extensible\\\"]\",\"[\\\"isNotExtensible\\\",\\\"notExtensible\\\"]\",\"[\\\"isSealed\\\",\\\"sealed\\\"]\",\"[\\\"isNotSealed\\\",\\\"notSealed\\\"]\",\"[\\\"isFrozen\\\",\\\"frozen\\\"]\",\"[\\\"isNotFrozen\\\",\\\"notFrozen\\\"]\",\"[\\\"isEmpty\\\",\\\"empty\\\"]\",\"[\\\"isNotEmpty\\\",\\\"notEmpty\\\"]\",\"[\\\"isCallable\\\",\\\"isFunction\\\"]\",\"[\\\"isNotCallable\\\",\\\"isNotFunction\\\"]\",\"[\\\"containsSubset\\\",\\\"containSubset\\\"]\"]"
            }
        },
        "description": "Aliases.",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "as"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                }
            }
        ],
        "name": "aliases",
        "longname": "aliases",
        "kind": "constant",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                80348,
                80373
            ],
            "filename": "assert.js",
            "lineno": 2827,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011623",
                "name": "assert[undefined]",
                "type": "MemberExpression",
                "value": "assert[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "assert[undefined]",
        "longname": "assert[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * @param {unknown} val\n * @param {string} message\n * @returns {Assertion}\n */",
        "meta": {
            "range": [
                314,
                385
            ],
            "filename": "expect.js",
            "lineno": 16,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011644",
                "name": "expect",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "val",
                    "message"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Assertion"
                    ]
                }
            }
        ],
        "name": "expect",
        "longname": "expect",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                395,
                401
            ],
            "filename": "expect.js",
            "lineno": 20,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011655",
                "name": "exports.expect",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "expect",
        "longname": "expect",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * ### .fail([message])\n * ### .fail(actual, expected, [message], [operator])\n *\n * Throw a failure.\n *\n *     expect.fail();\n *     expect.fail(\"custom error message\");\n *     expect.fail(1, 2);\n *     expect.fail(1, 2, \"custom error message\");\n *     expect.fail(1, 2, \"custom error message\", \">\");\n *     expect.fail(1, 2, undefined, \">\");\n *\n * @name fail\n * @param {unknown} actual\n * @param {unknown} expected\n * @param {string} message\n * @param {string} operator\n * @public\n */",
        "meta": {
            "filename": "expect.js",
            "lineno": 22,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "### .fail([message])\n### .fail(actual, expected, [message], [operator])\n\nThrow a failure.\n\n    expect.fail();\n    expect.fail(\"custom error message\");\n    expect.fail(1, 2);\n    expect.fail(1, 2, \"custom error message\");\n    expect.fail(1, 2, \"custom error message\", \">\");\n    expect.fail(1, 2, undefined, \">\");",
        "name": "fail",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "actual"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "expected"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "operator"
            }
        ],
        "access": "public",
        "longname": "fail",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                895,
                1233
            ],
            "filename": "expect.js",
            "lineno": 42,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011659",
                "name": "expect.fail",
                "type": "FunctionExpression",
                "paramnames": [
                    "actual",
                    "expected",
                    "message",
                    "operator"
                ]
            },
            "vars": {
                "message": "expect.fail~message",
                "actual": "expect.fail~actual"
            }
        },
        "undocumented": true,
        "name": "fail",
        "longname": "expect.fail",
        "kind": "function",
        "memberof": "expect",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                992,
                1008
            ],
            "filename": "expect.js",
            "lineno": 44,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011677",
                "name": "message",
                "type": "Identifier",
                "funcscope": "expect.fail",
                "value": "actual",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "expect.fail~message",
        "kind": "member",
        "memberof": "expect.fail",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1014,
                1032
            ],
            "filename": "expect.js",
            "lineno": 45,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011681",
                "name": "actual",
                "type": "Identifier",
                "funcscope": "expect.fail",
                "value": "undefined",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "expect.fail~actual",
        "kind": "member",
        "memberof": "expect.fail",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1041,
                1077
            ],
            "filename": "expect.js",
            "lineno": 48,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011685",
                "name": "message",
                "type": "LogicalExpression",
                "funcscope": "expect.fail",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "expect.fail~message",
        "kind": "member",
        "memberof": "expect.fail",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1132,
                1146
            ],
            "filename": "expect.js",
            "lineno": 52,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011695",
                "name": "actual",
                "type": "Identifier",
                "value": "actual"
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "actual",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1154,
                1172
            ],
            "filename": "expect.js",
            "lineno": 53,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011697",
                "name": "expected",
                "type": "Identifier",
                "value": "expected"
            }
        },
        "undocumented": true,
        "name": "expected",
        "longname": "expected",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1180,
                1198
            ],
            "filename": "expect.js",
            "lineno": 54,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011699",
                "name": "operator",
                "type": "Identifier",
                "value": "operator"
            }
        },
        "undocumented": true,
        "name": "operator",
        "longname": "operator",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * @returns {void}\n */",
        "meta": {
            "range": [
                219,
                5430
            ],
            "filename": "should.js",
            "lineno": 13,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011716",
                "name": "loadShould",
                "type": "FunctionDeclaration",
                "paramnames": []
            },
            "vars": {
                "shouldGetter": "loadShould~shouldGetter",
                "shouldSetter": "loadShould~shouldSetter",
                "should": "loadShould~should",
                "should.fail": "loadShould~should.fail",
                "": null,
                "should.equal": "loadShould~should.equal",
                "should.Throw": "loadShould~should.Throw",
                "should.exist": "loadShould~should.exist",
                "should.not": "loadShould~should.not",
                "should.not.equal": "loadShould~should.not.equal",
                "should.not.Throw": "loadShould~should.not.Throw",
                "should.not.exist": "loadShould~should.not.exist",
                "should[\"throw\"]": "loadShould~should.\"throw\"]",
                "should.not[\"throw\"]": "loadShould~should.not[\"throw\"]"
            }
        },
        "returns": [
            {
                "type": {
                    "names": [
                        "void"
                    ]
                }
            }
        ],
        "name": "loadShould",
        "longname": "loadShould",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n   * @returns {Assertion}\n   */",
        "meta": {
            "range": [
                372,
                766
            ],
            "filename": "should.js",
            "lineno": 18,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011719",
                "name": "shouldGetter",
                "type": "FunctionDeclaration",
                "paramnames": []
            }
        },
        "returns": [
            {
                "type": {
                    "names": [
                        "Assertion"
                    ]
                }
            }
        ],
        "name": "shouldGetter",
        "longname": "loadShould~shouldGetter",
        "kind": "function",
        "memberof": "loadShould",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n   * @param {unknown} value\n   */",
        "meta": {
            "range": [
                809,
                1331
            ],
            "filename": "should.js",
            "lineno": 33,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011768",
                "name": "shouldSetter",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "value"
            }
        ],
        "name": "shouldSetter",
        "longname": "loadShould~shouldSetter",
        "kind": "function",
        "memberof": "loadShould",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1234,
                1246
            ],
            "filename": "should.js",
            "lineno": 41,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011780",
                "name": "value",
                "type": "Identifier",
                "value": "value"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1254,
                1270
            ],
            "filename": "should.js",
            "lineno": 42,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011782",
                "name": "enumerable",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "enumerable",
        "longname": "enumerable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1278,
                1296
            ],
            "filename": "should.js",
            "lineno": 43,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011784",
                "name": "configurable",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "configurable",
        "longname": "configurable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1304,
                1318
            ],
            "filename": "should.js",
            "lineno": 44,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011786",
                "name": "writable",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "writable",
        "longname": "writable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1436,
                1453
            ],
            "filename": "should.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011798",
                "name": "set",
                "type": "Identifier",
                "value": "shouldSetter"
            }
        },
        "undocumented": true,
        "name": "set",
        "longname": "set",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1459,
                1476
            ],
            "filename": "should.js",
            "lineno": 50,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011800",
                "name": "get",
                "type": "Identifier",
                "value": "shouldGetter"
            }
        },
        "undocumented": true,
        "name": "get",
        "longname": "get",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1482,
                1500
            ],
            "filename": "should.js",
            "lineno": 51,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011802",
                "name": "configurable",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "configurable",
        "longname": "configurable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1515,
                1526
            ],
            "filename": "should.js",
            "lineno": 54,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011805",
                "name": "should",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "should",
        "longname": "loadShould~should",
        "kind": "member",
        "memberof": "loadShould",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n   * Throw a failure.\n   *\n   *     should.fail();\n   *     should.fail(\"custom error message\");\n   *     should.fail(1, 2);\n   *     should.fail(1, 2, \"custom error message\");\n   *     should.fail(1, 2, \"custom error message\", \">\");\n   *     should.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {unknown} actual\n   * @param {unknown} expected\n   * @param {string} message\n   * @param {string} operator\n   * @public\n   */",
        "meta": {
            "filename": "should.js",
            "lineno": 56,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Throw a failure.\n\n    should.fail();\n    should.fail(\"custom error message\");\n    should.fail(1, 2);\n    should.fail(1, 2, \"custom error message\");\n    should.fail(1, 2, \"custom error message\", \">\");\n    should.fail(1, 2, undefined, \">\");",
        "name": "fail",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "actual"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "expected"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "operator"
            }
        ],
        "access": "public",
        "longname": "fail",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1974,
                2339
            ],
            "filename": "should.js",
            "lineno": 73,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011809",
                "name": "should.fail",
                "type": "FunctionExpression",
                "funcscope": "loadShould",
                "paramnames": [
                    "actual",
                    "expected",
                    "message",
                    "operator"
                ]
            },
            "vars": {
                "message": "loadShould~should.fail~message",
                "actual": "loadShould~should.fail~actual"
            }
        },
        "undocumented": true,
        "name": "fail",
        "longname": "loadShould~should.fail",
        "kind": "function",
        "memberof": "loadShould~should",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2075,
                2091
            ],
            "filename": "should.js",
            "lineno": 75,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011827",
                "name": "message",
                "type": "Identifier",
                "funcscope": "loadShould~should.fail",
                "value": "actual",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "loadShould~should.fail~message",
        "kind": "member",
        "memberof": "loadShould~should.fail",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2099,
                2117
            ],
            "filename": "should.js",
            "lineno": 76,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011831",
                "name": "actual",
                "type": "Identifier",
                "funcscope": "loadShould~should.fail",
                "value": "undefined",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "loadShould~should.fail~actual",
        "kind": "member",
        "memberof": "loadShould~should.fail",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2130,
                2166
            ],
            "filename": "should.js",
            "lineno": 79,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011835",
                "name": "message",
                "type": "LogicalExpression",
                "funcscope": "loadShould~should.fail",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "loadShould~should.fail~message",
        "kind": "member",
        "memberof": "loadShould~should.fail",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2229,
                2243
            ],
            "filename": "should.js",
            "lineno": 83,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011845",
                "name": "actual",
                "type": "Identifier",
                "value": "actual"
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "actual",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2253,
                2271
            ],
            "filename": "should.js",
            "lineno": 84,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011847",
                "name": "expected",
                "type": "Identifier",
                "value": "expected"
            }
        },
        "undocumented": true,
        "name": "expected",
        "longname": "expected",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2281,
                2299
            ],
            "filename": "should.js",
            "lineno": 85,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011849",
                "name": "operator",
                "type": "Identifier",
                "value": "operator"
            }
        },
        "undocumented": true,
        "name": "operator",
        "longname": "operator",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     should.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {unknown} actual\n   * @param {unknown} expected\n   * @param {string} message\n   * @public\n   */",
        "meta": {
            "filename": "should.js",
            "lineno": 91,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts non-strict equality (`==`) of `actual` and `expected`.\n\n    should.equal(3, '3', '== coerces values to strings');",
        "name": "equal",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "actual"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "expected"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            }
        ],
        "access": "public",
        "longname": "equal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2616,
                2728
            ],
            "filename": "should.js",
            "lineno": 102,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011855",
                "name": "should.equal",
                "type": "FunctionExpression",
                "funcscope": "loadShould",
                "paramnames": [
                    "actual",
                    "expected",
                    "message"
                ]
            }
        },
        "undocumented": true,
        "name": "equal",
        "longname": "loadShould~should.equal",
        "kind": "function",
        "memberof": "loadShould~should",
        "scope": "static"
    },
    {
        "comment": "/**\n   * Asserts that `function` will throw an error that is an instance of\n   * `constructor`, or alternately that it will throw an error with message\n   * matching `regexp`.\n   *\n   *     should.throw(fn, 'function throws a reference error');\n   *     should.throw(fn, /function throws a reference error/);\n   *     should.throw(fn, ReferenceError);\n   *     should.throw(fn, ReferenceError, 'function throws a reference error');\n   *     should.throw(fn, ReferenceError, /function throws a reference error/);\n   *\n   * @name throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {Error} errt\n   * @param {RegExp} errs\n   * @param {string} msg\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @public\n   */",
        "meta": {
            "filename": "should.js",
            "lineno": 106,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `function` will throw an error that is an instance of\n`constructor`, or alternately that it will throw an error with message\nmatching `regexp`.\n\n    should.throw(fn, 'function throws a reference error');\n    should.throw(fn, /function throws a reference error/);\n    should.throw(fn, ReferenceError);\n    should.throw(fn, ReferenceError, 'function throws a reference error');\n    should.throw(fn, ReferenceError, /function throws a reference error/);",
        "name": "throw",
        "alias": "Throw",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Error"
                    ]
                },
                "name": "errt"
            },
            {
                "type": {
                    "names": [
                        "RegExp"
                    ]
                },
                "name": "errs"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "see": [
            "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types"
        ],
        "access": "public",
        "longname": "throw",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3505,
                3605
            ],
            "filename": "should.js",
            "lineno": 126,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011876",
                "name": "should.Throw",
                "type": "FunctionExpression",
                "funcscope": "loadShould",
                "paramnames": [
                    "fn",
                    "errt",
                    "errs",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "Throw",
        "longname": "loadShould~should.Throw",
        "kind": "function",
        "memberof": "loadShould~should",
        "scope": "static"
    },
    {
        "comment": "/**\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *     should.exist(foo, 'foo exists');\n   *\n   * @param {unknown} val\n   * @param {string} msg\n   * @name exist\n   * @public\n   */",
        "meta": {
            "filename": "should.js",
            "lineno": 130,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that the target is neither `null` nor `undefined`.\n\n    var foo = 'hi';\n    should.exist(foo, 'foo exists');",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "name": "exist",
        "access": "public",
        "longname": "exist",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3844,
                3922
            ],
            "filename": "should.js",
            "lineno": 141,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011899",
                "name": "should.exist",
                "type": "FunctionExpression",
                "funcscope": "loadShould",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "exist",
        "longname": "loadShould~should.exist",
        "kind": "function",
        "memberof": "loadShould~should",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3941,
                3956
            ],
            "filename": "should.js",
            "lineno": 146,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011917",
                "name": "should.not",
                "type": "ObjectExpression",
                "funcscope": "loadShould",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "not",
        "longname": "loadShould~should.not",
        "kind": "member",
        "memberof": "loadShould~should",
        "scope": "static"
    },
    {
        "comment": "/**\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     should.not.equal(3, 4, 'these numbers are not equal');\n   *\n   * @name not.equal\n   * @param {unknown} actual\n   * @param {unknown} expected\n   * @param {string} msg\n   * @public\n   */",
        "meta": {
            "filename": "should.js",
            "lineno": 148,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n\n    should.not.equal(3, 4, 'these numbers are not equal');",
        "name": "equal",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "actual"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "expected"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "memberof": "not",
        "longname": "not.equal",
        "scope": "static",
        "kind": "member"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4236,
                4348
            ],
            "filename": "should.js",
            "lineno": 159,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011923",
                "name": "should.not.equal",
                "type": "FunctionExpression",
                "funcscope": "loadShould",
                "paramnames": [
                    "actual",
                    "expected",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "not.equal",
        "longname": "loadShould~should.not.equal",
        "kind": "function",
        "memberof": "loadShould~should",
        "scope": "static"
    },
    {
        "comment": "/**\n   * Asserts that `function` will _not_ throw an error that is an instance of\n   * `constructor`, or alternately that it will not throw an error with message\n   * matching `regexp`.\n   *\n   *     should.not.throw(fn, Error, 'function does not throw');\n   *\n   * @name not.throw\n   * @alias not.Throw\n   * @param {Function} fn\n   * @param {Error} errt\n   * @param {RegExp} errs\n   * @param {string} msg\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @public\n   */",
        "meta": {
            "filename": "should.js",
            "lineno": 163,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that `function` will _not_ throw an error that is an instance of\n`constructor`, or alternately that it will not throw an error with message\nmatching `regexp`.\n\n    should.not.throw(fn, Error, 'function does not throw');",
        "name": "throw",
        "alias": "not.Throw",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Error"
                    ]
                },
                "name": "errt"
            },
            {
                "type": {
                    "names": [
                        "RegExp"
                    ]
                },
                "name": "errs"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "see": [
            "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types"
        ],
        "access": "public",
        "memberof": "not",
        "longname": "not.throw",
        "scope": "static",
        "kind": "member"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4877,
                4985
            ],
            "filename": "should.js",
            "lineno": 179,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011948",
                "name": "should.not.Throw",
                "type": "FunctionExpression",
                "funcscope": "loadShould",
                "paramnames": [
                    "fn",
                    "errt",
                    "errs",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "not.Throw",
        "longname": "loadShould~should.not.Throw",
        "kind": "function",
        "memberof": "loadShould~should",
        "scope": "static"
    },
    {
        "comment": "/**\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var bar = null;\n   *     should.not.exist(bar, 'bar does not exist');\n   *\n   * @name not.exist\n   * @param {unknown} val\n   * @param {string} msg\n   * @public\n   */",
        "meta": {
            "filename": "should.js",
            "lineno": 183,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {}
        },
        "description": "Asserts that the target is neither `null` nor `undefined`.\n\n    var bar = null;\n    should.not.exist(bar, 'bar does not exist');",
        "name": "exist",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "msg"
            }
        ],
        "access": "public",
        "memberof": "not",
        "longname": "not.exist",
        "scope": "static",
        "kind": "member"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5240,
                5326
            ],
            "filename": "should.js",
            "lineno": 194,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011975",
                "name": "should.not.exist",
                "type": "FunctionExpression",
                "funcscope": "loadShould",
                "paramnames": [
                    "val",
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "not.exist",
        "longname": "loadShould~should.not.exist",
        "kind": "function",
        "memberof": "loadShould~should",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5331,
                5364
            ],
            "filename": "should.js",
            "lineno": 198,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100011997",
                "name": "should[\"throw\"]",
                "type": "MemberExpression",
                "funcscope": "loadShould",
                "value": "should[\"Throw\"]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "\"throw\"]",
        "longname": "loadShould~should.\"throw\"]",
        "kind": "member",
        "memberof": "loadShould~should",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5368,
                5409
            ],
            "filename": "should.js",
            "lineno": 199,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100012005",
                "name": "should.not[\"throw\"]",
                "type": "MemberExpression",
                "funcscope": "loadShould",
                "value": "should.not[\"Throw\"]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "not[\"throw\"]",
        "longname": "loadShould~should.not[\"throw\"]",
        "kind": "member",
        "memberof": "loadShould~should",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5432,
                5465
            ],
            "filename": "should.js",
            "lineno": 204,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100012018",
                "name": "exports.should",
                "type": "VariableDeclaration"
            }
        },
        "undocumented": true,
        "name": "should",
        "longname": "should",
        "kind": "constant",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5445,
                5464
            ],
            "filename": "should.js",
            "lineno": 204,
            "columnno": 13,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100012020",
                "name": "should",
                "type": "Identifier",
                "value": "loadShould"
            }
        },
        "undocumented": true,
        "name": "should",
        "longname": "should",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5466,
                5499
            ],
            "filename": "should.js",
            "lineno": 205,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100012023",
                "name": "exports.Should",
                "type": "VariableDeclaration"
            }
        },
        "undocumented": true,
        "name": "Should",
        "longname": "Should",
        "kind": "constant",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5479,
                5498
            ],
            "filename": "should.js",
            "lineno": 205,
            "columnno": 13,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/interface",
            "code": {
                "id": "astnode100012025",
                "name": "Should",
                "type": "Identifier",
                "value": "loadShould"
            }
        },
        "undocumented": true,
        "name": "Should",
        "longname": "Should",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Module variables\n */",
        "meta": {
            "range": [
                427,
                488
            ],
            "filename": "addChainableMethod.js",
            "lineno": 18,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012051",
                "name": "canSetPrototype",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "description": "Module variables",
        "name": "canSetPrototype",
        "longname": "canSetPrototype",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                679,
                702
            ],
            "filename": "addChainableMethod.js",
            "lineno": 22,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012060",
                "name": "testFn",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "testFn",
        "longname": "testFn",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                708,
                1240
            ],
            "filename": "addChainableMethod.js",
            "lineno": 23,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012065",
                "name": "excludeNames",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "excludeNames",
        "longname": "excludeNames",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                789,
                845
            ],
            "filename": "addChainableMethod.js",
            "lineno": 24,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012079",
                "name": "propDesc",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "propDesc",
        "longname": "<anonymous>~propDesc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1278,
                1308
            ],
            "filename": "addChainableMethod.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012100",
                "name": "call",
                "type": "MemberExpression",
                "value": "Function.prototype.call"
            }
        },
        "undocumented": true,
        "name": "call",
        "longname": "call",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1312,
                1344
            ],
            "filename": "addChainableMethod.js",
            "lineno": 37,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012107",
                "name": "apply",
                "type": "MemberExpression",
                "value": "Function.prototype.apply"
            }
        },
        "undocumented": true,
        "name": "apply",
        "longname": "apply",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *         var obj = utils.flag(this, 'object');\n *         new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {object} ctx object to which the method is added\n * @param {string} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @name addChainableMethod\n * @public\n */",
        "meta": {
            "filename": "addChainableMethod.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .addChainableMethod(ctx, name, method, chainingBehavior)\n\nAdds a method to an object, such that the method can also be chained.\n\n    utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n        var obj = utils.flag(this, 'object');\n        new chai.Assertion(obj).to.be.equal(str);\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n\nThe result can then be used as both a method assertion, executing both `method` and\n`chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n\n    expect(fooStr).to.be.foo('bar');\n    expect(fooStr).to.be.foo.equal('foo');",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object to which the method is added",
                "name": "ctx"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "of method to add",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "function to be used for `name`, when called",
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "function to be called every time the property is accessed",
                "name": "chainingBehavior"
            }
        ],
        "name": "addChainableMethod",
        "access": "public",
        "longname": "addChainableMethod",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2402,
                5281
            ],
            "filename": "addChainableMethod.js",
            "lineno": 66,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012114",
                "name": "exports.addChainableMethod",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "ctx",
                    "name",
                    "method",
                    "chainingBehavior"
                ]
            }
        },
        "undocumented": true,
        "name": "addChainableMethod",
        "longname": "addChainableMethod",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2409,
                5281
            ],
            "filename": "addChainableMethod.js",
            "lineno": 66,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012115",
                "name": "addChainableMethod",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "ctx",
                    "name",
                    "method",
                    "chainingBehavior"
                ]
            },
            "vars": {
                "chainingBehavior": "addChainableMethod~chainingBehavior",
                "": null,
                "chainableBehavior": "addChainableMethod~chainableBehavior",
                "ctx.__methods": "ctx.__methods",
                "ctx.__methods[undefined]": "ctx.__methods[undefined]"
            }
        },
        "undocumented": true,
        "name": "addChainableMethod",
        "longname": "addChainableMethod",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2528,
                2561
            ],
            "filename": "addChainableMethod.js",
            "lineno": 68,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012129",
                "name": "chainingBehavior",
                "type": "FunctionExpression",
                "funcscope": "addChainableMethod",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "chainingBehavior",
        "longname": "addChainableMethod~chainingBehavior",
        "kind": "function",
        "memberof": "addChainableMethod",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2574,
                2658
            ],
            "filename": "addChainableMethod.js",
            "lineno": 71,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012134",
                "name": "chainableBehavior",
                "type": "ObjectExpression",
                "value": "{\"method\":\"\",\"chainingBehavior\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "chainableBehavior",
        "longname": "addChainableMethod~chainableBehavior",
        "kind": "member",
        "memberof": "addChainableMethod",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2600,
                2614
            ],
            "filename": "addChainableMethod.js",
            "lineno": 72,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012137",
                "name": "method",
                "type": "Identifier",
                "value": "method"
            }
        },
        "undocumented": true,
        "name": "method",
        "longname": "addChainableMethod~chainableBehavior.method",
        "kind": "member",
        "memberof": "addChainableMethod~chainableBehavior",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2620,
                2654
            ],
            "filename": "addChainableMethod.js",
            "lineno": 73,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012139",
                "name": "chainingBehavior",
                "type": "Identifier",
                "value": "chainingBehavior"
            }
        },
        "undocumented": true,
        "name": "chainingBehavior",
        "longname": "addChainableMethod~chainableBehavior.chainingBehavior",
        "kind": "member",
        "memberof": "addChainableMethod~chainableBehavior",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2758,
                2776
            ],
            "filename": "addChainableMethod.js",
            "lineno": 78,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012148",
                "name": "ctx.__methods",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__methods",
        "longname": "ctx.__methods",
        "kind": "member",
        "memberof": "ctx",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2784,
                2823
            ],
            "filename": "addChainableMethod.js",
            "lineno": 80,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012154",
                "name": "ctx.__methods[undefined]",
                "type": "Identifier",
                "value": "chainableBehavior",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__methods[undefined]",
        "longname": "ctx.__methods[undefined]",
        "kind": "member",
        "memberof": "ctx",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2867,
                5249
            ],
            "filename": "addChainableMethod.js",
            "lineno": 83,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012169",
                "name": "get",
                "type": "FunctionExpression",
                "value": "chainableMethodGetter"
            },
            "vars": {
                "chainableMethodWrapper": "get~chainableMethodWrapper",
                "": null,
                "prototype": "get~prototype",
                "prototype.call": "get~prototype.call",
                "prototype.apply": "get~prototype.apply",
                "asserterNames": "get~asserterNames"
            }
        },
        "undocumented": true,
        "name": "get",
        "longname": "get",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2971,
                4228
            ],
            "filename": "addChainableMethod.js",
            "lineno": 86,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012182",
                "name": "chainableMethodWrapper",
                "type": "FunctionExpression"
            },
            "vars": {
                "result": "get~chainableMethodWrapper~result",
                "newAssertion": "get~chainableMethodWrapper~newAssertion"
            }
        },
        "undocumented": true,
        "name": "chainableMethodWrapper",
        "longname": "get~chainableMethodWrapper",
        "kind": "function",
        "memberof": "get",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3975,
                4031
            ],
            "filename": "addChainableMethod.js",
            "lineno": 106,
            "columnno": 12,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012200",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "get~chainableMethodWrapper~result",
        "kind": "member",
        "memberof": "get~chainableMethodWrapper",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4117,
                4147
            ],
            "filename": "addChainableMethod.js",
            "lineno": 111,
            "columnno": 12,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012218",
                "name": "newAssertion",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "newAssertion",
        "longname": "get~chainableMethodWrapper~newAssertion",
        "kind": "member",
        "memberof": "get~chainableMethodWrapper",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4469,
                4500
            ],
            "filename": "addChainableMethod.js",
            "lineno": 121,
            "columnno": 12,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012239",
                "name": "prototype",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "prototype",
        "longname": "get~prototype",
        "kind": "member",
        "memberof": "get",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4576,
                4597
            ],
            "filename": "addChainableMethod.js",
            "lineno": 123,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012247",
                "name": "prototype.call",
                "type": "Identifier",
                "funcscope": "get",
                "value": "call",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "call",
        "longname": "get~prototype.call",
        "kind": "member",
        "memberof": "get~prototype",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4607,
                4630
            ],
            "filename": "addChainableMethod.js",
            "lineno": 124,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012253",
                "name": "prototype.apply",
                "type": "Identifier",
                "funcscope": "get",
                "value": "apply",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "apply",
        "longname": "get~prototype.apply",
        "kind": "member",
        "memberof": "get~prototype",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4783,
                4830
            ],
            "filename": "addChainableMethod.js",
            "lineno": 129,
            "columnno": 12,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012267",
                "name": "asserterNames",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "asserterNames",
        "longname": "get~asserterNames",
        "kind": "member",
        "memberof": "get",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4994,
                5049
            ],
            "filename": "addChainableMethod.js",
            "lineno": 135,
            "columnno": 14,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012294",
                "name": "pd",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "pd",
        "longname": "<anonymous>~pd",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5255,
                5273
            ],
            "filename": "addChainableMethod.js",
            "lineno": 143,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012319",
                "name": "configurable",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "configurable",
        "longname": "configurable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6,
                78
            ],
            "filename": "addLengthGuard.js",
            "lineno": 1,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012324",
                "name": "fnLengthDesc",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "fnLengthDesc",
        "longname": "fnLengthDesc",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {string} assertionName\n * @param {boolean} isChainable\n * @returns {unknown}\n * @name addLengthGuard\n */",
        "meta": {
            "filename": "addLengthGuard.js",
            "lineno": 9,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .addLengthGuard(fn, assertionName, isChainable)\n\nDefine `length` as a getter on the given uninvoked method assertion. The\ngetter acts as a guard against chaining `length` directly off of an uninvoked\nmethod assertion, which is a problem because it references `function`'s\nbuilt-in `length` property instead of Chai's `length` assertion. When the\ngetter catches the user making this mistake, it throws an error with a\nhelpful message.\n\nThere are two ways in which this mistake can be made. The first way is by\nchaining the `length` assertion directly off of an uninvoked chainable\nmethod. In this case, Chai suggests that the user use `lengthOf` instead. The\nsecond way is by chaining the `length` assertion directly off of an uninvoked\nnon-chainable method. Non-chainable methods must be invoked prior to\nchaining. In this case, Chai suggests that the user consult the docs for the\ngiven assertion.\n\nIf the `length` property of functions is unconfigurable, then return `fn`\nwithout modification.\n\nNote that in ES6, the function's `length` property is configurable, so once\nsupport for legacy environments is dropped, Chai's `length` property can\nreplace the built-in function's `length` property, and this length guard will\nno longer be necessary. In the mean time, maintaining consistency across all\nenvironments is the priority.",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "assertionName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isChainable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                }
            }
        ],
        "name": "addLengthGuard",
        "longname": "addLengthGuard",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1754,
                2508
            ],
            "filename": "addLengthGuard.js",
            "lineno": 42,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012333",
                "name": "exports.addLengthGuard",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "fn",
                    "assertionName",
                    "isChainable"
                ]
            }
        },
        "undocumented": true,
        "name": "addLengthGuard",
        "longname": "addLengthGuard",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1761,
                2508
            ],
            "filename": "addLengthGuard.js",
            "lineno": 42,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012334",
                "name": "addLengthGuard",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "fn",
                    "assertionName",
                    "isChainable"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "addLengthGuard",
        "longname": "addLengthGuard",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1909,
                2486
            ],
            "filename": "addLengthGuard.js",
            "lineno": 46,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012355",
                "name": "get",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "get",
        "longname": "get",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *         var obj = utils.flag(this, 'object');\n *         new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {object} ctx object to which the method is added\n * @param {string} name of method to add\n * @param {Function} method function to be used for name\n * @name addMethod\n * @public\n */",
        "meta": {
            "filename": "addMethod.js",
            "lineno": 13,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .addMethod(ctx, name, method)\n\nAdds a method to the prototype of an object.\n\n    utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n        var obj = utils.flag(this, 'object');\n        new chai.Assertion(obj).to.be.equal(str);\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.addMethod('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(fooStr).to.be.foo('bar');",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object to which the method is added",
                "name": "ctx"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "of method to add",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "function to be used for name",
                "name": "method"
            }
        ],
        "name": "addMethod",
        "access": "public",
        "longname": "addMethod",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1003,
                2152
            ],
            "filename": "addMethod.js",
            "lineno": 37,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012417",
                "name": "exports.addMethod",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "ctx",
                    "name",
                    "method"
                ]
            }
        },
        "undocumented": true,
        "name": "addMethod",
        "longname": "addMethod",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1010,
                2152
            ],
            "filename": "addMethod.js",
            "lineno": 37,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012418",
                "name": "addMethod",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "ctx",
                    "name",
                    "method"
                ]
            },
            "vars": {
                "methodWrapper": "addMethod~methodWrapper",
                "": null,
                "ctx[undefined]": null
            }
        },
        "undocumented": true,
        "name": "addMethod",
        "longname": "addMethod",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1056,
                2058
            ],
            "filename": "addMethod.js",
            "lineno": 38,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012425",
                "name": "methodWrapper",
                "type": "FunctionExpression"
            },
            "vars": {
                "result": "addMethod~methodWrapper~result",
                "newAssertion": "addMethod~methodWrapper~newAssertion"
            }
        },
        "undocumented": true,
        "name": "methodWrapper",
        "longname": "addMethod~methodWrapper",
        "kind": "function",
        "memberof": "addMethod",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1865,
                1903
            ],
            "filename": "addMethod.js",
            "lineno": 55,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012443",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "addMethod~methodWrapper~result",
        "kind": "member",
        "memberof": "addMethod~methodWrapper",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1959,
                1989
            ],
            "filename": "addMethod.js",
            "lineno": 58,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012458",
                "name": "newAssertion",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "newAssertion",
        "longname": "addMethod~methodWrapper~newAssertion",
        "kind": "member",
        "memberof": "addMethod~methodWrapper",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2109,
                2149
            ],
            "filename": "addMethod.js",
            "lineno": 64,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012476",
                "name": "ctx[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ctx[undefined]",
        "longname": "ctx[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *         var obj = utils.flag(this, 'object');\n *         new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {object} ctx object to which the property is added\n * @param {string} name of property to add\n * @param {Function} getter function to be used for name\n * @name addProperty\n * @public\n */",
        "meta": {
            "filename": "addProperty.js",
            "lineno": 12,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .addProperty(ctx, name, getter)\n\nAdds a property to the prototype of an object.\n\n    utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n        var obj = utils.flag(this, 'object');\n        new chai.Assertion(obj).to.be.instanceof(Foo);\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.addProperty('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.be.foo;",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object to which the property is added",
                "name": "ctx"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "of property to add",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "function to be used for name",
                "name": "getter"
            }
        ],
        "name": "addProperty",
        "access": "public",
        "longname": "addProperty",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                975,
                2370
            ],
            "filename": "addProperty.js",
            "lineno": 36,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012502",
                "name": "exports.addProperty",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "ctx",
                    "name",
                    "getter"
                ]
            }
        },
        "undocumented": true,
        "name": "addProperty",
        "longname": "addProperty",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                982,
                2370
            ],
            "filename": "addProperty.js",
            "lineno": 36,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012503",
                "name": "addProperty",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "ctx",
                    "name",
                    "getter"
                ]
            },
            "vars": {
                "getter": "addProperty~getter",
                "": null
            }
        },
        "undocumented": true,
        "name": "addProperty",
        "longname": "addProperty",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1026,
                1081
            ],
            "filename": "addProperty.js",
            "lineno": 37,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012510",
                "name": "getter",
                "type": "ConditionalExpression",
                "funcscope": "addProperty",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getter",
        "longname": "addProperty~getter",
        "kind": "member",
        "memberof": "addProperty",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1125,
                2338
            ],
            "filename": "addProperty.js",
            "lineno": 40,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012527",
                "name": "get",
                "type": "FunctionExpression",
                "value": "propertyGetter"
            },
            "vars": {
                "result": "get~result",
                "newAssertion": "get~newAssertion"
            }
        },
        "undocumented": true,
        "name": "get",
        "longname": "get",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2147,
                2173
            ],
            "filename": "addProperty.js",
            "lineno": 60,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012549",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "get~result",
        "kind": "member",
        "memberof": "get",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2233,
                2263
            ],
            "filename": "addProperty.js",
            "lineno": 63,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012563",
                "name": "newAssertion",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "newAssertion",
        "longname": "get~newAssertion",
        "kind": "member",
        "memberof": "get",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2344,
                2362
            ],
            "filename": "addProperty.js",
            "lineno": 67,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012574",
                "name": "configurable",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "configurable",
        "longname": "configurable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {unknown} a first element to compare\n * @param {unknown} b second element to compare\n * @returns {number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @public\n */",
        "meta": {
            "filename": "compareByInspect.js",
            "lineno": 9,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .compareByInspect(mixed, mixed)\n\nTo be used as a compareFunction with Array.prototype.sort. Compares elements\nusing inspect instead of default behavior of using toString so that Symbols\nand objects with irregular/missing toString can still be sorted without a\nTypeError.",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "first element to compare",
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "second element to compare",
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "-1 if 'a' should come before 'b'; otherwise 1"
            }
        ],
        "name": "compareByInspect",
        "access": "public",
        "longname": "compareByInspect",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                664,
                749
            ],
            "filename": "compareByInspect.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012582",
                "name": "exports.compareByInspect",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "a",
                    "b"
                ]
            }
        },
        "undocumented": true,
        "name": "compareByInspect",
        "longname": "compareByInspect",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                671,
                749
            ],
            "filename": "compareByInspect.js",
            "lineno": 23,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012583",
                "name": "compareByInspect",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "a",
                    "b"
                ]
            }
        },
        "undocumented": true,
        "name": "compareByInspect",
        "longname": "compareByInspect",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {unknown} obj constructed Assertion\n * @param {Array} types A list of allowed types for this assertion\n * @name expectTypes\n * @public\n */",
        "meta": {
            "filename": "expectTypes.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .expectTypes(obj, types)\n\nEnsures that the object being tested against is of a valid type.\n\n    utils.expectTypes(this, ['array', 'object', 'string']);",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "constructed Assertion",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A list of allowed types for this assertion",
                "name": "types"
            }
        ],
        "name": "expectTypes",
        "access": "public",
        "longname": "expectTypes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                563,
                1444
            ],
            "filename": "expectTypes.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012614",
                "name": "exports.expectTypes",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "types"
                ]
            }
        },
        "undocumented": true,
        "name": "expectTypes",
        "longname": "expectTypes",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                570,
                1444
            ],
            "filename": "expectTypes.js",
            "lineno": 23,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012615",
                "name": "expectTypes",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "types"
                ]
            },
            "vars": {
                "flagMsg": "expectTypes~flagMsg",
                "ssfi": "expectTypes~ssfi",
                "obj": "expectTypes~obj",
                "types": "expectTypes~types",
                "": null,
                "str": "expectTypes~str",
                "objType": "expectTypes~objType"
            }
        },
        "undocumented": true,
        "name": "expectTypes",
        "longname": "expectTypes",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                611,
                641
            ],
            "filename": "expectTypes.js",
            "lineno": 24,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012621",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "expectTypes~flagMsg",
        "kind": "member",
        "memberof": "expectTypes",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                649,
                673
            ],
            "filename": "expectTypes.js",
            "lineno": 25,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012628",
                "name": "ssfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ssfi",
        "longname": "expectTypes~ssfi",
        "kind": "member",
        "memberof": "expectTypes",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                678,
                717
            ],
            "filename": "expectTypes.js",
            "lineno": 27,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012635",
                "name": "flagMsg",
                "type": "ConditionalExpression",
                "funcscope": "expectTypes",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "expectTypes~flagMsg",
        "kind": "member",
        "memberof": "expectTypes",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                722,
                747
            ],
            "filename": "expectTypes.js",
            "lineno": 29,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012644",
                "name": "obj",
                "type": "CallExpression",
                "funcscope": "expectTypes",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "expectTypes~obj",
        "kind": "member",
        "memberof": "expectTypes",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                751,
                816
            ],
            "filename": "expectTypes.js",
            "lineno": 30,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012651",
                "name": "types",
                "type": "CallExpression",
                "funcscope": "expectTypes",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "types",
        "longname": "expectTypes~types",
        "kind": "member",
        "memberof": "expectTypes",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                904,
                1156
            ],
            "filename": "expectTypes.js",
            "lineno": 36,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012671",
                "name": "str",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "str",
        "longname": "expectTypes~str",
        "kind": "member",
        "memberof": "expectTypes",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                957,
                1023
            ],
            "filename": "expectTypes.js",
            "lineno": 38,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012684",
                "name": "art",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "art",
        "longname": "<anonymous>~art",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1035,
                1099
            ],
            "filename": "expectTypes.js",
            "lineno": 39,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012705",
                "name": "or",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "or",
        "longname": "<anonymous>~or",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1165,
                1198
            ],
            "filename": "expectTypes.js",
            "lineno": 44,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012734",
                "name": "objType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "objType",
        "longname": "expectTypes~objType",
        "kind": "member",
        "memberof": "expectTypes",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {object} obj object constructed Assertion\n * @param {string} key\n * @param {unknown} value (optional)\n * @name flag\n * @returns {unknown | undefined}\n * @private\n */",
        "meta": {
            "filename": "flag.js",
            "lineno": 7,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .flag(object, key, [value])\n\nGet or set a flag value on an object. If a\nvalue is provided it will be set, else it will\nreturn the currently set value or `undefined` if\nthe value is not set.\n\n    utils.flag(this, 'foo', 'bar'); // setter\n    utils.flag(this, 'foo'); // getter, returns `bar`",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object constructed Assertion",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "(optional)",
                "name": "value"
            }
        ],
        "name": "flag",
        "returns": [
            {
                "type": {
                    "names": [
                        "unknown",
                        "undefined"
                    ]
                }
            }
        ],
        "access": "private",
        "longname": "flag",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                614,
                815
            ],
            "filename": "flag.js",
            "lineno": 25,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012774",
                "name": "exports.flag",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "key",
                    "value"
                ]
            }
        },
        "undocumented": true,
        "name": "flag",
        "longname": "flag",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                621,
                815
            ],
            "filename": "flag.js",
            "lineno": 25,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012775",
                "name": "flag",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "key",
                    "value"
                ]
            },
            "vars": {
                "flags": "flag~flags",
                "obj.__flags": "flag~flags.obj.__flags",
                "flags[undefined]": "flag~flags.undefined]"
            }
        },
        "undocumented": true,
        "name": "flag",
        "longname": "flag",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                660,
                718
            ],
            "filename": "flag.js",
            "lineno": 26,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012782",
                "name": "flags",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flags",
        "longname": "flag~flags",
        "kind": "member",
        "memberof": "flag",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                684,
                717
            ],
            "filename": "flag.js",
            "lineno": 26,
            "columnno": 30,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012788",
                "name": "obj.__flags",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "obj.__flags",
        "longname": "flag~flags.obj.__flags",
        "kind": "member",
        "memberof": "flag~flags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                756,
                774
            ],
            "filename": "flag.js",
            "lineno": 28,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012805",
                "name": "flags[undefined]",
                "type": "Identifier",
                "funcscope": "flag",
                "value": "value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "flag~flags.undefined]",
        "kind": "member",
        "memberof": "flag~flags",
        "scope": "static"
    },
    {
        "comment": "/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {object} obj object (constructed Assertion)\n * @param {unknown} args chai.Assertion.prototype.assert arguments\n * @returns {unknown}\n * @name getActual\n */",
        "meta": {
            "filename": "getActual.js",
            "lineno": 7,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .getActual(object, [actual])\n\nReturns the `actual` value for an Assertion.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object (constructed Assertion)",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "chai.Assertion.prototype.assert arguments",
                "name": "args"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                }
            }
        ],
        "name": "getActual",
        "longname": "getActual",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                376,
                463
            ],
            "filename": "getActual.js",
            "lineno": 17,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012817",
                "name": "exports.getActual",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "args"
                ]
            }
        },
        "undocumented": true,
        "name": "getActual",
        "longname": "getActual",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                383,
                463
            ],
            "filename": "getActual.js",
            "lineno": 17,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012818",
                "name": "getActual",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "args"
                ]
            }
        },
        "undocumented": true,
        "name": "getActual",
        "longname": "getActual",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {object} obj object (constructed Assertion)\n * @param {unknown} args chai.Assertion.prototype.assert arguments\n * @returns {unknown}\n * @name getMessage\n * @public\n */",
        "meta": {
            "filename": "getMessage.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .getMessage(object, message, negateMessage)\n\nConstruct the error message based on flags\nand template tags. Template tags will return\na stringified inspection of the object referenced.\n\nMessage template tags:\n- `#{this}` current asserted object\n- `#{act}` actual value\n- `#{exp}` expected value",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object (constructed Assertion)",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "chai.Assertion.prototype.assert arguments",
                "name": "args"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                }
            }
        ],
        "name": "getMessage",
        "access": "public",
        "longname": "getMessage",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                756,
                1364
            ],
            "filename": "getMessage.js",
            "lineno": 29,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012850",
                "name": "exports.getMessage",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "args"
                ]
            }
        },
        "undocumented": true,
        "name": "getMessage",
        "longname": "getMessage",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                763,
                1364
            ],
            "filename": "getMessage.js",
            "lineno": 29,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012851",
                "name": "getMessage",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "args"
                ]
            },
            "vars": {
                "negate": "getMessage~negate",
                "val": "getMessage~val",
                "expected": "getMessage~expected",
                "actual": "getMessage~actual",
                "msg": "getMessage~msg",
                "flagMsg": "getMessage~flagMsg",
                "": null
            }
        },
        "undocumented": true,
        "name": "getMessage",
        "longname": "getMessage",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                802,
                830
            ],
            "filename": "getMessage.js",
            "lineno": 30,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012857",
                "name": "negate",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "negate",
        "longname": "getMessage~negate",
        "kind": "member",
        "memberof": "getMessage",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                836,
                861
            ],
            "filename": "getMessage.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012863",
                "name": "val",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "getMessage~val",
        "kind": "member",
        "memberof": "getMessage",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                867,
                885
            ],
            "filename": "getMessage.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012869",
                "name": "expected",
                "type": "MemberExpression",
                "value": "args[3]"
            }
        },
        "undocumented": true,
        "name": "expected",
        "longname": "getMessage~expected",
        "kind": "member",
        "memberof": "getMessage",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                891,
                920
            ],
            "filename": "getMessage.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012874",
                "name": "actual",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "actual",
        "longname": "getMessage~actual",
        "kind": "member",
        "memberof": "getMessage",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                926,
                958
            ],
            "filename": "getMessage.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012880",
                "name": "msg",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "getMessage~msg",
        "kind": "member",
        "memberof": "getMessage",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                964,
                994
            ],
            "filename": "getMessage.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012890",
                "name": "flagMsg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flagMsg",
        "longname": "getMessage~flagMsg",
        "kind": "member",
        "memberof": "getMessage",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1030,
                1041
            ],
            "filename": "getMessage.js",
            "lineno": 37,
            "columnno": 33,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012902",
                "name": "msg",
                "type": "CallExpression",
                "funcscope": "getMessage",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "getMessage~msg",
        "kind": "member",
        "memberof": "getMessage",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1045,
                1060
            ],
            "filename": "getMessage.js",
            "lineno": 38,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012907",
                "name": "msg",
                "type": "LogicalExpression",
                "funcscope": "getMessage",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "getMessage~msg",
        "kind": "member",
        "memberof": "getMessage",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1064,
                1313
            ],
            "filename": "getMessage.js",
            "lineno": 39,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012913",
                "name": "msg",
                "type": "CallExpression",
                "funcscope": "getMessage",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "getMessage~msg",
        "kind": "member",
        "memberof": "getMessage",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @param {unknown} obj\n * @returns {boolean}\n */",
        "meta": {
            "range": [
                126,
                289
            ],
            "filename": "getOperator.js",
            "lineno": 8,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012965",
                "name": "isObjectType",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj"
                ]
            },
            "vars": {
                "objectType": "isObjectType~objectType",
                "objectTypes": "isObjectType~objectTypes"
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "name": "isObjectType",
        "longname": "isObjectType",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                161,
                183
            ],
            "filename": "getOperator.js",
            "lineno": 9,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012970",
                "name": "objectType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "objectType",
        "longname": "isObjectType~objectType",
        "kind": "member",
        "memberof": "isObjectType",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                191,
                236
            ],
            "filename": "getOperator.js",
            "lineno": 10,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012976",
                "name": "objectTypes",
                "type": "ArrayExpression",
                "value": "[\"Array\",\"Object\",\"Function\"]"
            }
        },
        "undocumented": true,
        "name": "objectTypes",
        "longname": "isObjectType~objectTypes",
        "kind": "member",
        "memberof": "isObjectType",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {object} obj object (constructed Assertion)\n * @param {unknown} args chai.Assertion.prototype.assert arguments\n * @returns {unknown}\n * @name getOperator\n * @public\n */",
        "meta": {
            "filename": "getOperator.js",
            "lineno": 15,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .getOperator(message)\n\nExtract the operator from error message.\nOperator defined is based on below link\nhttps://nodejs.org/api/assert.html#assert_assert.\n\nReturns the `operator` or `undefined` value for an Assertion.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object (constructed Assertion)",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "chai.Assertion.prototype.assert arguments",
                "name": "args"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                }
            }
        ],
        "name": "getOperator",
        "access": "public",
        "longname": "getOperator",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                717,
                1303
            ],
            "filename": "getOperator.js",
            "lineno": 30,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012991",
                "name": "exports.getOperator",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "args"
                ]
            }
        },
        "undocumented": true,
        "name": "getOperator",
        "longname": "getOperator",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                724,
                1303
            ],
            "filename": "getOperator.js",
            "lineno": 30,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012992",
                "name": "getOperator",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "args"
                ]
            },
            "vars": {
                "operator": "getOperator~operator",
                "negate": "getOperator~negate",
                "expected": "getOperator~expected",
                "msg": "getOperator~msg",
                "isObject": "getOperator~isObject"
            }
        },
        "undocumented": true,
        "name": "getOperator",
        "longname": "getOperator",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                764,
                796
            ],
            "filename": "getOperator.js",
            "lineno": 31,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100012998",
                "name": "operator",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "operator",
        "longname": "getOperator~operator",
        "kind": "member",
        "memberof": "getOperator",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                804,
                832
            ],
            "filename": "getOperator.js",
            "lineno": 32,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013005",
                "name": "negate",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "negate",
        "longname": "getOperator~negate",
        "kind": "member",
        "memberof": "getOperator",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                840,
                858
            ],
            "filename": "getOperator.js",
            "lineno": 33,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013012",
                "name": "expected",
                "type": "MemberExpression",
                "value": "args[3]"
            }
        },
        "undocumented": true,
        "name": "expected",
        "longname": "getOperator~expected",
        "kind": "member",
        "memberof": "getOperator",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                866,
                898
            ],
            "filename": "getOperator.js",
            "lineno": 34,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013018",
                "name": "msg",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "getOperator~msg",
        "kind": "member",
        "memberof": "getOperator",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                978,
                989
            ],
            "filename": "getOperator.js",
            "lineno": 40,
            "columnno": 33,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013039",
                "name": "msg",
                "type": "CallExpression",
                "funcscope": "getOperator",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "getOperator~msg",
        "kind": "member",
        "memberof": "getOperator",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                994,
                1009
            ],
            "filename": "getOperator.js",
            "lineno": 42,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013044",
                "name": "msg",
                "type": "LogicalExpression",
                "funcscope": "getOperator",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "getOperator~msg",
        "kind": "member",
        "memberof": "getOperator",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1115,
                1148
            ],
            "filename": "getOperator.js",
            "lineno": 51,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013065",
                "name": "isObject",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isObject",
        "longname": "getOperator~isObject",
        "kind": "member",
        "memberof": "getOperator",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {object} obj\n * @returns {Array}\n * @name getOwnEnumerableProperties\n * @public\n */",
        "meta": {
            "filename": "getOwnEnumerableProperties.js",
            "lineno": 9,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .getOwnEnumerableProperties(object)\n\nThis allows the retrieval of directly-owned enumerable property names and\nsymbols of an object. This function is necessary because Object.keys only\nreturns enumerable property names, not enumerable property symbols.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "name": "getOwnEnumerableProperties",
        "access": "public",
        "longname": "getOwnEnumerableProperties",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                592,
                715
            ],
            "filename": "getOwnEnumerableProperties.js",
            "lineno": 21,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013093",
                "name": "exports.getOwnEnumerableProperties",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj"
                ]
            }
        },
        "undocumented": true,
        "name": "getOwnEnumerableProperties",
        "longname": "getOwnEnumerableProperties",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                599,
                715
            ],
            "filename": "getOwnEnumerableProperties.js",
            "lineno": 21,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013094",
                "name": "getOwnEnumerableProperties",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj"
                ]
            }
        },
        "undocumented": true,
        "name": "getOwnEnumerableProperties",
        "longname": "getOwnEnumerableProperties",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {object} obj\n * @returns {Array}\n * @name getOwnEnumerablePropertySymbols\n * @public\n */",
        "meta": {
            "filename": "getOwnEnumerablePropertySymbols.js",
            "lineno": 7,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .getOwnEnumerablePropertySymbols(object)\n\nThis allows the retrieval of directly-owned enumerable property symbols of an\nobject. This function is necessary because Object.getOwnPropertySymbols\nreturns both enumerable and non-enumerable property symbols.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "name": "getOwnEnumerablePropertySymbols",
        "access": "public",
        "longname": "getOwnEnumerablePropertySymbols",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                515,
                779
            ],
            "filename": "getOwnEnumerablePropertySymbols.js",
            "lineno": 19,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013112",
                "name": "exports.getOwnEnumerablePropertySymbols",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj"
                ]
            }
        },
        "undocumented": true,
        "name": "getOwnEnumerablePropertySymbols",
        "longname": "getOwnEnumerablePropertySymbols",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                522,
                779
            ],
            "filename": "getOwnEnumerablePropertySymbols.js",
            "lineno": 19,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013113",
                "name": "getOwnEnumerablePropertySymbols",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "getOwnEnumerablePropertySymbols",
        "longname": "getOwnEnumerablePropertySymbols",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {object} object\n * @returns {Array}\n * @name getProperties\n * @public\n */",
        "meta": {
            "filename": "getProperties.js",
            "lineno": 7,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .getProperties(object)\n\nThis allows the retrieval of property names of an object, enumerable or not,\ninherited or not.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "object"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "name": "getProperties",
        "access": "public",
        "longname": "getProperties",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                345,
                795
            ],
            "filename": "getProperties.js",
            "lineno": 18,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013149",
                "name": "exports.getProperties",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "object"
                ]
            }
        },
        "undocumented": true,
        "name": "getProperties",
        "longname": "getProperties",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                352,
                795
            ],
            "filename": "getProperties.js",
            "lineno": 18,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013150",
                "name": "getProperties",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "object"
                ]
            },
            "vars": {
                "result": "getProperties~result",
                "addProperty": "getProperties~addProperty",
                "proto": "getProperties~proto"
            }
        },
        "undocumented": true,
        "name": "getProperties",
        "longname": "getProperties",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                391,
                434
            ],
            "filename": "getProperties.js",
            "lineno": 19,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013155",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "getProperties~result",
        "kind": "member",
        "memberof": "getProperties",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n   * @param {unknown} property\n   */",
        "meta": {
            "range": [
                482,
                596
            ],
            "filename": "getProperties.js",
            "lineno": 24,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013162",
                "name": "addProperty",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "property"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "property"
            }
        ],
        "name": "addProperty",
        "longname": "getProperties~addProperty",
        "kind": "function",
        "memberof": "getProperties",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                604,
                641
            ],
            "filename": "getProperties.js",
            "lineno": 30,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013183",
                "name": "proto",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "proto",
        "longname": "getProperties~proto",
        "kind": "member",
        "memberof": "getProperties",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                734,
                770
            ],
            "filename": "getProperties.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013206",
                "name": "proto",
                "type": "CallExpression",
                "funcscope": "getProperties",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "proto",
        "longname": "getProperties~proto",
        "kind": "member",
        "memberof": "getProperties",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                238,
                242
            ],
            "filename": "index.js",
            "lineno": 11,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013222",
                "name": "exports.test",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "test",
        "longname": "test",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                326,
                330
            ],
            "filename": "index.js",
            "lineno": 15,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013231",
                "name": "exports.type",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                365,
                376
            ],
            "filename": "index.js",
            "lineno": 18,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013235",
                "name": "exports.expectTypes",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "expectTypes",
        "longname": "expectTypes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                431,
                441
            ],
            "filename": "index.js",
            "lineno": 21,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013240",
                "name": "exports.getMessage",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "getMessage",
        "longname": "getMessage",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                494,
                503
            ],
            "filename": "index.js",
            "lineno": 24,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013245",
                "name": "exports.getActual",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "getActual",
        "longname": "getActual",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                553,
                560
            ],
            "filename": "index.js",
            "lineno": 27,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013250",
                "name": "exports.inspect",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "inspect",
        "longname": "inspect",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                615,
                625
            ],
            "filename": "index.js",
            "lineno": 30,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013255",
                "name": "exports.objDisplay",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "objDisplay",
        "longname": "objDisplay",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                676,
                680
            ],
            "filename": "index.js",
            "lineno": 33,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013260",
                "name": "exports.flag",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "flag",
        "longname": "flag",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                738,
                751
            ],
            "filename": "index.js",
            "lineno": 36,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013265",
                "name": "exports.transferFlags",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "transferFlags",
        "longname": "transferFlags",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                811,
                825
            ],
            "filename": "index.js",
            "lineno": 39,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013270",
                "name": "exports.eql",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "eql",
        "longname": "eql",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                871,
                882
            ],
            "filename": "index.js",
            "lineno": 42,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013275",
                "name": "exports.getPathInfo",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "getPathInfo",
        "longname": "getPathInfo",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                884,
                895
            ],
            "filename": "index.js",
            "lineno": 42,
            "columnno": 21,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013278",
                "name": "exports.hasProperty",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "hasProperty",
        "longname": "hasProperty",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Function name\n *\n * @param {Function} fn\n * @returns {string}\n */",
        "meta": {
            "range": [
                987,
                1036
            ],
            "filename": "index.js",
            "lineno": 50,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013282",
                "name": "exports.getName",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "fn"
                ]
            }
        },
        "description": "Function name",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "name": "getName",
        "longname": "getName",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                994,
                1036
            ],
            "filename": "index.js",
            "lineno": 50,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013283",
                "name": "getName",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "fn"
                ]
            }
        },
        "undocumented": true,
        "name": "getName",
        "longname": "getName",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1062,
                1073
            ],
            "filename": "index.js",
            "lineno": 55,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013292",
                "name": "exports.addProperty",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "addProperty",
        "longname": "addProperty",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1123,
                1132
            ],
            "filename": "index.js",
            "lineno": 58,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013297",
                "name": "exports.addMethod",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "addMethod",
        "longname": "addMethod",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1188,
                1205
            ],
            "filename": "index.js",
            "lineno": 61,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013302",
                "name": "exports.overwriteProperty",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "overwriteProperty",
        "longname": "overwriteProperty",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1267,
                1282
            ],
            "filename": "index.js",
            "lineno": 64,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013307",
                "name": "exports.overwriteMethod",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "overwriteMethod",
        "longname": "overwriteMethod",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1348,
                1366
            ],
            "filename": "index.js",
            "lineno": 67,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013312",
                "name": "exports.addChainableMethod",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "addChainableMethod",
        "longname": "addChainableMethod",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1439,
                1463
            ],
            "filename": "index.js",
            "lineno": 70,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013317",
                "name": "exports.overwriteChainableMethod",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "overwriteChainableMethod",
        "longname": "overwriteChainableMethod",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1541,
                1557
            ],
            "filename": "index.js",
            "lineno": 73,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013322",
                "name": "exports.compareByInspect",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "compareByInspect",
        "longname": "compareByInspect",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1644,
                1675
            ],
            "filename": "index.js",
            "lineno": 76,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013327",
                "name": "exports.getOwnEnumerablePropertySymbols",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "getOwnEnumerablePropertySymbols",
        "longname": "getOwnEnumerablePropertySymbols",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1771,
                1797
            ],
            "filename": "index.js",
            "lineno": 79,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013332",
                "name": "exports.getOwnEnumerableProperties",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "getOwnEnumerableProperties",
        "longname": "getOwnEnumerableProperties",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1896,
                1906
            ],
            "filename": "index.js",
            "lineno": 82,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013337",
                "name": "exports.checkError",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "checkError",
        "longname": "checkError",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1934,
                1941
            ],
            "filename": "index.js",
            "lineno": 85,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013341",
                "name": "exports.proxify",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "proxify",
        "longname": "proxify",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1996,
                2010
            ],
            "filename": "index.js",
            "lineno": 88,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013346",
                "name": "exports.addLengthGuard",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "addLengthGuard",
        "longname": "addLengthGuard",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2074,
                2088
            ],
            "filename": "index.js",
            "lineno": 91,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013351",
                "name": "exports.isProxyEnabled",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "isProxyEnabled",
        "longname": "isProxyEnabled",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2143,
                2148
            ],
            "filename": "index.js",
            "lineno": 94,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013356",
                "name": "exports.isNaN",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "isNaN",
        "longname": "isNaN",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2200,
                2211
            ],
            "filename": "index.js",
            "lineno": 97,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013361",
                "name": "exports.getOperator",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "getOperator",
        "longname": "getOperator",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Determines if an object is a `RegExp`\n * This is used since `instanceof` will not work in virtual contexts\n *\n * @param {*} obj Object to test\n * @returns {boolean}\n */",
        "meta": {
            "range": [
                2415,
                2516
            ],
            "filename": "index.js",
            "lineno": 106,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013365",
                "name": "exports.isRegExp",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj"
                ]
            }
        },
        "description": "Determines if an object is a `RegExp`\nThis is used since `instanceof` will not work in virtual contexts",
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "Object to test",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "name": "isRegExp",
        "longname": "isRegExp",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2422,
                2516
            ],
            "filename": "index.js",
            "lineno": 106,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013366",
                "name": "isRegExp",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj"
                ]
            }
        },
        "undocumented": true,
        "name": "isRegExp",
        "longname": "isRegExp",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Determines if an object is numeric or not\n *\n * @param {unknown} obj Object to test\n * @returns {boolean}\n */",
        "meta": {
            "range": [
                2635,
                2720
            ],
            "filename": "index.js",
            "lineno": 116,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013382",
                "name": "exports.isNumeric",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj"
                ]
            }
        },
        "description": "Determines if an object is numeric or not",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "Object to test",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "name": "isNumeric",
        "longname": "isNumeric",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2642,
                2720
            ],
            "filename": "index.js",
            "lineno": 116,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013383",
                "name": "isNumeric",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj"
                ]
            }
        },
        "undocumented": true,
        "name": "isNumeric",
        "longname": "isNumeric",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {object} obj The object to print out.\n * @param {boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {number} depth Depth in which to descend in object. Default is 2.\n * @param {boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @returns {string}\n * @name inspect\n */",
        "meta": {
            "filename": "inspect.js",
            "lineno": 7,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .inspect(obj, [showHidden], [depth], [colors])\n\nEchoes the value of a value. Tries to print the value out\nin the best way possible given the different types.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The object to print out.",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Flag that shows hidden (not enumerable)\n   properties of objects. Default is false.",
                "name": "showHidden"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Depth in which to descend in object. Default is 2.",
                "name": "depth"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Flag to turn on ANSI escape codes to color the\n   output. Default is false (no coloring).",
                "name": "colors"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "name": "inspect",
        "longname": "inspect",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                806,
                1099
            ],
            "filename": "inspect.js",
            "lineno": 22,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013407",
                "name": "exports.inspect",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "showHidden",
                    "depth",
                    "colors"
                ]
            }
        },
        "undocumented": true,
        "name": "inspect",
        "longname": "inspect",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                813,
                1099
            ],
            "filename": "inspect.js",
            "lineno": 22,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013408",
                "name": "inspect",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "showHidden",
                    "depth",
                    "colors"
                ]
            },
            "vars": {
                "options": "inspect~options"
            }
        },
        "undocumented": true,
        "name": "inspect",
        "longname": "inspect",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                870,
                1063
            ],
            "filename": "inspect.js",
            "lineno": 23,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013416",
                "name": "options",
                "type": "ObjectExpression",
                "value": "{\"colors\":\"\",\"depth\":\"\",\"showHidden\":\"\",\"truncate\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "options",
        "longname": "inspect~options",
        "kind": "member",
        "memberof": "inspect",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                886,
                900
            ],
            "filename": "inspect.js",
            "lineno": 24,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013419",
                "name": "colors",
                "type": "Identifier",
                "value": "colors"
            }
        },
        "undocumented": true,
        "name": "colors",
        "longname": "inspect~options.colors",
        "kind": "member",
        "memberof": "inspect~options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                906,
                953
            ],
            "filename": "inspect.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013421",
                "name": "depth",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "depth",
        "longname": "inspect~options.depth",
        "kind": "member",
        "memberof": "inspect~options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                959,
                981
            ],
            "filename": "inspect.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013429",
                "name": "showHidden",
                "type": "Identifier",
                "value": "showHidden"
            }
        },
        "undocumented": true,
        "name": "showHidden",
        "longname": "inspect~options.showHidden",
        "kind": "member",
        "memberof": "inspect~options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                987,
                1059
            ],
            "filename": "inspect.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013431",
                "name": "truncate",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "truncate",
        "longname": "inspect~options.truncate",
        "kind": "member",
        "memberof": "inspect~options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                129,
                163
            ],
            "filename": "isNaN.js",
            "lineno": 7,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013447",
                "name": "exports.isNaN",
                "type": "VariableDeclaration"
            }
        },
        "undocumented": true,
        "name": "isNaN",
        "longname": "isNaN",
        "kind": "constant",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                162
            ],
            "filename": "isNaN.js",
            "lineno": 7,
            "columnno": 13,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013449",
                "name": "isNaN",
                "type": "MemberExpression",
                "value": "Number.isNaN"
            }
        },
        "undocumented": true,
        "name": "isNaN",
        "longname": "isNaN",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @name isProxyEnabled\n * @returns {boolean}\n */",
        "meta": {
            "filename": "isProxyEnabled.js",
            "lineno": 9,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .isProxyEnabled()\n\nHelper function to check if Chai's proxy protection feature is enabled. If\nproxies are unsupported or disabled via the user's Chai config, then return\nfalse. Otherwise, return true.",
        "name": "isProxyEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "longname": "isProxyEnabled",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                434,
                580
            ],
            "filename": "isProxyEnabled.js",
            "lineno": 19,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013460",
                "name": "exports.isProxyEnabled",
                "type": "FunctionDeclaration",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "isProxyEnabled",
        "longname": "isProxyEnabled",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                441,
                580
            ],
            "filename": "isProxyEnabled.js",
            "lineno": 19,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013461",
                "name": "isProxyEnabled",
                "type": "FunctionDeclaration",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "isProxyEnabled",
        "longname": "isProxyEnabled",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {unknown} obj javascript object to inspect\n * @returns {string} stringified object\n * @name objDisplay\n * @public\n */",
        "meta": {
            "filename": "objDisplay.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .objDisplay(object)\n\nDetermines if an object or an array matches\ncriteria to be inspected in-line for error\nmessages or should be truncated.",
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "description": "javascript object to inspect",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "stringified object"
            }
        ],
        "name": "objDisplay",
        "access": "public",
        "longname": "objDisplay",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                481,
                1219
            ],
            "filename": "objDisplay.js",
            "lineno": 22,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013488",
                "name": "exports.objDisplay",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj"
                ]
            }
        },
        "undocumented": true,
        "name": "objDisplay",
        "longname": "objDisplay",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                488,
                1219
            ],
            "filename": "objDisplay.js",
            "lineno": 22,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013489",
                "name": "objDisplay",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj"
                ]
            },
            "vars": {
                "str": "objDisplay~str",
                "type": "objDisplay~type",
                "keys": "objDisplay~keys",
                "kstr": "objDisplay~kstr"
            }
        },
        "undocumented": true,
        "name": "objDisplay",
        "longname": "objDisplay",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                521,
                539
            ],
            "filename": "objDisplay.js",
            "lineno": 23,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013494",
                "name": "str",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "str",
        "longname": "objDisplay~str",
        "kind": "member",
        "memberof": "objDisplay",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                545,
                587
            ],
            "filename": "objDisplay.js",
            "lineno": 24,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013499",
                "name": "type",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "objDisplay~type",
        "kind": "member",
        "memberof": "objDisplay",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                958,
                981
            ],
            "filename": "objDisplay.js",
            "lineno": 34,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013567",
                "name": "keys",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "keys",
        "longname": "objDisplay~keys",
        "kind": "member",
        "memberof": "objDisplay",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                991,
                1106
            ],
            "filename": "objDisplay.js",
            "lineno": 35,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013574",
                "name": "kstr",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "kstr",
        "longname": "objDisplay~kstr",
        "kind": "member",
        "memberof": "objDisplay",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *         function (_super) {\n *         }\n *         , function (_super) {\n *         }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {object} ctx object whose method / property is to be overwritten\n * @param {string} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @name overwriteChainableMethod\n * @public\n */",
        "meta": {
            "filename": "overwriteChainableMethod.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n\nOverwrites an already existing chainable method\nand provides access to the previous function or\nproperty.  Must return functions to be used for\nname.\n\n    utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n        function (_super) {\n        }\n        , function (_super) {\n        }\n    );\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.have.lengthOf(3);\n    expect(myFoo).to.have.lengthOf.above(3);",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object whose method / property is to be overwritten",
                "name": "ctx"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "of method / property to overwrite",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "function that returns a function to be used for name",
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "function that returns a function to be used for property",
                "name": "chainingBehavior"
            }
        ],
        "name": "overwriteChainableMethod",
        "access": "public",
        "longname": "overwriteChainableMethod",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1269,
                2144
            ],
            "filename": "overwriteChainableMethod.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013621",
                "name": "exports.overwriteChainableMethod",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "ctx",
                    "name",
                    "method",
                    "chainingBehavior"
                ]
            }
        },
        "undocumented": true,
        "name": "overwriteChainableMethod",
        "longname": "overwriteChainableMethod",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1276,
                2144
            ],
            "filename": "overwriteChainableMethod.js",
            "lineno": 41,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013622",
                "name": "overwriteChainableMethod",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "ctx",
                    "name",
                    "method",
                    "chainingBehavior"
                ]
            },
            "vars": {
                "chainableBehavior": "overwriteChainableMethod~chainableBehavior",
                "_chainingBehavior": "overwriteChainableMethod~_chainingBehavior",
                "chainableBehavior.chainingBehavior": "overwriteChainableMethod~chainableBehavior.chainingBehavior",
                "": null,
                "_method": "overwriteChainableMethod~_method",
                "chainableBehavior.method": "overwriteChainableMethod~chainableBehavior.method"
            }
        },
        "undocumented": true,
        "name": "overwriteChainableMethod",
        "longname": "overwriteChainableMethod",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1355,
                1394
            ],
            "filename": "overwriteChainableMethod.js",
            "lineno": 42,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013630",
                "name": "chainableBehavior",
                "type": "MemberExpression",
                "value": "ctx.__methods[undefined]"
            }
        },
        "undocumented": true,
        "name": "chainableBehavior",
        "longname": "overwriteChainableMethod~chainableBehavior",
        "kind": "member",
        "memberof": "overwriteChainableMethod",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1403,
                1457
            ],
            "filename": "overwriteChainableMethod.js",
            "lineno": 44,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013638",
                "name": "_chainingBehavior",
                "type": "MemberExpression",
                "value": "chainableBehavior.chainingBehavior"
            }
        },
        "undocumented": true,
        "name": "_chainingBehavior",
        "longname": "overwriteChainableMethod~_chainingBehavior",
        "kind": "member",
        "memberof": "overwriteChainableMethod",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1461,
                1796
            ],
            "filename": "overwriteChainableMethod.js",
            "lineno": 45,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013644",
                "name": "chainableBehavior.chainingBehavior",
                "type": "FunctionExpression",
                "funcscope": "overwriteChainableMethod",
                "value": "overwritingChainableMethodGetter",
                "paramnames": []
            },
            "vars": {
                "result": "overwriteChainableMethod~chainableBehavior.chainingBehavior~result",
                "newAssertion": "overwriteChainableMethod~chainableBehavior.chainingBehavior~newAssertion"
            }
        },
        "undocumented": true,
        "name": "chainingBehavior",
        "longname": "overwriteChainableMethod~chainableBehavior.chainingBehavior",
        "kind": "function",
        "memberof": "overwriteChainableMethod~chainableBehavior",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1558,
                1613
            ],
            "filename": "overwriteChainableMethod.js",
            "lineno": 47,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013652",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "overwriteChainableMethod~chainableBehavior.chainingBehavior~result",
        "kind": "member",
        "memberof": "overwriteChainableMethod~chainableBehavior.chainingBehavior",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1691,
                1721
            ],
            "filename": "overwriteChainableMethod.js",
            "lineno": 52,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013669",
                "name": "newAssertion",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "newAssertion",
        "longname": "overwriteChainableMethod~chainableBehavior.chainingBehavior~newAssertion",
        "kind": "member",
        "memberof": "overwriteChainableMethod~chainableBehavior.chainingBehavior",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1805,
                1839
            ],
            "filename": "overwriteChainableMethod.js",
            "lineno": 57,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013681",
                "name": "_method",
                "type": "MemberExpression",
                "value": "chainableBehavior.method"
            }
        },
        "undocumented": true,
        "name": "_method",
        "longname": "overwriteChainableMethod~_method",
        "kind": "member",
        "memberof": "overwriteChainableMethod",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1843,
                2141
            ],
            "filename": "overwriteChainableMethod.js",
            "lineno": 58,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013687",
                "name": "chainableBehavior.method",
                "type": "FunctionExpression",
                "funcscope": "overwriteChainableMethod",
                "value": "overwritingChainableMethodWrapper",
                "paramnames": []
            },
            "vars": {
                "result": "overwriteChainableMethod~chainableBehavior.method~result",
                "newAssertion": "overwriteChainableMethod~chainableBehavior.method~newAssertion"
            }
        },
        "undocumented": true,
        "name": "method",
        "longname": "overwriteChainableMethod~chainableBehavior.method",
        "kind": "function",
        "memberof": "overwriteChainableMethod~chainableBehavior",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1925,
                1972
            ],
            "filename": "overwriteChainableMethod.js",
            "lineno": 59,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013695",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "overwriteChainableMethod~chainableBehavior.method~result",
        "kind": "member",
        "memberof": "overwriteChainableMethod~chainableBehavior.method",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2042,
                2072
            ],
            "filename": "overwriteChainableMethod.js",
            "lineno": 64,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013713",
                "name": "newAssertion",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "newAssertion",
        "longname": "overwriteChainableMethod~chainableBehavior.method~newAssertion",
        "kind": "member",
        "memberof": "overwriteChainableMethod~chainableBehavior.method",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *         return function (str) {\n *             var obj = utils.flag(this, 'object');\n *             if (obj instanceof Foo) {\n *                 new chai.Assertion(obj.value).to.equal(str);\n *             } else {\n *                 _super.apply(this, arguments);\n *             }\n *         }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {object} ctx object whose method is to be overwritten\n * @param {string} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @name overwriteMethod\n * @public\n */",
        "meta": {
            "filename": "overwriteMethod.js",
            "lineno": 13,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .overwriteMethod(ctx, name, fn)\n\nOverwrites an already existing method and provides\naccess to previous function. Must return function\nto be used for name.\n\n    utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n        return function (str) {\n            var obj = utils.flag(this, 'object');\n            if (obj instanceof Foo) {\n                new chai.Assertion(obj.value).to.equal(str);\n            } else {\n                _super.apply(this, arguments);\n            }\n        }\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.overwriteMethod('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.equal('bar');",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object whose method is to be overwritten",
                "name": "ctx"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "of method to overwrite",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "function that returns a function to be used for name",
                "name": "method"
            }
        ],
        "name": "overwriteMethod",
        "access": "public",
        "longname": "overwriteMethod",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1345,
                3103
            ],
            "filename": "overwriteMethod.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013746",
                "name": "exports.overwriteMethod",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "ctx",
                    "name",
                    "method"
                ]
            }
        },
        "undocumented": true,
        "name": "overwriteMethod",
        "longname": "overwriteMethod",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1352,
                3103
            ],
            "filename": "overwriteMethod.js",
            "lineno": 45,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013747",
                "name": "overwriteMethod",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "ctx",
                    "name",
                    "method"
                ]
            },
            "vars": {
                "_method": "overwriteMethod~_method",
                "_super": "overwriteMethod~_super",
                "": null,
                "overwritingMethodWrapper": "overwriteMethod~overwritingMethodWrapper",
                "ctx[undefined]": null
            }
        },
        "undocumented": true,
        "name": "overwriteMethod",
        "longname": "overwriteMethod",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1404,
                1423
            ],
            "filename": "overwriteMethod.js",
            "lineno": 46,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013754",
                "name": "_method",
                "type": "MemberExpression",
                "value": "ctx[undefined]"
            }
        },
        "undocumented": true,
        "name": "_method",
        "longname": "overwriteMethod~_method",
        "kind": "member",
        "memberof": "overwriteMethod",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1429,
                1509
            ],
            "filename": "overwriteMethod.js",
            "lineno": 47,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013759",
                "name": "_super",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "_super",
        "longname": "overwriteMethod~_super",
        "kind": "function",
        "memberof": "overwriteMethod",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1560,
                1576
            ],
            "filename": "overwriteMethod.js",
            "lineno": 51,
            "columnno": 48,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013777",
                "name": "_super",
                "type": "Identifier",
                "funcscope": "overwriteMethod",
                "value": "_method",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_super",
        "longname": "overwriteMethod~_super",
        "kind": "member",
        "memberof": "overwriteMethod",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1585,
                2987
            ],
            "filename": "overwriteMethod.js",
            "lineno": 53,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013781",
                "name": "overwritingMethodWrapper",
                "type": "FunctionExpression"
            },
            "vars": {
                "origLockSsfi": "overwriteMethod~overwritingMethodWrapper~origLockSsfi",
                "result": "overwriteMethod~overwritingMethodWrapper~result",
                "newAssertion": "overwriteMethod~overwritingMethodWrapper~newAssertion"
            }
        },
        "undocumented": true,
        "name": "overwritingMethodWrapper",
        "longname": "overwriteMethod~overwritingMethodWrapper",
        "kind": "function",
        "memberof": "overwriteMethod",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2648,
                2685
            ],
            "filename": "overwriteMethod.js",
            "lineno": 73,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013799",
                "name": "origLockSsfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "origLockSsfi",
        "longname": "overwriteMethod~overwritingMethodWrapper~origLockSsfi",
        "kind": "member",
        "memberof": "overwriteMethod~overwritingMethodWrapper",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2729,
                2775
            ],
            "filename": "overwriteMethod.js",
            "lineno": 75,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013812",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "overwriteMethod~overwritingMethodWrapper~result",
        "kind": "member",
        "memberof": "overwriteMethod~overwritingMethodWrapper",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2888,
                2918
            ],
            "filename": "overwriteMethod.js",
            "lineno": 82,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013836",
                "name": "newAssertion",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "newAssertion",
        "longname": "overwriteMethod~overwritingMethodWrapper~newAssertion",
        "kind": "member",
        "memberof": "overwriteMethod~overwritingMethodWrapper",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3049,
                3100
            ],
            "filename": "overwriteMethod.js",
            "lineno": 88,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013854",
                "name": "ctx[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ctx[undefined]",
        "longname": "ctx[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *         return function () {\n *             var obj = utils.flag(this, 'object');\n *             if (obj instanceof Foo) {\n *                 new chai.Assertion(obj.name).to.equal('bar');\n *             } else {\n *                 _super.call(this);\n *             }\n *         }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {object} ctx object whose property is to be overwritten\n * @param {string} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @name overwriteProperty\n * @public\n */",
        "meta": {
            "filename": "overwriteProperty.js",
            "lineno": 12,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .overwriteProperty(ctx, name, fn)\n\nOverwrites an already existing property getter and provides\naccess to previous value. Must return function to use as getter.\n\n    utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n        return function () {\n            var obj = utils.flag(this, 'object');\n            if (obj instanceof Foo) {\n                new chai.Assertion(obj.name).to.equal('bar');\n            } else {\n                _super.call(this);\n            }\n        }\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.overwriteProperty('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.be.ok;",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object whose property is to be overwritten",
                "name": "ctx"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "of property to overwrite",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "function that returns a getter function to be used for name",
                "name": "getter"
            }
        ],
        "name": "overwriteProperty",
        "access": "public",
        "longname": "overwriteProperty",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1304,
                3214
            ],
            "filename": "overwriteProperty.js",
            "lineno": 43,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013880",
                "name": "exports.overwriteProperty",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "ctx",
                    "name",
                    "getter"
                ]
            }
        },
        "undocumented": true,
        "name": "overwriteProperty",
        "longname": "overwriteProperty",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1311,
                3214
            ],
            "filename": "overwriteProperty.js",
            "lineno": 43,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013881",
                "name": "overwriteProperty",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "ctx",
                    "name",
                    "getter"
                ]
            },
            "vars": {
                "_get": "overwriteProperty~_get",
                "_super": "overwriteProperty~_super",
                "": null
            }
        },
        "undocumented": true,
        "name": "overwriteProperty",
        "longname": "overwriteProperty",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1365,
                1414
            ],
            "filename": "overwriteProperty.js",
            "lineno": 44,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013888",
                "name": "_get",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_get",
        "longname": "overwriteProperty~_get",
        "kind": "member",
        "memberof": "overwriteProperty",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1420,
                1443
            ],
            "filename": "overwriteProperty.js",
            "lineno": 45,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013896",
                "name": "_super",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "_super",
        "longname": "overwriteProperty~_super",
        "kind": "function",
        "memberof": "overwriteProperty",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1492,
                1509
            ],
            "filename": "overwriteProperty.js",
            "lineno": 47,
            "columnno": 46,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013910",
                "name": "_super",
                "type": "MemberExpression",
                "funcscope": "overwriteProperty",
                "value": "_get.get",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_super",
        "longname": "overwriteProperty~_super",
        "kind": "member",
        "memberof": "overwriteProperty",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1553,
                3182
            ],
            "filename": "overwriteProperty.js",
            "lineno": 50,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013923",
                "name": "get",
                "type": "FunctionExpression",
                "value": "overwritingPropertyGetter"
            },
            "vars": {
                "origLockSsfi": "get~origLockSsfi",
                "result": "get~result",
                "newAssertion": "get~newAssertion"
            }
        },
        "undocumented": true,
        "name": "get",
        "longname": "get",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2835,
                2872
            ],
            "filename": "overwriteProperty.js",
            "lineno": 73,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013945",
                "name": "origLockSsfi",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "origLockSsfi",
        "longname": "get~origLockSsfi",
        "kind": "member",
        "memberof": "get",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2920,
                2954
            ],
            "filename": "overwriteProperty.js",
            "lineno": 75,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013958",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "get~result",
        "kind": "member",
        "memberof": "get",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3077,
                3107
            ],
            "filename": "overwriteProperty.js",
            "lineno": 82,
            "columnno": 10,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013981",
                "name": "newAssertion",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "newAssertion",
        "longname": "get~newAssertion",
        "kind": "member",
        "memberof": "get",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3188,
                3206
            ],
            "filename": "overwriteProperty.js",
            "lineno": 86,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100013992",
                "name": "configurable",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "configurable",
        "longname": "configurable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                292,
                345
            ],
            "filename": "proxify.js",
            "lineno": 12,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014013",
                "name": "builtins",
                "type": "ArrayExpression",
                "value": "[\"__flags\",\"__methods\",\"_obj\",\"assert\"]"
            }
        },
        "undocumented": true,
        "name": "builtins",
        "longname": "builtins",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {object} obj\n * @param {string} nonChainableMethodName\n * @returns {unknown}\n * @name proxify\n */",
        "meta": {
            "filename": "proxify.js",
            "lineno": 14,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .proxify(object)\n\nReturn a proxy of given object that throws an error when a non-existent\nproperty is read. By default, the root cause is assumed to be a misspelled\nproperty, and thus an attempt is made to offer a reasonable suggestion from\nthe list of existing properties. However, if a nonChainableMethodName is\nprovided, then the root cause is instead a failure to invoke a non-chainable\nmethod prior to reading the non-existent property.\n\nIf proxies are unsupported or disabled via the user's Chai config, then\nreturn object without modification.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "nonChainableMethodName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                }
            }
        ],
        "name": "proxify",
        "longname": "proxify",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1049,
                4266
            ],
            "filename": "proxify.js",
            "lineno": 32,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014020",
                "name": "exports.proxify",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "nonChainableMethodName"
                ]
            }
        },
        "undocumented": true,
        "name": "proxify",
        "longname": "proxify",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1056,
                4266
            ],
            "filename": "proxify.js",
            "lineno": 32,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014021",
                "name": "proxify",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "nonChainableMethodName"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "proxify",
        "longname": "proxify",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1172,
                4258
            ],
            "filename": "proxify.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014037",
                "name": "get",
                "type": "FunctionExpression",
                "value": "proxyGetter"
            },
            "vars": {
                "suggestion": "get~suggestion",
                "suggestionDistance": "get~suggestionDistance",
                "": null
            }
        },
        "undocumented": true,
        "name": "get",
        "longname": "get",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2229,
                2246
            ],
            "filename": "proxify.js",
            "lineno": 62,
            "columnno": 12,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014088",
                "name": "suggestion",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "suggestion",
        "longname": "get~suggestion",
        "kind": "member",
        "memberof": "get",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2260,
                2282
            ],
            "filename": "proxify.js",
            "lineno": 63,
            "columnno": 12,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014092",
                "name": "suggestionDistance",
                "type": "Literal",
                "value": 4
            }
        },
        "undocumented": true,
        "name": "suggestionDistance",
        "longname": "get~suggestionDistance",
        "kind": "member",
        "memberof": "get",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2608,
                2671
            ],
            "filename": "proxify.js",
            "lineno": 71,
            "columnno": 16,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014125",
                "name": "dist",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "dist",
        "longname": "<anonymous>~dist",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2732,
                2749
            ],
            "filename": "proxify.js",
            "lineno": 73,
            "columnno": 14,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014138",
                "name": "suggestion",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "suggestion",
        "longname": "<anonymous>~suggestion",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2765,
                2790
            ],
            "filename": "proxify.js",
            "lineno": 74,
            "columnno": 14,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014142",
                "name": "suggestionDistance",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "dist",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "suggestionDistance",
        "longname": "<anonymous>~suggestionDistance",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n *\n * @param {string} strA\n * @param {string} strB\n * @param {number} cap\n * @returns {number} min(string distance between strA and strB, cap)\n * @private\n */",
        "meta": {
            "range": [
                4552,
                5445
            ],
            "filename": "proxify.js",
            "lineno": 123,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014198",
                "name": "stringDistanceCapped",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "strA",
                    "strB",
                    "cap"
                ]
            },
            "vars": {
                "memo": "stringDistanceCapped~memo",
                "i": "stringDistanceCapped~i",
                "memo[undefined]": "stringDistanceCapped~memo.undefined]",
                "memo[undefined][0]": "stringDistanceCapped~memo.undefined][0]",
                "j": "stringDistanceCapped~j",
                "memo[0][undefined]": "stringDistanceCapped~memo.0][undefined]",
                "ch": "stringDistanceCapped~ch",
                "memo[undefined][undefined]": "stringDistanceCapped~memo.undefined][undefined]"
            }
        },
        "description": "# stringDistanceCapped(strA, strB, cap)\nReturn the Levenshtein distance between two strings, but no more than cap.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "strA"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "strB"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "cap"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "min(string distance between strA and strB, cap)"
            }
        ],
        "access": "private",
        "name": "stringDistanceCapped",
        "longname": "stringDistanceCapped",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4680,
                4689
            ],
            "filename": "proxify.js",
            "lineno": 128,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014222",
                "name": "memo",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "memo",
        "longname": "stringDistanceCapped~memo",
        "kind": "member",
        "memberof": "stringDistanceCapped",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4847,
                4852
            ],
            "filename": "proxify.js",
            "lineno": 132,
            "columnno": 11,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014227",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "stringDistanceCapped~i",
        "kind": "member",
        "memberof": "stringDistanceCapped",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4883,
                4923
            ],
            "filename": "proxify.js",
            "lineno": 133,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014239",
                "name": "memo[undefined]",
                "type": "CallExpression",
                "funcscope": "stringDistanceCapped",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "stringDistanceCapped~memo.undefined]",
        "kind": "member",
        "memberof": "stringDistanceCapped~memo",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4929,
                4943
            ],
            "filename": "proxify.js",
            "lineno": 134,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014255",
                "name": "memo[undefined][0]",
                "type": "Identifier",
                "funcscope": "stringDistanceCapped",
                "value": "i",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined][0]",
        "longname": "stringDistanceCapped~memo.undefined][0]",
        "kind": "member",
        "memberof": "stringDistanceCapped~memo",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4960,
                4965
            ],
            "filename": "proxify.js",
            "lineno": 136,
            "columnno": 11,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014264",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "stringDistanceCapped~j",
        "kind": "member",
        "memberof": "stringDistanceCapped",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4995,
                5009
            ],
            "filename": "proxify.js",
            "lineno": 137,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014276",
                "name": "memo[0][undefined]",
                "type": "Identifier",
                "funcscope": "stringDistanceCapped",
                "value": "j",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "0][undefined]",
        "longname": "stringDistanceCapped~memo.0][undefined]",
        "kind": "member",
        "memberof": "stringDistanceCapped~memo",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5027,
                5032
            ],
            "filename": "proxify.js",
            "lineno": 140,
            "columnno": 11,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014285",
                "name": "i",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "stringDistanceCapped~i",
        "kind": "member",
        "memberof": "stringDistanceCapped",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5067,
                5094
            ],
            "filename": "proxify.js",
            "lineno": 141,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014297",
                "name": "ch",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ch",
        "longname": "stringDistanceCapped~ch",
        "kind": "member",
        "memberof": "stringDistanceCapped",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5109,
                5114
            ],
            "filename": "proxify.js",
            "lineno": 142,
            "columnno": 13,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014308",
                "name": "j",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "stringDistanceCapped~j",
        "kind": "member",
        "memberof": "stringDistanceCapped",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5185,
                5201
            ],
            "filename": "proxify.js",
            "lineno": 144,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014331",
                "name": "memo[undefined][undefined]",
                "type": "Identifier",
                "funcscope": "stringDistanceCapped",
                "value": "cap",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined][undefined]",
        "longname": "stringDistanceCapped~memo.undefined][undefined]",
        "kind": "member",
        "memberof": "stringDistanceCapped~memo",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5235,
                5390
            ],
            "filename": "proxify.js",
            "lineno": 147,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014340",
                "name": "memo[undefined][undefined]",
                "type": "CallExpression",
                "funcscope": "stringDistanceCapped",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined][undefined]",
        "longname": "stringDistanceCapped~memo.undefined][undefined]",
        "kind": "member",
        "memberof": "stringDistanceCapped~memo",
        "scope": "static"
    },
    {
        "comment": "/**\n * ### .test(object, expression)\n *\n * Test an object for expression.\n *\n * @param {object} obj (constructed Assertion)\n * @param {unknown} args\n * @returns {unknown}\n * @name test\n */",
        "meta": {
            "filename": "test.js",
            "lineno": 9,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .test(object, expression)\n\nTest an object for expression.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "(constructed Assertion)",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "args"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                }
            }
        ],
        "name": "test",
        "longname": "test",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                333,
                456
            ],
            "filename": "test.js",
            "lineno": 19,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014406",
                "name": "exports.test",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "args"
                ]
            }
        },
        "undocumented": true,
        "name": "test",
        "longname": "test",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                340,
                456
            ],
            "filename": "test.js",
            "lineno": 19,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014407",
                "name": "test",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj",
                    "args"
                ]
            },
            "vars": {
                "negate": "test~negate",
                "expr": "test~expr"
            }
        },
        "undocumented": true,
        "name": "test",
        "longname": "test",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                373,
                401
            ],
            "filename": "test.js",
            "lineno": 20,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014413",
                "name": "negate",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "negate",
        "longname": "test~negate",
        "kind": "member",
        "memberof": "test",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                407,
                421
            ],
            "filename": "test.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014419",
                "name": "expr",
                "type": "MemberExpression",
                "value": "args[0]"
            }
        },
        "undocumented": true,
        "name": "expr",
        "longname": "test~expr",
        "kind": "member",
        "memberof": "test",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {import('../assertion.js').Assertion} assertion the assertion to transfer the flags from\n * @param {object} object the object to transfer the flags to; usually a new assertion\n * @param {boolean} includeAll\n * @name transferFlags\n * @private\n */",
        "meta": {
            "filename": "transferFlags.js",
            "lineno": 7,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {}
        },
        "description": "### .transferFlags(assertion, object, includeAll = true)\n\nTransfer all the flags for `assertion` to `object`. If\n`includeAll` is set to `false`, then the base Chai\nassertion flags (namely `object`, `ssfi`, `lockSsfi`,\nand `message`) will not be transferred.\n\n    var newAssertion = new Assertion();\n    utils.transferFlags(assertion, newAssertion);\n\n    var anotherAssertion = new Assertion(myObj);\n    utils.transferFlags(assertion, anotherAssertion, false);",
        "params": [
            {},
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "the object to transfer the flags to; usually a new assertion",
                "name": "object"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "includeAll"
            }
        ],
        "name": "transferFlags",
        "access": "private",
        "longname": "transferFlags",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                876,
                1381
            ],
            "filename": "transferFlags.js",
            "lineno": 27,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014432",
                "name": "exports.transferFlags",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "assertion",
                    "object",
                    "includeAll"
                ]
            }
        },
        "undocumented": true,
        "name": "transferFlags",
        "longname": "transferFlags",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                883,
                1381
            ],
            "filename": "transferFlags.js",
            "lineno": 27,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014433",
                "name": "transferFlags",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "assertion",
                    "object",
                    "includeAll"
                ]
            },
            "vars": {
                "flags": "transferFlags~flags",
                "assertion.__flags": "transferFlags~flags.assertion.__flags",
                "object.__flags": "object.__flags",
                "includeAll": "transferFlags~includeAll",
                "flag": "transferFlags~flag",
                "object.__flags[undefined]": "object.__flags[undefined]"
            }
        },
        "undocumented": true,
        "name": "transferFlags",
        "longname": "transferFlags",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                945,
                1015
            ],
            "filename": "transferFlags.js",
            "lineno": 28,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014440",
                "name": "flags",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flags",
        "longname": "transferFlags~flags",
        "kind": "member",
        "memberof": "transferFlags",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                975,
                1014
            ],
            "filename": "transferFlags.js",
            "lineno": 28,
            "columnno": 36,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014446",
                "name": "assertion.__flags",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "assertion.__flags",
        "longname": "transferFlags~flags.assertion.__flags",
        "kind": "member",
        "memberof": "transferFlags~flags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1047,
                1083
            ],
            "filename": "transferFlags.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014462",
                "name": "object.__flags",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__flags",
        "longname": "object.__flags",
        "kind": "member",
        "memberof": "object",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1092,
                1147
            ],
            "filename": "transferFlags.js",
            "lineno": 34,
            "columnno": 2,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014472",
                "name": "includeAll",
                "type": "ConditionalExpression",
                "funcscope": "transferFlags",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "includeAll",
        "longname": "transferFlags~includeAll",
        "kind": "member",
        "memberof": "transferFlags",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1161,
                1165
            ],
            "filename": "transferFlags.js",
            "lineno": 36,
            "columnno": 11,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014484",
                "name": "flag"
            }
        },
        "undocumented": true,
        "name": "flag",
        "longname": "transferFlags~flag",
        "kind": "member",
        "memberof": "transferFlags",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1334,
                1368
            ],
            "filename": "transferFlags.js",
            "lineno": 44,
            "columnno": 6,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014508",
                "name": "object.__flags[undefined]",
                "type": "MemberExpression",
                "value": "flags[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__flags[undefined]",
        "longname": "object.__flags[undefined]",
        "kind": "member",
        "memberof": "object",
        "scope": "static"
    },
    {
        "comment": "/**\n * @param {unknown} obj\n * @returns {string}\n */",
        "meta": {
            "range": [
                53,
                383
            ],
            "filename": "type-detect.js",
            "lineno": 5,
            "columnno": 0,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014519",
                "name": "exports.type",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "unknown"
                    ]
                },
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "name": "type",
        "longname": "type",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60,
                383
            ],
            "filename": "type-detect.js",
            "lineno": 5,
            "columnno": 7,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014520",
                "name": "type",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "obj"
                ]
            },
            "vars": {
                "stringTag": "type~stringTag",
                "type": "type~type"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                200,
                235
            ],
            "filename": "type-detect.js",
            "lineno": 14,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014540",
                "name": "stringTag",
                "type": "MemberExpression",
                "value": "obj[undefined]"
            }
        },
        "undocumented": true,
        "name": "stringTag",
        "longname": "type~stringTag",
        "kind": "constant",
        "memberof": "type",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                310,
                365
            ],
            "filename": "type-detect.js",
            "lineno": 18,
            "columnno": 8,
            "path": "/Users/koddsson/src/koddsson/chai/lib/chai/utils",
            "code": {
                "id": "astnode100014556",
                "name": "type",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type~type",
        "kind": "constant",
        "memberof": "type",
        "scope": "inner",
        "params": []
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/Users/koddsson/src/koddsson/chai/lib/chai.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/assertion.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/config.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/core/assertions.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/interface/assert.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/interface/expect.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/interface/should.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/addChainableMethod.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/addLengthGuard.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/addMethod.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/addProperty.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/compareByInspect.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/expectTypes.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/flag.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/getActual.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/getMessage.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/getOperator.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/getOwnEnumerableProperties.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/getProperties.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/index.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/inspect.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/isNaN.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/isProxyEnabled.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/objDisplay.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/overwriteChainableMethod.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/overwriteMethod.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/overwriteProperty.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/proxify.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/test.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/transferFlags.js",
            "/Users/koddsson/src/koddsson/chai/lib/chai/utils/type-detect.js"
        ]
    }
]
